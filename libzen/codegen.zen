function CGenerator(this: CGenerator): CGenerator;
function GetEngine(this: CGenerator): ZSourceEngine;
function GenerateImportLibrary(this: CGenerator, LibName: String): void;
function GenerateCode(this: CGenerator, ContextType: ZType, Node: ZNode): void;
function VisitArrayLiteralNode(this: CGenerator, Node: ZArrayLiteralNode): void;
function VisitMapLiteralNode(this: CGenerator, Node: ZMapLiteralNode): void;
function VisitNewObjectNode(this: CGenerator, Node: ZNewObjectNode): void;
function BaseName(this: CGenerator, RecvType: ZType): String;
function VisitGetIndexNode(this: CGenerator, Node: ZGetIndexNode): void;
function VisitSetIndexNode(this: CGenerator, Node: ZSetIndexNode): void;
function VisitGetNameNode(this: CGenerator, Node: ZGetNameNode): void;
function VisitSetNameNode(this: CGenerator, Node: ZSetNameNode): void;
function VisitGetterNode(this: CGenerator, Node: ZGetterNode): void;
function VisitSetterNode(this: CGenerator, Node: ZSetterNode): void;
function VisitMethodCallNode(this: CGenerator, Node: ZMethodCallNode): void;
function VisitFuncCallNode(this: CGenerator, Node: ZFuncCallNode): void;
function VisitThrowNode(this: CGenerator, Node: ZThrowNode): void;
function VisitTryNode(this: CGenerator, Node: ZTryNode): void;
function ParamTypeName(this: CGenerator, Type: ZType): String;
function GetCTypeName(this: CGenerator, Type: ZType): String;
function GenerateFuncTypeName(this: CGenerator, Type: ZType, FuncName: String): void;
function GenerateTypeName(this: CGenerator, Type: ZType): void;
function VisitVarNode(this: CGenerator, Node: ZVarNode): void;
function VisitLetNode(this: CGenerator, Node: ZLetNode): void;
function VisitParamNode(this: CGenerator, Node: ZParamNode): void;
function VisitFunctionNode(this: CGenerator, Node: ZFunctionNode): void;
function GenerateExportFunction(this: CGenerator, Node: ZFunctionNode): void;
function VisitInstanceOfNode(this: CGenerator, Node: ZInstanceOfNode): void;
function GenerateCField(this: CGenerator, CType: String, FieldName: String): void;
function GenerateField(this: CGenerator, DeclType: ZType, FieldName: String): void;
function GenerateFields(this: CGenerator, ClassType: ZClassType, ThisType: ZType): void;
function VisitClassNode(this: CGenerator, Node: ZClassNode): void;
class CGenerator extends ZSourceGenerator {
}
function CGenerator(this: CGenerator): CGenerator {
	ZSourceGenerator(this, "c", "C99");
	this.TrueLiteral  = "1/*true*/";
	this.FalseLiteral = "0/*false*/";
	this.NullLiteral  = "NULL";
	this.TopType = "ZObject *";
	this.SetNativeType(ZTypeBooleanType, "int");
	this.SetNativeType(ZTypeIntType, "long");
	this.SetNativeType(ZTypeFloatType, "double");
	this.SetNativeType(ZTypeStringType, "const char *");
	this.HeaderBuilder.AppendNewLine("/* end of header */", this.LineFeed);
}

function GetEngine(this: CGenerator): ZSourceEngine {
	return new ZSourceEngine(new ZenTypeSafer(this), this);
}

function GenerateImportLibrary(this: CGenerator, LibName: String): void {
	this.HeaderBuilder.AppendNewLine("#include<", LibName, ">");
}

function GenerateCode(this: CGenerator, ContextType: ZType, Node: ZNode): void {
	if(Node.IsUntyped() && !Node.IsErrorNode() && !(Node instanceof ZGlobalNameNode)) {
		this.CurrentBuilder.Append("/*untyped*/" + this.NullLiteral);
		ZLogger_LogError(Node.SourceToken, "untyped error: " + Node);
	}
	else {
		if(ContextType != null && Node.Type != ContextType) {
			this.CurrentBuilder.Append("(");
			this.GenerateTypeName(ContextType);
			this.CurrentBuilder.Append(")");
		}
		Node.Accept(this);
	}
}

function VisitArrayLiteralNode(this: CGenerator, Node: ZArrayLiteralNode): void {
	var ParamType: ZType = Node.Type.GetParamType(0);
	if(ParamType.IsIntType() || ParamType.IsBooleanType()) {
		this.CurrentBuilder.Append("LibZen_NewIntArray(");
	}
	else if(ParamType.IsFloatType()) {
		this.CurrentBuilder.Append("LibZen_NewFloatArray(");
	}
	else if(ParamType.IsStringType()) {
		this.CurrentBuilder.Append("LibZen_NewStringArray(");
	}
	else {
		this.CurrentBuilder.Append("LibZen_NewArray(");
	}
	this.CurrentBuilder.Append(""+(Node.GetListSize()));
	if(Node.GetListSize() > 0) {
		this.CurrentBuilder.Append(this.Camma);
	}
	this.VisitListNode("", Node, ")");
}

function VisitMapLiteralNode(this: CGenerator, Node: ZMapLiteralNode): void {
	var ParamType: ZType = Node.Type.GetParamType(0);
	if(ParamType.IsIntType() || ParamType.IsBooleanType()) {
		this.CurrentBuilder.Append("LibZen_NewIntMap(");
	}
	else if(ParamType.IsFloatType()) {
		this.CurrentBuilder.Append("LibZen_NewFloatMap(");
	}
	else if(ParamType.IsStringType()) {
		this.CurrentBuilder.Append("LibZen_NewStringMap(");
	}
	else {
		this.CurrentBuilder.Append("LibZen_NewMap(");
	}
	this.CurrentBuilder.Append(""+(Node.GetListSize()));
	if(Node.GetListSize() > 0) {
		this.CurrentBuilder.Append(this.Camma);
	}
	this.VisitListNode("", Node, ")");
}

function VisitNewObjectNode(this: CGenerator, Node: ZNewObjectNode): void {
	this.CurrentBuilder.Append("_New"+this.NameClass(Node.Type));
	this.VisitListNode("(", Node, ")");
}

function BaseName(this: CGenerator, RecvType: ZType): String {
	return RecvType.GetAsciiName(); // FIXME
}

function VisitGetIndexNode(this: CGenerator, Node: ZGetIndexNode): void {
	this.CurrentBuilder.Append(this.BaseName(Node.GetAstType(ZGetIndexNode_Recv)) + "GetIndex");
	this.CurrentBuilder.Append("(");
	this.GenerateCode(null, Node.IndexNode());
	this.CurrentBuilder.Append(")");
}

function VisitSetIndexNode(this: CGenerator, Node: ZSetIndexNode): void {
	this.CurrentBuilder.Append(this.BaseName(Node.GetAstType(ZGetIndexNode_Recv)) + "SetIndex");
	this.CurrentBuilder.Append("(");
	this.GenerateCode(null, Node.IndexNode());
	this.CurrentBuilder.Append(this.Camma);
	this.GenerateCode(null, Node.ExprNode());
	this.CurrentBuilder.Append(")");
}

function VisitGetNameNode(this: CGenerator, Node: ZGetNameNode): void {
	this.CurrentBuilder.Append(this.NameLocalVariable(Node.VarName, Node.VarIndex));
}

function VisitSetNameNode(this: CGenerator, Node: ZSetNameNode): void {
	this.CurrentBuilder.Append(this.NameLocalVariable(Node.VarName, Node.VarIndex));
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.ExprNode());
}

function VisitGetterNode(this: CGenerator, Node: ZGetterNode): void {
	this.GenerateSurroundCode(Node.RecvNode());
	this.CurrentBuilder.Append("->");
	this.CurrentBuilder.Append(Node.FieldName);
}

function VisitSetterNode(this: CGenerator, Node: ZSetterNode): void {
	this.GenerateSurroundCode(Node.RecvNode());
	this.CurrentBuilder.Append("->");
	this.CurrentBuilder.Append(Node.FieldName);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.ExprNode());
}

function VisitMethodCallNode(this: CGenerator, Node: ZMethodCallNode): void {
}

function VisitFuncCallNode(this: CGenerator, Node: ZFuncCallNode): void {
	this.GenerateCode(null, Node.FuncNameNode());
	this.VisitListNode("(", Node, ")");
}

function VisitThrowNode(this: CGenerator, Node: ZThrowNode): void {
	this.GenerateCode(null, Node.ExprNode());
	this.CurrentBuilder.Append("longjump(1)"); // FIXME
	this.CurrentBuilder.AppendWhiteSpace();
}

function VisitTryNode(this: CGenerator, Node: ZTryNode): void {
}

function ParamTypeName(this: CGenerator, Type: ZType): String {
	if(Type.IsArrayType()) {
		return "ArrayOf" + this.ParamTypeName(Type.GetParamType(0));
	}
	if(Type.IsMapType()) {
		return "MapOf" + this.ParamTypeName(Type.GetParamType(0));
	}
	if(Type.IsFuncType()) {
		var s: String = "FuncOf";
		var i: int = 0;
		while(i < Type.GetParamSize()) {
			s = s +  this.ParamTypeName(Type.GetParamType(i));
			i = i + 1;
		}
		return s + "_";
	}
	if(Type.IsIntType()) {
		return "Int";
	}
	if(Type.IsFloatType()) {
		return "Float";
	}
	if(Type.IsVoidType()) {
		return "Void";
	}
	if(Type.IsVarType()) {
		return "Var";
	}
	return Type.ShortName;
}

function GetCTypeName(this: CGenerator, Type: ZType): String {
	var TypeName: String = null;
	if(Type.IsArrayType() || Type.IsMapType()) {
		TypeName = this.ParamTypeName(Type) + " *";
	}
	if(Type instanceof ZClassType) {
		TypeName = "struct " + this.NameClass(Type) + " *";
	}
	if(TypeName == null) {
		TypeName = this.GetNativeTypeName(Type);
	}
	return TypeName;
}

function GenerateFuncTypeName(this: CGenerator, Type: ZType, FuncName: String): void {
	this.GenerateTypeName(Type.GetParamType(0));
	this.CurrentBuilder.Append(" (*" + FuncName + ")");
	var i: int = 1;
	this.CurrentBuilder.Append("(");
	while(i < Type.GetParamSize()) {
		if(i > 1) {
			this.CurrentBuilder.Append(",");
		}
		this.GenerateTypeName(Type.GetParamType(i));
		i = i + 1;
	}
	this.CurrentBuilder.Append(")");
}

function GenerateTypeName(this: CGenerator, Type: ZType): void {
	if(Type.IsFuncType()) {
		this.GenerateFuncTypeName(Type, "");
	}
	else {
		this.CurrentBuilder.Append(this.GetCTypeName(Type.GetRealType()));
	}
}

function VisitVarNode(this: CGenerator, Node: ZVarNode): void {
	this.GenerateTypeName(Node.DeclType);
	this.CurrentBuilder.Append(" ");
	this.CurrentBuilder.Append(this.NameLocalVariable(Node.NativeName, Node.VarIndex));
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.InitValueNode());
	this.CurrentBuilder.Append(this.SemiColon);
	this.VisitStmtList(Node);
}

function VisitParamNode(this: CGenerator, Node: ZParamNode): void {
	if(Node.Type.IsFuncType()) {
		this.GenerateFuncTypeName(Node.Type, this.NameLocalVariable(Node.Name, Node.ParamIndex));
	}
	else {
		this.GenerateTypeName(Node.Type);
		this.CurrentBuilder.Append(" ");
		this.CurrentBuilder.Append(this.NameLocalVariable(Node.Name, Node.ParamIndex));
	}
}

function GenerateExportFunction(this: CGenerator, Node: ZFunctionNode): void {
	this.CurrentBuilder.AppendNewLine();
	if(Node.FuncName.equals("main")) {
		this.CurrentBuilder.Append("int");
	}
	else {
		this.GenerateTypeName(Node.ReturnType);
	}
	this.CurrentBuilder.Append(" ", Node.FuncName);
	this.VisitListNode("(", Node, ")");
	this.CurrentBuilder.OpenIndent(" {");
	if(!Node.ReturnType.IsVoidType()) {
		this.CurrentBuilder.AppendNewLine("return ", Node.GetSignature(this));
	}
	else {
		this.CurrentBuilder.AppendNewLine(Node.GetSignature(this));
	}
	this.GenerateWrapperCall("(", Node, ")");
	this.CurrentBuilder.Append(this.SemiColon);
	if(Node.FuncName.equals("main")) {
		this.CurrentBuilder.AppendNewLine("return 0;");
	}
	this.CurrentBuilder.CloseIndent("}");
}

function VisitInstanceOfNode(this: CGenerator, Node: ZInstanceOfNode): void {
	this.CurrentBuilder.Append("LibZen_Is(");
	this.GenerateCode(null, Node.AST[ZInstanceOfNode_Left]);
	this.CurrentBuilder.Append(this.Camma);
	this.CurrentBuilder.AppendInt(Node.TargetType.TypeId);
	this.CurrentBuilder.Append(")");
}

function GenerateCField(this: CGenerator, CType: String, FieldName: String): void {
	this.CurrentBuilder.AppendNewLine(CType, " ");
	this.CurrentBuilder.Append(FieldName, this.SemiColon);
}

function GenerateField(this: CGenerator, DeclType: ZType, FieldName: String): void {
	this.CurrentBuilder.AppendNewLine();
	this.GenerateTypeName(DeclType);
	this.CurrentBuilder.Append(" ", FieldName, this.SemiColon);
}

function GenerateFields(this: CGenerator, ClassType: ZClassType, ThisType: ZType): void {
	var SuperType: ZType = ThisType.GetSuperType();
	if(!SuperType.IsVarType()) {
		this.GenerateFields(ClassType, SuperType);
	}
	var i: int = 0;
	this.GenerateCField("int", "_classId" + ThisType.TypeId);
	this.GenerateCField("int", "_delta" + ThisType.TypeId);
	while (i < ClassType.GetFieldSize()) {
		var ClassField: ZClassField = ClassType.GetFieldAt(i);
		if(ClassField.ClassType == ThisType) {
			this.GenerateField(ClassField.FieldType, ClassField.FieldName);
		}
		i = i + 1;
	}
}


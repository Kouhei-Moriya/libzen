function ImportGrammar(NameSpace: ZNameSpace): void;
class ZenGrammar {
}
class ZenPrecedence {
}
let ZenPrecedence_BinaryOperator: int = 1;
let ZenPrecedence_LeftJoin: int = 1 << 1;
let ZenPrecedence_PrecedenceShift: int = 3;
let ZenPrecedence_CStyleMUL: int = (100 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleADD: int = (200 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleSHIFT: int = (300 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleCOMPARE: int = (400 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_Instanceof: int = ZenPrecedence_CStyleCOMPARE;
let ZenPrecedence_CStyleEquals: int = (500 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleBITAND: int = (600 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleBITXOR: int = (700 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleBITOR: int = (800 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleAND: int = (900 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleOR: int = (1000 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleTRINARY: int = (1100 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;				/* ? : */
let ZenPrecedence_CStyleAssign: int = (1200 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
let ZenPrecedence_CStyleCOMMA: int = (1300 << ZenPrecedence_PrecedenceShift) | ZenPrecedence_BinaryOperator;
function ImportGrammar(NameSpace: ZNameSpace): void {
	NameSpace.SetTypeName(ZTypeVoidType,  null);
	NameSpace.SetTypeName(ZTypeBooleanType, null);
	NameSpace.SetTypeName(ZTypeIntType, null);
	NameSpace.SetTypeName(ZTypeFloatType, null);
	NameSpace.SetTypeName(ZTypeStringType, null);
	NameSpace.SetTypeName(ZGenericType_AlphaType, null);
	NameSpace.SetTypeName(ZGenericType_ArrayType, null);
	NameSpace.SetTypeName(ZGenericType_MapType, null);
	NameSpace.SetTypeName(ZFuncType_FuncType, null);
	NameSpace.AppendTokenFunc(" \t", WhiteSpaceToken);
	NameSpace.AppendTokenFunc("\n",  NewLineToken);
	NameSpace.AppendTokenFunc("{}()[]<>.,;?:+-*/%=&|!@~^$", OperatorToken);
	NameSpace.AppendTokenFunc("/", BlockComment);  // overloading
	NameSpace.AppendTokenFunc("Aa_", NameToken);
	NameSpace.AppendTokenFunc("\"", StringLiteralToken);
	NameSpace.AppendTokenFunc("1",  NumberLiteralToken);
	var MatchUnary: Func<ZNode,ZTokenContext,ZNode,ZNode>     = UnaryPattern;
	var MatchBinary: Func<ZNode,ZTokenContext,ZNode,ZNode>    = BinaryPattern;
	var MatchComparator: Func<ZNode,ZTokenContext,ZNode,ZNode>    = ComparatorPattern;
	NameSpace.DefineExpression("null", NullPattern);
	NameSpace.DefineExpression("true", TruePattern);
	NameSpace.DefineExpression("false", FalsePattern);
	NameSpace.DefineExpression("+", MatchUnary);
	NameSpace.DefineExpression("-", MatchUnary);
	NameSpace.DefineExpression("~", MatchUnary);
	NameSpace.DefineExpression("!", NotPattern);
	NameSpace.DefineRightExpression("* / %", ZenPrecedence_CStyleMUL, MatchBinary);
	NameSpace.DefineRightExpression("+ -", ZenPrecedence_CStyleADD, MatchBinary);
	NameSpace.DefineRightExpression("< <= > >=", ZenPrecedence_CStyleCOMPARE, MatchComparator);
	NameSpace.DefineRightExpression("== !=", ZenPrecedence_CStyleEquals, MatchComparator);
	NameSpace.DefineRightExpression("<< >>", ZenPrecedence_CStyleSHIFT, MatchBinary);
	NameSpace.DefineRightExpression("&", ZenPrecedence_CStyleBITAND, MatchBinary);
	NameSpace.DefineRightExpression("|", ZenPrecedence_CStyleBITOR, MatchBinary);
	NameSpace.DefineRightExpression("^", ZenPrecedence_CStyleBITXOR, MatchBinary);
	NameSpace.DefineRightExpression("&&", ZenPrecedence_CStyleAND, AndPattern);
	NameSpace.DefineRightExpression("||", ZenPrecedence_CStyleOR, OrPattern);
	NameSpace.DefineExpression("$Type$",TypePattern);
	NameSpace.DefineExpression("$TypeRight$", RightTypePattern);
	NameSpace.DefineExpression("$TypeAnnotation$", TypeAnnotationPattern);
	NameSpace.DefineExpression("$StringLiteral$", StringLiteralPattern);
	NameSpace.DefineExpression("$IntegerLiteral$", IntLiteralPattern);
	NameSpace.DefineExpression("$FloatLiteral$", FloatLiteralPattern);
	NameSpace.DefineRightExpression(".", 0, GetterPattern);
	NameSpace.DefineRightExpression(".", 0, SetterPattern);
	NameSpace.DefineRightExpression(".", 0, MethodCallPattern);
	NameSpace.DefineExpression("(", GroupPattern);
	NameSpace.DefineExpression("(", CastPattern);
	NameSpace.DefineRightExpression("(", 0, ApplyPattern);
	NameSpace.DefineRightExpression("[", 0, GetIndexPattern);
	NameSpace.DefineRightExpression("[", 0, SetIndexPattern);
	NameSpace.DefineExpression("[", ArrayLiteralPattern);
	NameSpace.DefineExpression("$MapEntry$", MapEntryPattern);
	NameSpace.DefineExpression("{", MapLiteralPattern);
	NameSpace.DefineExpression("new", NewObjectPattern);
	NameSpace.DefineStatement(";", StatementEndPattern);
	NameSpace.DefineExpression("$Block$", BlockPattern);
	NameSpace.DefineExpression("$Annotation$", AnnotationPattern);
	NameSpace.DefineExpression("$SymbolExpression$", SymbolExpressionPattern);
	NameSpace.DefineExpression("$SymbolStatement$", SymbolStatementPattern);
	NameSpace.DefineExpression("$Statement$", StatementPattern);
	NameSpace.DefineExpression("$Expression$", ExpressionPattern);
	NameSpace.DefineExpression("$RightExpression$", RightExpressionPattern);
	NameSpace.DefineStatement("if", IfPattern);
	NameSpace.DefineStatement("return", ReturnPattern);
	NameSpace.DefineStatement("while", WhilePattern);
	NameSpace.DefineStatement("break", BreakPattern);
	NameSpace.DefineExpression("$Name$", NamePattern);
	NameSpace.DefineStatement("var",  VarPattern);
	NameSpace.DefineExpression("$Param$", ParamPattern);
	NameSpace.DefineExpression("function", PrototypePattern);
	NameSpace.DefineExpression("function", FunctionPattern);
	NameSpace.DefineStatement("let", LetPattern);
	NameSpace.DefineStatement("export", ExportPattern);
	NameSpace.SetTypeName(ZClassType_ObjectType, null);
	NameSpace.DefineStatement("class", ClassPattern);
	NameSpace.DefineExpression("$FieldDecl$", FieldPattern);
	NameSpace.DefineRightExpression("instanceof", ZenPrecedence_Instanceof, InstanceOfPattern);
	NameSpace.DefineStatement("assert", AssertPattern);
	NameSpace.DefineStatement("asm", AsmMacroPattern);
	NameSpace.DefineStatement("asm", AsmPattern);
	NameSpace.DefineStatement("require", RequirePattern);
	NameSpace.Generator.LangInfo.AppendGrammarInfo("zen-0.1");
	NameSpace.DefineStatement("try", TryPattern);
	NameSpace.DefineStatement("throw", ThrowPattern);
	NameSpace.Generator.LangInfo.AppendGrammarInfo("zen-trycatch-0.1");
}

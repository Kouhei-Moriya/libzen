asm macro assert  "Control.Exception~return(assert ($[0]) $[1])": Func<boolean,String,void>;
asm macro print   "putStr $[0]" : Func<String,void>;
asm macro println "putStrLn $[0]" : Func<String,void>;

// converter
asm macro _ "(coerce $[0] 'float)" : Func<int,float>;
asm macro _ "(round $[0])" : Func<float,int>;
asm macro _ "(show $[0])" : Func<boolean,String>;
asm macro _ "(show $[0])" : Func<int,String>;
asm macro _ "(show $[0])" : Func<float,String>;

// String
asm macro + "($[0] ++ $[1])" : Func<String,String,String>;
asm macro size "(length $[0])" : Func<String,int>;
asm macro substring "(drop $[1] $[0])" : Func<String,int,String>;
asm macro substring "(take $[2] $ drop $[1] $[0])" : Func<String,int,int,String>;
asm macro equals "($[0] == $[1])" : Func<String,String,boolean>;
asm macro startsWith "(Data.List.isPrefixOf $[1] $[0])" : Func<String,String,boolean>;
asm macro endsWith "(Data.List.isSuffixOf $[1] $[0])" : Func<String,String,boolean>;

// Array
asm macro size "(length $[0])" : Func<Î±[],int>;

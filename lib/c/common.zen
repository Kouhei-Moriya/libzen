
asm macro assert  "assert.h~assert($[0])": Func<boolean,String,void>;
asm macro print   "stdio.h~puts($[0])" : Func<String,void>;
asm macro println "stdio.h~printf(\"%s\\\n\", $[0])" : Func<String,void>;

// converter
asm macro _ "(double)($[0])" : Func<int,float>;
asm macro _ "(long)($[0])" : Func<float,int>;
asm macro _ "(($[0])?\"true\":\"false\")" : Func<boolean,String>;
asm macro _ "libzen.h~zIntToStr($[0])" : Func<int,String>;
asm macro _ "libzen.h~zFloatToStr($[0])" : Func<float,String>;

// String
asm macro "+" "libzen.h~zStrCat($[0],$[1])" : Func<String,String,String>;
asm macro size "stdlib.h~strlen($[0])" : Func<String,int>;
asm macro substring "libzen.h~zStrSub($[0],$[1])" : Func<String,int,String>;
asm macro substring "libzen.h~zStrSub2($[0],$[1],$[2])" : Func<String,int,int,String>;
asm macro indexOf "libzen.h~zStrIndexOf($[0],$[1])" : Func<String,String,int>;
asm macro indexOf "libzen.h~zStrIndexOf2($[0],$[1],$[2])" : Func<String,int,String,int>;
asm macro equals "libzen.h~zEqualsString($[0],$[1])" : Func<String,String,boolean>;
asm macro startsWith "libzen.h~zStartWith($[0],$[1])" : Func<String,String,boolean>;
asm macro endsWith "libzen.h~zEndWith($[0],$[1])" : Func<String,String,boolean>;

// Array
//asm macro size "libzen.h~zArraySize($[0])" : Func<Array,int>;
//asm macro clear "libzen.h~zArrayClear($[0], $[1])" : Func<Array,int>;
//asm macro add "libzen.h~zArrayAdd($[0], $[1])" : Func<Array,int, _a>;
//asm macro add "libzen.h~zArrayInsert($[0], $[1], $[2])" : Func<Array,int>;


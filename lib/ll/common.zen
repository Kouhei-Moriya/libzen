
asm macro assert "call void (i1)* @ZStdLib_assert ($[0])" : Func<boolean,String,void>;
asm macro print "call void (%ZString*)* @ZString_print ($[0])" : Func<String,void>;
asm macro println "call void (%ZString*)* @ZString_println ($[0])" : Func<String,void>;

// converter
// asm macro _ "(double)($[0])" : Func<int,float>;
// asm macro _ "(long)($[0])" : Func<float,int>;
asm macro _ "call %ZString* (i1)* @ZString_boolean_toString ($[0])" : Func<boolean,String>;
asm macro toString "call %ZString* (i1)* @ZString_boolean_toString ($[0])" : Func<boolean,String>;
asm macro _ "call %ZString* (i64)* @ZString_int_toString ($[0])" : Func<int,String>;
asm macro toString "call %ZString* (i64)* @ZString_int_toString ($[0])": Func<int,String>;
asm macro _ "call %ZString* (double)* @ZString_float_toString ($[0])" : Func<float,String>;
asm macro toString "call %ZString* (double)* @ZString_float_toString ($[0])" : Func<float,String>;

// String
asm macro "+" "call %ZString* (%ZString*, %ZString*)* @ZString_StrCat ($[0], $[1])" : Func<String,String,String>;
asm macro size "call i64 (%ZString*)* @ZString_StrLen ($[0])" : Func<String,int>;
asm macro substring "call %ZString* (%ZString*, i64)* @ZString_SubString ($[0], $[1])" : Func<String,int,String>;
asm macro substring "call %ZString* (%ZString*, i64, i64)* @ZString_SubString_withEndIndex ($[0], $[1], $[2])" : Func<String,int,int,String>;
asm macro indexOf "call i64 (%ZString*, %ZString*)* @ZString_IndexOf ($[0], $[1])" : Func<String,String,int>;
asm macro indexOf "call i64 (%ZString*, i64, %ZString*)* @ZString_IndexOf_withIndex ($[0], $[1], $[2])" : Func<String,int,String,int>;
asm macro equals "call i1 (%ZString*, %ZString*)* @ZString_EqualString ($[0], $[1])" : Func<String,String,boolean>;
asm macro startsWith "call i1 (%ZString*, %ZString*)* @ZString_StartsWith ($[0], $[1])" : Func<String,String,boolean>;
asm macro endsWith "call i1 (%ZString*, %ZString*)* @ZString_EndsWith ($[0], $[1])" : Func<String,String,boolean>;

// Array
asm macro size "call i64 (%ZArray*)* @ZObjArray_Length ($[0])" : Func<α[],int>;
asm macro clear "call void (%ZArray*, i64)* @ZObjArray_Clear ($[0], $[1])" : Func<α[],int,void>;
asm macro add "call void (%ZArray*, i8*)* @ZObjArray_Add ($[0], $[1])" : Func<α[],α,void>;
asm macro add "call void (%ZArray*, i64, i8*)* @ZObjArray_Insert ($[0], $[1], $[2])" : Func<α[],int,α,void>;

asm macro size "call i64 (%ZArray*)* @ZIntArray_Length ($[0])" : Func<int[],int>;
asm macro clear "call void (%ZArray*, i64)* @ZIntArray_Clear ($[0], $[1])" : Func<int[],int,void>;
asm macro add "call void (%ZArray*, i64)* @ZIntArray_Add ($[0], $[1])" : Func<int[],int,void>;
asm macro add "call void (%ZArray*, i64, i64)* @ZIntArray_Insert ($[0], $[1], $[2])" : Func<int[],int,int,void>;

asm macro size "call i64 (%ZArray*)* @ZFloatArray_Length ($[0])" : Func<float[],int>;
asm macro clear "call void (%ZArray*, i64)* @ZFloatArray_Clear ($[0], $[1])" : Func<float[],int,void>;
asm macro add "call void (%ZArray*, double)* @ZFloatArray_Add ($[0], $[1])" : Func<float[],float,void>;
asm macro add "call void (%ZArray*, i64, double)* @ZFloatArray_Insert ($[0], $[1], $[2])" : Func<float[],int,float,void>;

asm macro size "call i64 (%ZArray*)* @ZBooleanArray_Length ($[0])" : Func<boolean[],int>;
asm macro clear "call void (%ZArray*, i64)* @ZBooleanArray_Clear ($[0], $[1])" : Func<boolean[],int,void>;
asm macro add "call void (%ZArray*, i1)* @ZBooleanArray_Add ($[0], $[1])" : Func<boolean[],boolean,void>;
asm macro add "call void (%ZArray*, i64, i1)* Z@BooleanArray_Insert ($[0], $[1], $[2])" : Func<boolean[],int,boolean,void>;


function ZClassField(this: ZClassField, ClassType: ZClassType, FieldName: String, FieldType: ZType, SourceToken: ZToken): ZClassField;
function ZFunc(this: ZFunc, FuncFlag: int, FuncName: String, FuncType: ZFuncType): ZFunc;
function GetFuncType(this: ZFunc): ZFuncType;
function toString(this: ZFunc): String;
function Used(this: ZFunc): void;
function Defined(this: ZFunc): void;
function IsConverterFunc(this: ZFunc): boolean;
function IsCoercionFunc(this: ZFunc): boolean;
function Is(this: ZFunc, Flag: int): boolean;
function ZFunc_StringfySignature(FuncName: String, FuncParamSize: int, RecvType: ZType): String;
function GetSignature(this: ZFunc): String;
function ZPrototype(this: ZPrototype, FuncFlag: int, FuncName: String, FuncType: ZFuncType, SourceToken: ZToken): ZPrototype;
function Used(this: ZPrototype): void;
function Defined(this: ZPrototype): void;
function ZType(this: ZType, TypeFlag: int, ShortName: String, RefType: ZType): ZType;
function GetRealType(this: ZType): ZType;
function GetSuperType(this: ZType): ZType;
function GetBaseType(this: ZType): ZType;
function GetParamSize(this: ZType): int;
function GetParamType(this: ZType, Index: int): ZType;
function Equals(this: ZType, Type: ZType): boolean;
function Accept(this: ZType, Type: ZType): boolean;
function IsGreekType(this: ZType): boolean;
function GetRealType(this: ZType, Greek: ZType[]): ZType;
function AcceptValueType(this: ZType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean;
function IsVoidType(this: ZType): boolean;
function IsVarType(this: ZType): boolean;
function IsInferrableType(this: ZType): boolean;
function IsTypeType(this: ZType): boolean;
function IsBooleanType(this: ZType): boolean;
function IsIntType(this: ZType): boolean;
function IsFloatType(this: ZType): boolean;
function IsNumberType(this: ZType): boolean;
function IsStringType(this: ZType): boolean;
function IsArrayType(this: ZType): boolean;
function IsMapType(this: ZType): boolean;
function IsOpenType(this: ZType): boolean;
function IsImmutableType(this: ZType): boolean;
function IsNullableType(this: ZType): boolean;
function toString(this: ZType): String;
function GetAsciiName(this: ZType): String;
function StringfyClassMember(this: ZType, Name: String): String;
function GetUniqueName(this: ZType): String;
function IsFuncType(this: ZType): boolean;
function StringfySignature(this: ZType, FuncName: String): String;
function Maybe(this: ZType, T: ZType, SourceToken: ZToken): void;
function ZTypePool_NewTypeId(T: ZType): int;
function TypeOf(TypeId: int): ZType;
function GetGreekType(GreekId: int): ZType;
function ZTypePool_MangleType2(Type1: ZType, Type2: ZType): String;
function ZTypePool_MangleTypes(TypeList: ZType[]): String;
function ZTypePool_UniqueTypes(TypeList: ZType[]): ZType[];
function ZTypePool_GetGenericType1(BaseType: ZType, ParamType: ZType): ZType;
function ZTypePool_GetGenericType(BaseType: ZType, TypeList: ZType[], IsCreation: boolean): ZType;
function ZTypePool_LookupFuncType(TypeList: ZType[]): ZFuncType;
function ZTypePool_LookupFuncType(R: ZType, P1: ZType): ZFuncType;
function ZTypePool_LookupFuncType(R: ZType, P1: ZType, P2: ZType): ZFuncType;
function ZUnionType(this: ZUnionType): ZUnionType;
function ZVarScope(this: ZVarScope, Parent: ZVarScope, Logger: ZLogger, VarList: ZVarType[]): ZVarScope;
function NewVarType(this: ZVarScope, VarType: ZType, Name: String, SourceToken: ZToken): ZType;
function FoundUnresolvedSymbol(this: ZVarScope, FuncName: String): void;
function CheckVarNode(this: ZVarScope, ContextType: ZType, Node: ZNode): void;
function TypeCheckStmtList(this: ZVarScope, TypeSafer: ZTypeChecker, StmtList: ZNode[]): boolean;
function TypeCheckFuncBlock(this: ZVarScope, TypeSafer: ZTypeChecker, FunctionNode: ZFunctionNode): void;
function ZVarType(this: ZVarType, VarList: ZVarType[], Name: String, SourceToken: ZToken): ZVarType;
function GetRealType(this: ZVarType): ZType;
function GetParamSize(this: ZVarType): int;
function GetParamType(this: ZVarType, Index: int): ZType;
function IsFuncType(this: ZVarType): boolean;
function IsVarType(this: ZVarType): boolean;
function toString(this: ZVarType): String;
function Infer(this: ZVarType, ContextType: ZType, SourceToken: ZToken): void;
function Maybe(this: ZVarType, T: ZType, SourceToken: ZToken): void;
function ZNode(this: ZNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZNode;
function SetChild(this: ZNode, Node: ZNode): ZNode;
function SetNameInfo(this: ZNode, NameToken: ZToken, Name: String): void;
function SetTypeInfo(this: ZNode, TypeToken: ZToken, Type: ZType): void;
function Set(this: ZNode, Index: int, Node: ZNode): void;
function GetAstSize(this: ZNode): int;
function HasAst(this: ZNode, Index: int): boolean;
function GetAstType(this: ZNode, Index: int): ZType;
function GetSourceLocation(this: ZNode): String;
function toString(this: ZNode): String;
function GetScopeBlockNode(this: ZNode): ZBlockNode;
function GetNameSpace(this: ZNode): ZNameSpace;
function IsErrorNode(this: ZNode): boolean;
function IsBreakingBlock(this: ZNode): boolean;
function DeSugar(this: ZNode, Generator: ZGenerator): ZSugarNode;
function Accept(this: ZNode, Visitor: ZVisitor): void;
function IsUntyped(this: ZNode): boolean;
function HasUntypedNode(this: ZNode): boolean;
function VisitTypeChecker(this: ZNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode;
function ToReturnNode(this: ZNode): ZReturnNode;
function ZParamNode(this: ZParamNode, ParentNode: ZNode): ZParamNode;
function SetNameInfo(this: ZParamNode, NameToken: ZToken, Name: String): void;
function ZReturnNode(this: ZReturnNode, ParentNode: ZNode): ZReturnNode;
function Accept(this: ZReturnNode, Visitor: ZVisitor): void;
function ToReturnNode(this: ZReturnNode): ZReturnNode;
function ZSetIndexNode(this: ZSetIndexNode, ParentNode: ZNode, LeftNode: ZNode): ZSetIndexNode;
function Accept(this: ZSetIndexNode, Visitor: ZVisitor): void;
function ZSetNameNode(this: ZSetNameNode, ParentNode: ZNode, Token: ZToken, VarName: String): ZSetNameNode;
function Accept(this: ZSetNameNode, Visitor: ZVisitor): void;
function ZSetterNode(this: ZSetterNode, ParentNode: ZNode, RecvNode: ZNode): ZSetterNode;
function SetNameInfo(this: ZSetterNode, NameToken: ZToken, Name: String): void;
function Accept(this: ZSetterNode, Visitor: ZVisitor): void;
function IsStaticField(this: ZSetterNode): boolean;
function ZSugarNode(this: ZSugarNode, SugarNode: ZNode, DeSugarNode: ZNode): ZSugarNode;
function Accept(this: ZSugarNode, Visitor: ZVisitor): void;
function ZThrowNode(this: ZThrowNode, ParentNode: ZNode): ZThrowNode;
function Accept(this: ZThrowNode, Visitor: ZVisitor): void;
function ZTryNode(this: ZTryNode, ParentNode: ZNode): ZTryNode;
function Accept(this: ZTryNode, Visitor: ZVisitor): void;
function ZUnaryNode(this: ZUnaryNode, ParentNode: ZNode, Token: ZToken): ZUnaryNode;
function Accept(this: ZUnaryNode, Visitor: ZVisitor): void;
function ZWhileNode(this: ZWhileNode, ParentNode: ZNode): ZWhileNode;
function Accept(this: ZWhileNode, Visitor: ZVisitor): void;
function toString(this: ZEmptyValue): String;
function Report(this: ZLogger, Message: String): void;
function ZLogger_LogError(Token: ZToken, Message: String): String;
function ZLogger_LogWarning(Token: ZToken, Message: String): void;
function ZLogger_LogInfo(Token: ZToken, Message: String): void;
function ZLogger_LogDebug(Token: ZToken, Message: String): void;
function GetReportedErrors(this: ZLogger): String[];
function ShowErrors(this: ZLogger): void;
function ZMacroFunc(this: ZMacroFunc, FuncName: String, FuncType: ZFuncType): ZMacroFunc;
function ZNameSpace(this: ZNameSpace, Generator: ZGenerator, ParentNameSpace: ZNameSpace): ZNameSpace;
function toString(this: ZNameSpace): String;
function CreateSubNameSpace(this: ZNameSpace): ZNameSpace;
function GetRootNameSpace(this: ZNameSpace): ZNameSpace;
function GetTokenFunc(this: ZNameSpace, ZenChar: int): ZTokenFunc;
function JoinParentFunc(this: ZNameSpace, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc;
function AppendTokenFunc(this: ZNameSpace, keys: String, TokenFunc: ZTokenFunction): void;
function GetSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax;
function SetSyntaxPattern(this: ZNameSpace, PatternName: String, Syntax: ZSyntax): void;
function RightPatternSymbol(PatternName: String): String;
function GetRightSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax;
function AppendSyntaxPattern(this: ZNameSpace, PatternName: String, NewPattern: ZSyntax): void;
function DefineStatement(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void;
function DefineExpression(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void;
function DefineRightExpression(this: ZNameSpace, PatternName: String, SyntaxFlag: int, MatchFunc: ZMatchFunction): void;
function GetSymbol(this: ZNameSpace, Symbol: String): ZSymbolEntry;
function GetSymbolNode(this: ZNameSpace, Symbol: String): ZNode;
function SetLocalSymbolEntry(this: ZNameSpace, Symbol: String, Entry: ZSymbolEntry): void;
function SetLocalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry;
function SetGlobalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry;
function GetLocalVariable(this: ZNameSpace, VarName: String): ZVariable;
function SetLocalVariable(this: ZNameSpace, FunctionNode: ZFunctionNode, VarType: ZType, VarName: String, SourceToken: ZToken): void;
function SetTypeName(this: ZNameSpace, Name: String, Type: ZType, SourceToken: ZToken): void;
function SetTypeName(this: ZNameSpace, Type: ZType, SourceToken: ZToken): void;
function GetTypeNode(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZTypeNode;
function GetType(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZType;
function ZSource(this: ZSource, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSource;
function GetLineNumber(this: ZSource, Position: int): int;
function GetLineHeadPosition(this: ZSource, Position: int): int;
function CountIndentSize(this: ZSource, Position: int): int;
function GetLineText(this: ZSource, Position: int): String;
function GetLineMarker(this: ZSource, Position: int): String;
function FormatErrorHeader(this: ZSource, Error: String, Position: int, Message: String): String;
function FormatErrorMarker(this: ZSource, Error: String, Position: int, Message: String): String;
function GetCharAt(this: ZSource, n: int): String;
function ZSourceBuilder(this: ZSourceBuilder, Template: ZSourceGenerator, Parent: ZSourceBuilder): ZSourceBuilder;
function Pop(this: ZSourceBuilder): ZSourceBuilder;
function Clear(this: ZSourceBuilder): void;
function GetPosition(this: ZSourceBuilder): int;
function CopyString(this: ZSourceBuilder, BeginIndex: int, EndIndex: int): String;
function Append(this: ZSourceBuilder, Text: String): void;
function AppendInt(this: ZSourceBuilder, Value: int): void;
function AppendLineFeed(this: ZSourceBuilder): void;
function AppendLineFeed(this: ZSourceBuilder, AppendIndent: boolean): void;
function AppendWhiteSpace(this: ZSourceBuilder): void;
function AppendToken(this: ZSourceBuilder, Text: String): void;
function AppendBlockComment(this: ZSourceBuilder, Text: String): void;
function AppendCommentLine(this: ZSourceBuilder, Text: String): void;
function Indent(this: ZSourceBuilder): void;
function UnIndent(this: ZSourceBuilder): void;
function GetIndentString(this: ZSourceBuilder): String;
function AppendIndent(this: ZSourceBuilder): void;
function AppendLineFeedIndent(this: ZSourceBuilder): void;
function IndentAndAppend(this: ZSourceBuilder, Text: String): void;
function AppendParamList(this: ZSourceBuilder, ParamList: ZListNode, BeginIdx: int, EndIdx: int): void;
function toString(this: ZSourceBuilder): String;
function AppendLine(this: ZSourceBuilder, Text: String): void;
function ZSourceContext(this: ZSourceContext, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSourceContext;
function GetCharCode(this: ZSourceContext): int;
function GetPosition(this: ZSourceContext): int;
function HasChar(this: ZSourceContext): boolean;
function ParseChar(this: ZSourceContext): String;
function ParseChar(this: ZSourceContext, n: int): String;
function MoveNext(this: ZSourceContext): void;
function SkipWhiteSpace(this: ZSourceContext): void;
function FoundIndent(this: ZSourceContext, StartIndex: int, EndIndex: int): void;
function Tokenize(this: ZSourceContext, StartIndex: int, EndIndex: int): void;
function Tokenize(this: ZSourceContext, PatternName: String, StartIndex: int, EndIndex: int): void;
function IsDefinedSyntax(this: ZSourceContext, StartIndex: int, EndIndex: int): boolean;
function TokenizeDefinedSymbol(this: ZSourceContext, StartIndex: int): void;
function ApplyTokenFunc(this: ZSourceContext, TokenFunc: ZTokenFunc): void;
function DoTokenize(this: ZSourceContext): boolean;
function LogWarning(this: ZSourceContext, Position: int, Message: String): void;
function ZSourceMacro(this: ZSourceMacro, FuncName: String, FuncType: ZFuncType, Macro: String): ZSourceMacro;
function ZSymbolEntry(this: ZSymbolEntry, Parent: ZSymbolEntry, Node: ZNode): ZSymbolEntry;
function ZSyntax(this: ZSyntax, NameSpace: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): ZSyntax;
function toString(this: ZSyntax): String;
function IsBinaryOperator(this: ZSyntax): boolean;
function IsRightJoin(this: ZSyntax, Right: ZSyntax): boolean;
function EqualsName(this: ZSyntax, Name: String): boolean;
function MergeSyntaxPattern(Pattern: ZSyntax, Parent: ZSyntax): ZSyntax;
function ZToken(this: ZToken, Source: ZSource, StartIndex: int, EndIndex: int): ZToken;
function GetFileName(this: ZToken): String;
function GetLineNumber(this: ZToken): int;
function GetChar(this: ZToken): String;
function GetText(this: ZToken): String;
function toString(this: ZToken): String;
function EqualsText(this: ZToken, Text: String): boolean;
function StartsWith(this: ZToken, Text: String): boolean;
function IsNull(this: ZToken): boolean;
function IsIndent(this: ZToken): boolean;
function IsNextWhiteSpace(this: ZToken): boolean;
function IsNameSymbol(this: ZToken): boolean;
function GetIndentSize(this: ZToken): int;
function ZTokenContext(this: ZTokenContext, Generator: ZGenerator, NameSpace: ZNameSpace, FileName: String, LineNumber: int, SourceText: String): ZTokenContext;
function SetParseFlag(this: ZTokenContext, AllowSkipIndent: boolean): boolean;
function GetBeforeToken(this: ZTokenContext): ZToken;
function CreateExpectedErrorNode(this: ZTokenContext, SourceToken: ZToken, ExpectedTokenText: String): ZNode;
function Vacume(this: ZTokenContext): void;
function MoveNext(this: ZTokenContext): void;
function GetToken(this: ZTokenContext, EnforceMoveNext: boolean): ZToken;
function GetToken(this: ZTokenContext): ZToken;
function HasNext(this: ZTokenContext): boolean;
function SkipIndent(this: ZTokenContext): void;
function SkipError(this: ZTokenContext, ErrorToken: ZToken): void;
function IsToken(this: ZTokenContext, TokenText: String): boolean;
function IsNewLineToken(this: ZTokenContext, TokenText: String): boolean;
function MatchToken(this: ZTokenContext, TokenText: String): boolean;
function MatchNewLineToken(this: ZTokenContext, TokenText: String): boolean;
function ParseLargeToken(this: ZTokenContext): ZToken;
function MatchToken(this: ZTokenContext, ParentNode: ZNode, TokenText: String, IsRequired: boolean): ZNode;
function GetApplyingSyntax(this: ZTokenContext): ZSyntax;
function ApplyMatchPattern(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, Pattern: ZSyntax, IsRequired: boolean): ZNode;
function ParsePatternAfter(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, PatternName: String, IsRequired: boolean): ZNode;
function ParsePattern(this: ZTokenContext, ParentNode: ZNode, PatternName: String, IsRequired: boolean): ZNode;
function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean, AllowSkipIndent: boolean): ZNode;
function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean): ZNode;
function MatchOptionaPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, AllowNewLine: boolean, TokenText: String, PatternName: String): ZNode;
function MatchNtimes(this: ZTokenContext, ParentNode: ZNode, StartToken: String, PatternName: String, DelimToken: String, StopToken: String): ZNode;
function StartsWithToken(this: ZTokenContext, TokenText: String): boolean;
function SkipEmptyStatement(this: ZTokenContext): void;
function Dump(this: ZTokenContext): void;
function ZTokenFunc(this: ZTokenFunc, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc;
function toString(this: ZTokenFunc): String;
function ZVariable(this: ZVariable, Parent: ZSymbolEntry, FuncNode: ZFunctionNode, VarFlag: int, VarType: ZType, VarName: String, SourceToken: ZToken): ZVariable;
function IsCaptured(this: ZVariable, CurrentFunctionNode: ZFunctionNode): boolean;
function Defined(this: ZVariable): void;
function Used(this: ZVariable): void;
function ZClassType(this: ZClassType, ShortName: String, RefType: ZType): ZClassType;
function ResetSuperType(this: ZClassType, SuperClass: ZClassType): void;
function GetFieldSize(this: ZClassType): int;
function GetFieldAt(this: ZClassType, Index: int): ZClassField;
function HasField(this: ZClassType, FieldName: String): boolean;
function GetFieldType(this: ZClassType, FieldName: String, DefaultType: ZType): ZType;
function AppendField(this: ZClassType, FieldType: ZType, FieldName: String, SourceToken: ZToken): ZClassField;
function ZFuncType(this: ZFuncType, ShortName: String, UniqueTypeParams: ZType[]): ZFuncType;
function IsFuncType(this: ZFuncType): boolean;
function IsVarType(this: ZFuncType): boolean;
function IsGreekType(this: ZFuncType): boolean;
function GetRealType(this: ZFuncType, Greek: ZType[]): ZType;
function AcceptValueType(this: ZFuncType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean;
function StringfySignature(this: ZFuncType, FuncName: String): String;
function GetBaseType(this: ZFuncType): ZType;
function GetParamSize(this: ZFuncType): int;
function GetParamType(this: ZFuncType, Index: int): ZType;
function GetReturnType(this: ZFuncType): ZType;
function GetFuncParamSize(this: ZFuncType): int;
function GetRecvType(this: ZFuncType): ZType;
function GetFuncParamType(this: ZFuncType, Index: int): ZType;
function NewMethodFuncType(this: ZFuncType, RecvType: ZType): ZFuncType;
function AcceptAsFieldFunc(this: ZFuncType, FuncType: ZFuncType): boolean;
function ZGeneric1Type(this: ZGeneric1Type, TypeFlag: int, ShortName: String, BaseType: ZType, ParamType: ZType): ZGeneric1Type;
function GetSuperType(this: ZGeneric1Type): ZType;
function GetBaseType(this: ZGeneric1Type): ZType;
function GetParamSize(this: ZGeneric1Type): int;
function GetParamType(this: ZGeneric1Type, Index: int): ZType;
function IsGreekType(this: ZGeneric1Type): boolean;
function GetRealType(this: ZGeneric1Type, Greek: ZType[]): ZType;
function AcceptValueType(this: ZGeneric1Type, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean;
function ZGreekType(this: ZGreekType, GreekId: int): ZGreekType;
function NewGreekTypes(GreekTypes: ZType[]): ZType[];
function IsGreekType(this: ZGreekType): boolean;
function GetRealType(this: ZGreekType, Greek: ZType[]): ZType;
function AcceptValueType(this: ZGreekType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean;
function println(this: ZTypeChecker, string: String): void;
function FIXME(this: ZTypeChecker, string: String): void;
function ZTypeChecker(this: ZTypeChecker, Generator: ZGenerator): ZTypeChecker;
function EnableVisitor(this: ZTypeChecker): void;
function StopVisitor(this: ZTypeChecker): void;
function IsVisitable(this: ZTypeChecker): boolean;
function GetContextType(this: ZTypeChecker): ZType;
function VisitTypeChecker(this: ZTypeChecker, Node: ZNode, ContextType: ZType): ZNode;
function CreateStupidCast(this: ZTypeChecker, Requested: ZType, Node: ZNode): ZNode;
function EnforceNodeType(this: ZTypeChecker, Node: ZNode, EnforceType: ZType): ZNode;
function TypeCheckImpl(this: ZTypeChecker, Node: ZNode, ContextType: ZType, TypeCheckPolicy: int): ZNode;
function VisitTypeChecker(this: ZTypeChecker, Node: ZNode, ContextType: ZType, TypeCheckPolicy: int): ZNode;
function TryType(this: ZTypeChecker, Node: ZNode, ContextType: ZType): ZNode;
function TryTypeAt(this: ZTypeChecker, Node: ZNode, Index: int, ContextType: ZType): void;
function CheckType(this: ZTypeChecker, Node: ZNode, ContextType: ZType): ZNode;
function CheckTypeAt(this: ZTypeChecker, Node: ZNode, Index: int, ContextType: ZType): void;
function TypeCheckNodeList(this: ZTypeChecker, List: ZListNode): boolean;
function Return(this: ZTypeChecker, Node: ZNode): void;
function TypedNode(this: ZTypeChecker, Node: ZNode, Type: ZType): void;
function ReturnErrorNode(this: ZTypeChecker, Node: ZNode, ErrorToken: ZToken, Message: String): void;
function Todo(this: ZTypeChecker, Node: ZNode): void;
function VisitErrorNode(this: ZTypeChecker, Node: ZErrorNode): void;
function VisitExtendedNode(this: ZTypeChecker, Node: ZNode): void;
function VisitSugarNode(this: ZTypeChecker, Node: ZSugarNode): void;
function ZAnnotationNode(this: ZAnnotationNode, ParentNode: ZNode, Token: ZToken, Anno: Map<any>): ZAnnotationNode;
function IsBreakingBlock(this: ZAnnotationNode): boolean;
function Accept(this: ZAnnotationNode, Visitor: ZVisitor): void;
function ZAssertNode(this: ZAssertNode, ParentNode: ZNode): ZAssertNode;
function DeSugar(this: ZAssertNode, Generator: ZGenerator): ZSugarNode;
function ZBinaryNode(this: ZBinaryNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZBinaryNode;
function IsRightJoin(this: ZBinaryNode, Node: ZNode): boolean;
function RightJoin(this: ZBinaryNode, ParentNode: ZNode, RightNode: ZBinaryNode): ZNode;
function AppendParsedRightNode(this: ZBinaryNode, ParentNode: ZNode, TokenContext: ZTokenContext): ZNode;
function TryMacroNode(this: ZBinaryNode, Generator: ZGenerator): ZNode;
function Accept(this: ZBinaryNode, Visitor: ZVisitor): void;
function ZBreakNode(this: ZBreakNode, ParentNode: ZNode): ZBreakNode;
function Accept(this: ZBreakNode, Visitor: ZVisitor): void;
function ZCastNode(this: ZCastNode, ParentNode: ZNode, CastType: ZType, Node: ZNode): ZCastNode;
function Accept(this: ZCastNode, Visitor: ZVisitor): void;
function ToFuncCallNode(this: ZCastNode, Func: ZFunc): ZListNode;
function ZCatchNode(this: ZCatchNode, ParentNode: ZNode): ZCatchNode;
function SetTypeInfo(this: ZCatchNode, TypeToken: ZToken, Type: ZType): void;
function SetNameInfo(this: ZCatchNode, NameToken: ZToken, Name: String): void;
function ZComparatorNode(this: ZComparatorNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZComparatorNode;
function Accept(this: ZComparatorNode, Visitor: ZVisitor): void;
function ZConstNode(this: ZConstNode, ParentNode: ZNode, SourceToken: ZToken): ZConstNode;
function ZEmptyNode(this: ZEmptyNode, ParentNode: ZNode, Token: ZToken): ZEmptyNode;
function ZErrorNode(this: ZErrorNode, ParentNode: ZNode, SourceToken: ZToken, ErrorMessage: String): ZErrorNode;
function ZErrorNode(this: ZErrorNode, Node: ZNode, ErrorMessage: String): ZErrorNode;
function Accept(this: ZErrorNode, Visitor: ZVisitor): void;
function toString(this: ZErrorNode): String;
function ZFieldNode(this: ZFieldNode, ParentNode: ZNode): ZFieldNode;
function SetTypeInfo(this: ZFieldNode, TypeToken: ZToken, Type: ZType): void;
function SetNameInfo(this: ZFieldNode, NameToken: ZToken, Name: String): void;
function ZFloatNode(this: ZFloatNode, ParentNode: ZNode, Token: ZToken, Value: float): ZFloatNode;
function Accept(this: ZFloatNode, Visitor: ZVisitor): void;
function ZGetIndexNode(this: ZGetIndexNode, ParentNode: ZNode, RecvNode: ZNode): ZGetIndexNode;
function Accept(this: ZGetIndexNode, Visitor: ZVisitor): void;
function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, Token: ZToken, NativeName: String): ZGetNameNode;
function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, ResolvedFunc: ZFunc): ZGetNameNode;
function Accept(this: ZGetNameNode, Visitor: ZVisitor): void;
function ToGlobalNameNode(this: ZGetNameNode): ZNode;
function ZGetterNode(this: ZGetterNode, ParentNode: ZNode, RecvNode: ZNode): ZGetterNode;
function SetNameInfo(this: ZGetterNode, NameToken: ZToken, Name: String): void;
function Accept(this: ZGetterNode, Visitor: ZVisitor): void;
function IsStaticField(this: ZGetterNode): boolean;
function ZGlobalNameNode(this: ZGlobalNameNode, ParentNode: ZNode, SourceToken: ZToken, Type: ZType, GlobalName: String, IsStaticFuncName: boolean): ZGlobalNameNode;
function IsGivenName(this: ZGlobalNameNode): boolean;
function Accept(this: ZGlobalNameNode, Visitor: ZVisitor): void;
function ZGroupNode(this: ZGroupNode, ParentNode: ZNode): ZGroupNode;
function Accept(this: ZGroupNode, Visitor: ZVisitor): void;
function ZIfNode(this: ZIfNode, ParentNode: ZNode): ZIfNode;
function Accept(this: ZIfNode, Visitor: ZVisitor): void;
function ZImportNode(this: ZImportNode, ParentNode: ZNode): ZImportNode;
function SetNameInfo(this: ZImportNode, NameToken: ZToken, Name: String): void;
function ZInstanceOfNode(this: ZInstanceOfNode, ParentNode: ZNode, Token: ZToken, LeftNode: ZNode): ZInstanceOfNode;
function SetTypeInfo(this: ZInstanceOfNode, TypeToken: ZToken, Type: ZType): void;
function Accept(this: ZInstanceOfNode, Visitor: ZVisitor): void;
function ZIntNode(this: ZIntNode, ParentNode: ZNode, Token: ZToken, Value: int): ZIntNode;
function Accept(this: ZIntNode, Visitor: ZVisitor): void;
function ZLetNode(this: ZLetNode, ParentNode: ZNode): ZLetNode;
function SetNameInfo(this: ZLetNode, NameToken: ZToken, Name: String): void;
function SetTypeInfo(this: ZLetNode, TypeToken: ZToken, Type: ZType): void;
function Accept(this: ZLetNode, Visitor: ZVisitor): void;
function ToGlobalNameNode(this: ZLetNode): ZGlobalNameNode;
function ZListNode(this: ZListNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZListNode;
function Append(this: ZListNode, Node: ZNode): void;
function GetListSize(this: ZListNode): int;
function GetListAt(this: ZListNode, Index: int): ZNode;
function SetListAt(this: ZListNode, Index: int, Node: ZNode): void;
function InsertListAt(this: ZListNode, Index: int, Node: ZNode): void;
function RemoveListAt(this: ZListNode, Index: int): ZNode;
function ClearListAfter(this: ZListNode, Size: int): void;
function ZMacroNode(this: ZMacroNode, ParentNode: ZNode, SourceToken: ZToken, MacroFunc: ZMacroFunc): ZMacroNode;
function GetFuncType(this: ZMacroNode): ZFuncType;
function GetMacroText(this: ZMacroNode): String;
function Accept(this: ZMacroNode, Visitor: ZVisitor): void;
function ZMapEntryNode(this: ZMapEntryNode, ParentNode: ZNode): ZMapEntryNode;
function ZMapLiteralNode(this: ZMapLiteralNode, ParentNode: ZNode): ZMapLiteralNode;
function GetMapEntryNode(this: ZMapLiteralNode, Index: int): ZMapEntryNode;
function Accept(this: ZMapLiteralNode, Visitor: ZVisitor): void;
function ZMethodCallNode(this: ZMethodCallNode, ParentNode: ZNode, RecvNode: ZNode): ZMethodCallNode;
function SetNameInfo(this: ZMethodCallNode, NameToken: ZToken, Name: String): void;
function Accept(this: ZMethodCallNode, Visitor: ZVisitor): void;
function ToGetterFuncCall(this: ZMethodCallNode): ZFuncCallNode;
function ToFuncCallNode(this: ZMethodCallNode, Func: ZFunc): ZListNode;
function ZNewArrayNode(this: ZNewArrayNode, ParentNode: ZNode, Type: ZType, Token: ZToken): ZNewArrayNode;
function ZNewObjectNode(this: ZNewanyNode, ParentNode: ZNode): ZNewanyNode;
function Accept(this: ZNewanyNode, Visitor: ZVisitor): void;
function ToFuncCallNode(this: ZNewanyNode, Func: ZFunc): ZListNode;
function ZNotNode(this: ZNotNode, ParentNode: ZNode, Token: ZToken): ZNotNode;
function Accept(this: ZNotNode, Visitor: ZVisitor): void;
function ZNullNode(this: ZNullNode, ParentNode: ZNode, SourceToken: ZToken): ZNullNode;
function Accept(this: ZNullNode, Visitor: ZVisitor): void;
function ZOrNode(this: ZOrNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZOrNode;
function Accept(this: ZOrNode, Visitor: ZVisitor): void;
function ZPrototypeNode(this: ZPrototypeNode, ParentNode: ZNode): ZPrototypeNode;
function SetTypeInfo(this: ZPrototypeNode, TypeToken: ZToken, Type: ZType): void;
function SetNameInfo(this: ZPrototypeNode, NameToken: ZToken, Name: String): void;
function GetParamNode(this: ZPrototypeNode, Index: int): ZParamNode;
function GetFuncType(this: ZPrototypeNode): ZFuncType;
function ZStringNode(this: ZStringNode, ParentNode: ZNode, Token: ZToken, Value: String): ZStringNode;
function Accept(this: ZStringNode, Visitor: ZVisitor): void;
function ZTypeNode(this: ZTypeNode, ParentNode: ZNode, SourceToken: ZToken, ParsedType: ZType): ZTypeNode;
function ZGenerator(this: ZGenerator, LanguageExtension: String, TargetVersion: String): ZGenerator;
function ImportLocalGrammar(this: ZGenerator, NameSpace: ZNameSpace): void;
function WriteTo(this: ZGenerator, FileName: String): void;
function NameOutputFile(this: ZGenerator, FileName: String): String;
function EnableVisitor(this: ZGenerator): void;
function StopVisitor(this: ZGenerator): void;
function IsVisitable(this: ZGenerator): boolean;
function GetGrammarInfo(this: ZGenerator): String;
function AppendGrammarInfo(this: ZGenerator, GrammarInfo: String): void;
function GetTargetLangInfo(this: ZGenerator): String;
function GetFieldType(this: ZGenerator, BaseType: ZType, Name: String): ZType;
function GetSetterType(this: ZGenerator, BaseType: ZType, Name: String): ZType;
function GetConstructorFuncType(this: ZGenerator, ClassType: ZType, List: ZListNode): ZFuncType;
function GetMethodFuncType(this: ZGenerator, RecvType: ZType, MethodName: String, List: ZListNode): ZFuncType;
function GetUniqueNumber(this: ZGenerator): int;
function NameGlobalSymbol(this: ZGenerator, Symbol: String): String;
function NameClass(this: ZGenerator, ClassType: ZType): String;
function SetDefinedFunc(this: ZGenerator, Func: ZFunc): void;
function SetPrototype(this: ZGenerator, Node: ZNode, FuncName: String, FuncType: ZFuncType): boolean;
function GetDefinedFunc(this: ZGenerator, GlobalName: String): ZFunc;
function GetDefinedFunc(this: ZGenerator, FuncName: String, FuncType: ZFuncType): ZFunc;
function GetDefinedFunc(this: ZGenerator, FuncName: String, RecvType: ZType, FuncParamSize: int): ZFunc;
function GetMacroFunc(this: ZGenerator, FuncName: String, RecvType: ZType, FuncParamSize: int): ZMacroFunc;
function NameConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): String;
function SetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType, Func: ZFunc): void;
function GetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc;
function GetCoercionFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc;
function VisitExtendedNode(this: ZGenerator, Node: ZNode): void;
function VisitSugarNode(this: ZGenerator, Node: ZSugarNode): void;
function ZIndentToken(this: ZIndentToken, Source: ZSource, StartIndex: int, EndIndex: int): ZIndentToken;
function ZPatternToken(this: ZPatternToken, Source: ZSource, StartIndex: int, EndIndex: int, PresetPattern: ZSyntax): ZPatternToken;
function ZSourceEngine(this: ZSourceEngine, TypeChecker: ZTypeChecker, Generator: ZGenerator): ZSourceEngine;
function IsVisitable(this: ZSourceEngine): boolean;
function EnableVisitor(this: ZSourceEngine): void;
function StopVisitor(this: ZSourceEngine): void;
function Eval(this: ZSourceEngine, Node: ZNode): any;
function Exec(this: ZSourceEngine, Node: ZNode, IsInteractive: boolean): any;
function Eval(this: ZSourceEngine, NameSpace: ZNameSpace, ScriptText: String, FileName: String, LineNumber: int, IsInteractive: boolean): any;
function Eval(this: ZSourceEngine, ScriptText: String, FileName: String, LineNumber: int, IsInteractive: boolean): any;
function Load(this: ZSourceEngine, FileName: String): boolean;
function Unsupported(this: ZSourceEngine, Node: ZNode): void;
function VisitNullNode(this: ZSourceEngine, Node: ZNullNode): void;
function VisitBooleanNode(this: ZSourceEngine, Node: ZBooleanNode): void;
function VisitIntNode(this: ZSourceEngine, Node: ZIntNode): void;
function VisitFloatNode(this: ZSourceEngine, Node: ZFloatNode): void;
function VisitStringNode(this: ZSourceEngine, Node: ZStringNode): void;
function VisitArrayLiteralNode(this: ZSourceEngine, Node: ZArrayLiteralNode): void;
function VisitMapLiteralNode(this: ZSourceEngine, Node: ZMapLiteralNode): void;
function VisitNewObjectNode(this: ZSourceEngine, Node: ZNewanyNode): void;
function VisitGlobalNameNode(this: ZSourceEngine, Node: ZGlobalNameNode): void;
function VisitGetNameNode(this: ZSourceEngine, Node: ZGetNameNode): void;
function VisitSetNameNode(this: ZSourceEngine, Node: ZSetNameNode): void;
function VisitGroupNode(this: ZSourceEngine, Node: ZGroupNode): void;
function VisitGetterNode(this: ZSourceEngine, Node: ZGetterNode): void;
function VisitSetterNode(this: ZSourceEngine, Node: ZSetterNode): void;
function VisitGetIndexNode(this: ZSourceEngine, Node: ZGetIndexNode): void;
function VisitSetIndexNode(this: ZSourceEngine, Node: ZSetIndexNode): void;
function VisitMacroNode(this: ZSourceEngine, Node: ZMacroNode): void;
function VisitFuncCallNode(this: ZSourceEngine, Node: ZFuncCallNode): void;
function VisitMethodCallNode(this: ZSourceEngine, Node: ZMethodCallNode): void;
function VisitUnaryNode(this: ZSourceEngine, Node: ZUnaryNode): void;
function VisitNotNode(this: ZSourceEngine, Node: ZNotNode): void;
function VisitCastNode(this: ZSourceEngine, Node: ZCastNode): void;
function VisitInstanceOfNode(this: ZSourceEngine, Node: ZInstanceOfNode): void;
function VisitBinaryNode(this: ZSourceEngine, Node: ZBinaryNode): void;
function VisitComparatorNode(this: ZSourceEngine, Node: ZComparatorNode): void;
function VisitAndNode(this: ZSourceEngine, Node: ZAndNode): void;
function VisitOrNode(this: ZSourceEngine, Node: ZOrNode): void;
function VisitBlockNode(this: ZSourceEngine, Node: ZBlockNode): void;
function VisitVarNode(this: ZSourceEngine, Node: ZVarNode): void;
function VisitIfNode(this: ZSourceEngine, Node: ZIfNode): void;
function VisitReturnNode(this: ZSourceEngine, Node: ZReturnNode): void;
function VisitWhileNode(this: ZSourceEngine, Node: ZWhileNode): void;
function VisitBreakNode(this: ZSourceEngine, Node: ZBreakNode): void;
function VisitThrowNode(this: ZSourceEngine, Node: ZThrowNode): void;
function VisitTryNode(this: ZSourceEngine, Node: ZTryNode): void;
function VisitLetNode(this: ZSourceEngine, Node: ZLetNode): void;
function VisitFunctionNode(this: ZSourceEngine, Node: ZFunctionNode): void;
function VisitClassNode(this: ZSourceEngine, Node: ZClassNode): void;
function VisitErrorNode(this: ZSourceEngine, Node: ZErrorNode): void;
function VisitPrototypeNode(this: ZSourceEngine, Node: ZPrototypeNode): void;
function VisitImportNode(this: ZSourceEngine, Node: ZImportNode): void;
function VisitTypeNode(this: ZSourceEngine, Node: ZTypeNode): void;
function VisitExtendedNode(this: ZSourceEngine, Node: ZNode): void;
function VisitSugarNode(this: ZSourceEngine, Node: ZSugarNode): void;
function WriteTo(this: ZSourceEngine, OutputFile: String): void;
function ZSourceGenerator(this: ZSourceGenerator, TargetCode: String, TargetVersion: String): ZSourceGenerator;
function InitBuilderList(this: ZSourceGenerator): void;
function GetEngine(this: ZSourceGenerator): ZSourceEngine;
function AppendNewSourceBuilder(this: ZSourceGenerator): ZSourceBuilder;
function InsertNewSourceBuilder(this: ZSourceGenerator): ZSourceBuilder;
function SetNativeType(this: ZSourceGenerator, Type: ZType, TypeName: String): void;
function GetNativeType(this: ZSourceGenerator, Type: ZType): String;
function SetMacro(this: ZSourceGenerator, FuncName: String, Macro: String, ReturnType: ZType, P1: ZType): void;
function SetMacro(this: ZSourceGenerator, FuncName: String, Macro: String, ReturnType: ZType, P1: ZType, P2: ZType): void;
function SetConverterMacro(this: ZSourceGenerator, Macro: String, ReturnType: ZType, P1: ZType): void;
function WriteTo(this: ZSourceGenerator, FileName: String): void;
function StartCodeGeneration(this: ZSourceGenerator, Node: ZNode, IsInteractive: boolean): boolean;
function GenerateCode(this: ZSourceGenerator, ContextType: ZType, Node: ZNode): void;
function IsNeededSurroud(this: ZSourceGenerator, Node: ZNode): boolean;
function GenerateSurroundCode(this: ZSourceGenerator, Node: ZNode): void;
function AppendCode(this: ZSourceGenerator, RawSource: String): void;
function VisitStmtList(this: ZSourceGenerator, BlockNode: ZBlockNode): void;
function VisitBlockNode(this: ZSourceGenerator, Node: ZBlockNode): void;
function VisitNullNode(this: ZSourceGenerator, Node: ZNullNode): void;
function VisitBooleanNode(this: ZSourceGenerator, Node: ZBooleanNode): void;
function VisitIntNode(this: ZSourceGenerator, Node: ZIntNode): void;
function VisitFloatNode(this: ZSourceGenerator, Node: ZFloatNode): void;
function VisitStringNode(this: ZSourceGenerator, Node: ZStringNode): void;
function VisitArrayLiteralNode(this: ZSourceGenerator, Node: ZArrayLiteralNode): void;
function VisitMapLiteralNode(this: ZSourceGenerator, Node: ZMapLiteralNode): void;
function VisitNewArrayNode(this: ZSourceGenerator, Node: ZNewArrayNode): void;
function VisitNewObjectNode(this: ZSourceGenerator, Node: ZNewanyNode): void;
function VisitGroupNode(this: ZSourceGenerator, Node: ZGroupNode): void;
function VisitGetIndexNode(this: ZSourceGenerator, Node: ZGetIndexNode): void;
function VisitSetIndexNode(this: ZSourceGenerator, Node: ZSetIndexNode): void;
function VisitGlobalNameNode(this: ZSourceGenerator, Node: ZGlobalNameNode): void;
function VisitGetNameNode(this: ZSourceGenerator, Node: ZGetNameNode): void;
function VisitSetNameNode(this: ZSourceGenerator, Node: ZSetNameNode): void;
function VisitGetterNode(this: ZSourceGenerator, Node: ZGetterNode): void;
function VisitSetterNode(this: ZSourceGenerator, Node: ZSetterNode): void;
function VisitMethodCallNode(this: ZSourceGenerator, Node: ZMethodCallNode): void;
function VisitMacroNode(this: ZSourceGenerator, Node: ZMacroNode): void;
function VisitFuncCallNode(this: ZSourceGenerator, Node: ZFuncCallNode): void;
function VisitUnaryNode(this: ZSourceGenerator, Node: ZUnaryNode): void;
function VisitNotNode(this: ZSourceGenerator, Node: ZNotNode): void;
function VisitCastNode(this: ZSourceGenerator, Node: ZCastNode): void;
function VisitInstanceOfNode(this: ZSourceGenerator, Node: ZInstanceOfNode): void;
function VisitBinaryNode(this: ZSourceGenerator, Node: ZBinaryNode): void;
function VisitComparatorNode(this: ZSourceGenerator, Node: ZComparatorNode): void;
function VisitAndNode(this: ZSourceGenerator, Node: ZAndNode): void;
function VisitOrNode(this: ZSourceGenerator, Node: ZOrNode): void;
function VisitIfNode(this: ZSourceGenerator, Node: ZIfNode): void;
function VisitReturnNode(this: ZSourceGenerator, Node: ZReturnNode): void;
function VisitWhileNode(this: ZSourceGenerator, Node: ZWhileNode): void;
function VisitBreakNode(this: ZSourceGenerator, Node: ZBreakNode): void;
function VisitThrowNode(this: ZSourceGenerator, Node: ZThrowNode): void;
function VisitTryNode(this: ZSourceGenerator, Node: ZTryNode): void;
function VisitCatchNode(this: ZSourceGenerator, Node: ZCatchNode): void;
function VisitVarNode(this: ZSourceGenerator, Node: ZVarNode): void;
function VisitTypeAnnotation(this: ZSourceGenerator, Type: ZType): void;
function VisitLetNode(this: ZSourceGenerator, Node: ZLetNode): void;
function VisitParamNode(this: ZSourceGenerator, Node: ZParamNode): void;
function VisitFunctionNode(this: ZSourceGenerator, Node: ZFunctionNode): void;
function VisitClassNode(this: ZSourceGenerator, Node: ZClassNode): void;
function VisitErrorNode(this: ZSourceGenerator, Node: ZErrorNode): void;
function VisitExtendedNode(this: ZSourceGenerator, Node: ZNode): void;
function VisitSugarNode(this: ZSourceGenerator, Node: ZSugarNode): void;
function GenerateTypeName(this: ZSourceGenerator, Type: ZType): void;
function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, DelimToken: String, CloseToken: String): void;
function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, CloseToken: String): void;
function ZArrayType(this: ZArrayType, TypeFlag: int, ParamType: ZType): ZArrayType;
function ZAndNode(this: ZAndNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZAndNode;
function Accept(this: ZAndNode, Visitor: ZVisitor): void;
function ZArrayLiteralNode(this: ZArrayLiteralNode, ParentNode: ZNode): ZArrayLiteralNode;
function Accept(this: ZArrayLiteralNode, Visitor: ZVisitor): void;
function ZBlockNode(this: ZBlockNode, NameSpace: ZNameSpace): ZBlockNode;
function ZBlockNode(this: ZBlockNode, ParentNode: ZNode, Init: int): ZBlockNode;
function Accept(this: ZBlockNode, Visitor: ZVisitor): void;
function ToReturnNode(this: ZBlockNode): ZReturnNode;
function IndexOf(this: ZBlockNode, ChildNode: ZNode): int;
function CopyTo(this: ZBlockNode, Index: int, BlockNode: ZBlockNode): void;
function ZBooleanNode(this: ZBooleanNode, ParentNode: ZNode, Token: ZToken, Value: boolean): ZBooleanNode;
function Accept(this: ZBooleanNode, Visitor: ZVisitor): void;
function ZClassNode(this: ZClassNode, ParentNode: ZNode): ZClassNode;
function SetTypeInfo(this: ZClassNode, TypeToken: ZToken, Type: ZType): void;
function SetNameInfo(this: ZClassNode, NameToken: ZToken, Name: String): void;
function GetFieldNode(this: ZClassNode, Index: int): ZFieldNode;
function Accept(this: ZClassNode, Visitor: ZVisitor): void;
function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncNode: ZNode): ZFuncCallNode;
function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncName: String, FuncType: ZFuncType): ZFuncCallNode;
function Accept(this: ZFuncCallNode, Visitor: ZVisitor): void;
function GetRecvType(this: ZFuncCallNode): ZType;
function GetFuncName(this: ZFuncCallNode): String;
function GetFuncType(this: ZFuncCallNode): ZFuncType;
function ToMacroNode(this: ZFuncCallNode, MacroFunc: ZMacroFunc): ZMacroNode;
function ZFunctionNode(this: ZFunctionNode, ParentNode: ZNode): ZFunctionNode;
function SetTypeInfo(this: ZFunctionNode, TypeToken: ZToken, Type: ZType): void;
function SetNameInfo(this: ZFunctionNode, NameToken: ZToken, Name: String): void;
function Accept(this: ZFunctionNode, Visitor: ZVisitor): void;
function GetParamNode(this: ZFunctionNode, Index: int): ZParamNode;
function GetFuncType(this: ZFunctionNode, ContextType: ZType): ZFuncType;
function GetSignature(this: ZFunctionNode, Generator: ZGenerator): String;
function Push(this: ZFunctionNode, Parent: ZFunctionNode): ZFunctionNode;
function Pop(this: ZFunctionNode): ZFunctionNode;
function IsTopLevel(this: ZFunctionNode): boolean;
function GetVarIndex(this: ZFunctionNode): int;
function ZVarNode(this: ZVarNode, ParentNode: ZNode): ZVarNode;
function SetNameInfo(this: ZVarNode, NameToken: ZToken, Name: String): void;
function SetTypeInfo(this: ZVarNode, TypeToken: ZToken, Type: ZType): void;
function Accept(this: ZVarNode, Visitor: ZVisitor): void;
class ZClassField {
	var FieldFlag: int = 0;
	var ClassType: ZClassType;
	var FieldType: ZType;
	var FieldName: String;
	var FieldNativeIndex: int = 0;
	var SourceToken: ZToken;
}
class ZFunc {
	var FuncFlag: int;
	var FuncName: String;  // NativeReferenceNamr
	var FuncType: ZFuncType;
}
class ZFuncFlag {
}
class ZPrototype extends ZFunc {
	var DefinedCount: int = 0;
	var UsedCount: int = 0;
}
class ZType {
	var TypeFlag: int = 0;
	var TypeId: int = 0;
	var ShortName: String = null;
	var RefType: ZType = null;
	var GetRealType: Func<ZType,ZType>;
	var GetSuperType: Func<ZType,ZType>;
	var GetBaseType: Func<ZType,ZType>;
	var GetParamSize: Func<int,ZType>;
	var GetParamType: Func<ZType,ZType,int>;
	var IsGreekType: Func<boolean,ZType>;
	var GetRealType: Func<ZType,ZType,ZType[]>;
	var AcceptValueType: Func<boolean,ZType,ZType,boolean,ZType[]>;
	var IsVarType: Func<boolean,ZType>;
}
class ZTypeFlag {
}
class ZTypePool {
}
class ZUnionType extends ZType {
	var UnionList: ZType[] = null;
}
class ZVarScope {
	var Parent: ZVarScope;
	var Logger: ZLogger;
	var VarList: ZVarType[];
	var VarNodeCount: int = 0;
	var UnresolvedSymbolCount: int = 0;
}
class ZVarType extends ZType {
	var VarList: ZVarType[];
	var SourceToken: ZToken;
	var GreekId: int;
}
class ZNode {
	var ParentNode: ZNode;
	var SourceToken: ZToken;
	var AST: ZNode[];
	var Type: ZType = ZTypeVarType;
	var HasUntypedNode: boolean = true;
	var SetNameInfo: Func<void,ZNode,ZToken,String>;
	var SetTypeInfo: Func<void,ZNode,ZToken,ZType>;
	var IsBreakingBlock: Func<boolean,ZNode>;
	var DeSugar: Func<ZSugarNode,ZNode,ZGenerator>;
	var Accept: Func<void,ZNode,ZVisitor>;
}
class ZParamNode extends ZNode {
	var Name: String;
	var NameToken: ZToken = null;
}
class ZReturnNode extends ZNode {
}
class ZSetIndexNode extends ZNode {
}
class ZSetNameNode extends ZNode {
	var VarName: String;
	var VarIndex: int = 0;
	var IsCaptured: boolean = false;
}
class ZSetterNode extends ZNode {
	var FieldName: String = null;
	var NameToken: ZToken = null;
}
class ZSugarNode extends ZNode {
	var SugarNode: ZNode;
}
class ZThrowNode extends ZNode {
}
class ZTryNode extends ZNode {
}
class ZUnaryNode extends ZNode {
}
class ZWhileNode extends ZNode {
}
class ZEmptyValue {
}
class ZLogger {
	var ReportedErrorList: String[] = [];
}
class ZMacroFunc extends ZFunc {
}
class ZNameSpace {
	var ParentNameSpace: ZNameSpace;
	var Generator: ZGenerator;
	var SerialId: int = 0;
	var TokenMatrix: ZTokenFunc[] = null;
	var SyntaxTable: Map<ZSyntax> = null;
	var SymbolTable: Map<ZSymbolEntry> = null;
}
class ZParserConst {
}
class ZSource {
	var TokenContext: ZTokenContext;
	var Logger: ZLogger;
	var FileName: String;
	var LineNumber: int;
	var SourceText: String;
}
class ZSourceBuilder {
	var Template: ZSourceGenerator;
	var SourceList: String[] = [];
	var Parent: ZSourceBuilder;
	var IndentLevel: int = 0;
	var CurrentIndentString: String = "";
	var BufferedLineComment: String = "";
}
class ZSourceContext extends ZSource {
	var SourcePosition: int = 0;
}
class ZSourceMacro extends ZMacroFunc {
	var Macro: String;
}
class ZSymbolEntry {
	var Parent: ZSymbolEntry;
	var Node: ZNode;
	var IsDisabled: boolean = false;
}
class ZSyntax {
	var PackageNameSpace: ZNameSpace;
	var PatternName: String;
	var MatchFunc: ZMatchFunction;
	var SyntaxFlag: int = 0;
	var ParentPattern: ZSyntax = null;
	var IsDisabled: boolean          = false;
	var IsStatement: boolean         = false;
}
class ZToken {
	var Source: ZSource;
	var StartIndex: int;
	var EndIndex: int;
}
class ZTokenContext {
	var Generator: ZGenerator;
	var NameSpace: ZNameSpace;
	var Source: ZSourceContext;
	var TokenList: ZToken[] = [];
	var CurrentPosition: int = 0;
	var IsAllowSkipIndent: boolean = false;
	var LatestToken: ZToken = null;
	var ApplyingPattern: ZSyntax = null;
}
class ZTokenFunc {
	var Func: ZTokenFunction;
	var ParentFunc: ZTokenFunc;
}
class ZVariable extends ZSymbolEntry {
	var VarFlag: int;
	var VarType: ZType;
	var VarName: String;
	var VarUniqueIndex: int;
	var SourceToken: ZToken;
	var DefCount: int;
	var UsedCount: int;
}
class ZVisitor {
	var VisitNullNode: Func<void,ZVisitor,ZNullNode>;
	var VisitBooleanNode: Func<void,ZVisitor,ZBooleanNode>;
	var VisitIntNode: Func<void,ZVisitor,ZIntNode>;
	var VisitFloatNode: Func<void,ZVisitor,ZFloatNode>;
	var VisitStringNode: Func<void,ZVisitor,ZStringNode>;
	var VisitArrayLiteralNode: Func<void,ZVisitor,ZArrayLiteralNode>;
	var VisitMapLiteralNode: Func<void,ZVisitor,ZMapLiteralNode>;
	var VisitNewObjectNode: Func<void,ZVisitor,ZNewanyNode>;
	var VisitGlobalNameNode: Func<void,ZVisitor,ZGlobalNameNode>;
	var VisitGetNameNode: Func<void,ZVisitor,ZGetNameNode>;
	var VisitSetNameNode: Func<void,ZVisitor,ZSetNameNode>;
	var VisitGroupNode: Func<void,ZVisitor,ZGroupNode>;
	var VisitGetterNode: Func<void,ZVisitor,ZGetterNode>;
	var VisitSetterNode: Func<void,ZVisitor,ZSetterNode>;
	var VisitGetIndexNode: Func<void,ZVisitor,ZGetIndexNode>;
	var VisitSetIndexNode: Func<void,ZVisitor,ZSetIndexNode>;
	var VisitMethodCallNode: Func<void,ZVisitor,ZMethodCallNode>;
	var VisitFuncCallNode: Func<void,ZVisitor,ZFuncCallNode>;
	var VisitMacroNode: Func<void,ZVisitor,ZMacroNode>;
	var VisitUnaryNode: Func<void,ZVisitor,ZUnaryNode>;
	var VisitNotNode: Func<void,ZVisitor,ZNotNode>;
	var VisitCastNode: Func<void,ZVisitor,ZCastNode>;
	var VisitInstanceOfNode: Func<void,ZVisitor,ZInstanceOfNode>;
	var VisitBinaryNode: Func<void,ZVisitor,ZBinaryNode>;
	var VisitComparatorNode: Func<void,ZVisitor,ZComparatorNode>;
	var VisitAndNode: Func<void,ZVisitor,ZAndNode>;
	var VisitOrNode: Func<void,ZVisitor,ZOrNode>;
	var VisitBlockNode: Func<void,ZVisitor,ZBlockNode>;
	var VisitVarNode: Func<void,ZVisitor,ZVarNode>;
	var VisitIfNode: Func<void,ZVisitor,ZIfNode>;
	var VisitReturnNode: Func<void,ZVisitor,ZReturnNode>;
	var VisitWhileNode: Func<void,ZVisitor,ZWhileNode>;
	var VisitBreakNode: Func<void,ZVisitor,ZBreakNode>;
	var VisitThrowNode: Func<void,ZVisitor,ZThrowNode>;
	var VisitTryNode: Func<void,ZVisitor,ZTryNode>;
	var VisitLetNode: Func<void,ZVisitor,ZLetNode>;
	var VisitFunctionNode: Func<void,ZVisitor,ZFunctionNode>;
	var VisitClassNode: Func<void,ZVisitor,ZClassNode>;
	var VisitErrorNode: Func<void,ZVisitor,ZErrorNode>;
	var VisitExtendedNode: Func<void,ZVisitor,ZNode>;
	var VisitSugarNode: Func<void,ZVisitor,ZSugarNode>;
	var EnableVisitor: Func<void,ZVisitor>;
	var StopVisitor: Func<void,ZVisitor>;
	var IsVisitable: Func<boolean,ZVisitor>;
}
class ZClassType extends ZType {
	var FieldList: ZClassField[] = null;
}
class ZFuncType extends ZType {
	var TypeParams: ZType[];
	var HasUnknownType: boolean = false;
	var HasGreekType: boolean = false;
}
class ZGeneric1Type extends ZType {
	var BaseType: ZType;
	var ParamType: ZType;
}
class ZGreekType extends ZType {
	var GreekId: int;
}
class ZTypeChecker extends ZVisitor {
	var StackedContextType: ZType;
	var ReturnedNode: ZNode;
	var Generator: ZGenerator;
	var Logger: ZLogger;
	var StoppedVisitor: boolean;
	var VarScope: ZVarScope;
	var DefineFunction: Func<void,ZTypeChecker,ZFunctionNode,boolean>;
}
class ZAnnotationNode extends ZNode {
	var AnnotatedNode: ZNode = null;
}
class ZAssertNode extends ZNode {
}
class ZBinaryNode extends ZNode {
	var Pattern: ZSyntax;
}
class ZBreakNode extends ZNode {
}
class ZCastNode extends ZNode {
}
class ZCatchNode extends ZNode {
	var ExceptionType: ZType = ZTypeVarType;
	var ExceptionName: String = null;
	var NameToken: ZToken = null;
}
class ZComparatorNode extends ZBinaryNode {
}
class ZConstNode extends ZNode {
}
class ZEmptyNode extends ZNode {
}
class ZErrorNode extends ZConstNode {
}
class ZFieldNode extends ZNode {
	var ClassType: ZClassType;
	var DeclType: ZType = ZTypeVarType;
	var FieldName: String = null;
	var NameToken: ZToken = null;
}
class ZFloatNode extends ZConstNode {
	var FloatValue: float;
}
class ZGetIndexNode extends ZNode {
}
class ZGetNameNode extends ZNode {
	var IsCaptured: boolean = false;
	var VarName: String;
	var VarIndex: int = 0;
}
class ZGetterNode extends ZNode {
	var FieldName: String = null;
	var NameToken: ZToken = null;
}
class ZGlobalNameNode extends ZNode {
	var GlobalName: String;
	var IsStaticFuncName: boolean;
}
class ZGroupNode extends ZNode {
}
class ZIfNode extends ZNode {
}
class ZImportNode extends ZNode {
	var ResourcePath: String = null;
	var Alias: String = null;
	var ResourceToken: ZToken = null;
	var Import: Func<ZNode,ZImportNode>;
}
class ZInstanceOfNode extends ZNode {
	var TargetType: ZType;
}
class ZIntNode extends ZConstNode {
	var IntValue: int;
}
class ZLetNode extends ZNode {
	var Symbol: String = null;
	var SymbolToken: ZToken;
	var SymbolType: ZType = ZTypeVarType;
	var GlobalName: String = null;
}
class ZListNode extends ZNode {
	var ListStartIndex: int;
}
class ZMacroNode extends ZListNode {
	var MacroFunc: ZMacroFunc ;
}
class ZMapEntryNode extends ZNode {
	var Name: String = null;
}
class ZMapLiteralNode extends ZListNode {
}
class ZMethodCallNode extends ZListNode {
	var MethodName: String = null;
	var MethodToken: ZToken = null;
}
class ZNewArrayNode extends ZListNode {
}
class ZNewObjectNode extends ZListNode {
}
class ZNotNode extends ZUnaryNode {
}
class ZNullNode extends ZConstNode {
}
class ZOrNode extends ZBinaryNode {
}
class ZPrototypeNode extends ZListNode {
	var ReturnType: ZType = ZTypeVarType;
	var FuncName: String = null;
	var NameToken: ZToken = null;
}
class ZStringNode extends ZConstNode {
	var StringValue: String;
}
class ZTypeNode extends ZConstNode {
}
class ZGenerator extends ZVisitor {
	var GrammarInfo: String;
	var LanguageExtention: String;
	var TargetVersion: String;
	var RootNameSpace: ZNameSpace;
	var UniqueNumber: int = 0;
	var OutputFile: String;
	var Logger: ZLogger;
	var DefinedFuncMap: Map<ZFunc> = [];
	var StoppedVisitor: boolean;
	var GetEngine: Func<ZSourceEngine,ZGenerator>;
	var ImportLocalGrammar: Func<void,ZGenerator,ZNameSpace>;
	var WriteTo: Func<void,ZGenerator,String>;
	var NameOutputFile: Func<String,ZGenerator,String>;
	var StartCodeGeneration: Func<boolean,ZGenerator,ZNode,boolean>;
	var GetFieldType: Func<ZType,ZGenerator,ZType,String>;
	var GetSetterType: Func<ZType,ZGenerator,ZType,String>;
	var GetConstructorFuncType: Func<ZFuncType,ZGenerator,ZType,ZListNode>;
	var GetMethodFuncType: Func<ZFuncType,ZGenerator,ZType,String,ZListNode>;
}
class ZIndentToken extends ZToken {
}
class ZPatternToken extends ZToken {
	var PresetPattern: ZSyntax;
}
class ZSourceEngine extends ZVisitor {
}
class ZSourceGenerator extends ZGenerator {
	var NativeTypeMap: Map<String>;
	var BuilderList: ZSourceBuilder[];
	var HeaderBuilder: ZSourceBuilder;
	var CurrentBuilder: ZSourceBuilder;
	var Tab: String;
	var LineFeed: String;
	var LineComment: String;
	var BeginComment: String;
	var EndComment: String;
	var SemiColon: String;
	var Camma: String;
	var TrueLiteral: String;
	var FalseLiteral: String;
	var NullLiteral: String;
	var NotOperator: String;
	var AndOperator: String;
	var OrOperator: String;
	var TopType: String;
	var InitBuilderList: Func<void,ZSourceGenerator>;
	var GenerateCode: Func<void,ZSourceGenerator,ZType,ZNode>;
}
class ZArrayType extends ZGeneric1Type {
}
class ZAndNode extends ZBinaryNode {
}
class ZArrayLiteralNode extends ZListNode {
}
class ZBlockNode extends ZListNode {
	var NameSpace: ZNameSpace;
}
class ZBooleanNode extends ZConstNode {
	var BooleanValue: boolean;
}
class ZClassNode extends ZListNode {
	var ClassName: String = null;
	var ClassType: ZClassType = null;
	var SuperType: ZType = null;
	var NameToken: ZToken = null;
	var SuperToken: ZToken = null;
}
class ZFuncCallNode extends ZListNode {
}
class ZFunctionNode extends ZListNode {
	var ReturnType: ZType = ZTypeVarType;
	var FuncName: String = null;
	var NameToken: ZToken = null;
	var ParentFunctionNode: ZFunctionNode = null;
	var ResolvedFuncType: ZFuncType = null;
	var GlobalName: String = null;
	var VarIndex: int = 0;
}
class ZVarNode extends ZBlockNode {
	var DeclType: ZType = ZTypeVarType;
	var NativeName: String = null;
	var TypeToken: ZToken = null;
	var NameToken: ZToken = null;
}
function ZFunc_StringfySignature(FuncName: String, FuncParamSize: int, RecvType: ZType): String {
	return FuncName + "__" + FuncParamSize + RecvType.GetUniqueName();
}
let ZFuncFlag_PhantomFunc = 1 << 10;
let ZFuncFlag_ConverterFunc = 1 << 16;
let ZFuncFlag_CoercionFunc = (1 << 17) | _ConverterFunc;  //@Coercion
let ZFuncFlag_NativeNameConnector = "__";
let ZTypeVarType = new ZType(ZTypeFlag_UniqueType, "var", null);
let ZTypeVoidType = new ZType(ZTypeFlag_UniqueType, "void", null);
let ZTypeBooleanType = new ZType(ZTypeFlag_UniqueType, "boolean", VarType);
let ZTypeIntType = new ZType(ZTypeFlag_UniqueType, "int", VarType);
let ZTypeFloatType = new ZType(ZTypeFlag_UniqueType, "float", VarType);
let ZTypeStringType = new ZType(ZTypeFlag_UniqueType, "String", VarType);
let ZTypeTypeType = new ZType(ZTypeFlag_UniqueType, "Type", VarType);
let ZTypeArrayType = new ZGeneric1Type(ZTypeFlag_UniqueType, "Array", null, VarType);
let ZTypeMapType = new ZGeneric1Type(ZTypeFlag_UniqueType, "Map", null, VarType);
let ZTypeFuncType = new ZFuncType("Func", null);
let ZTypeFlag_OpenType = 1 << 9;  // @Open for the future
let ZTypeFlag_UnboxType = 1 << 10;
let ZTypeFlag_UniqueType = 1 << 16;
let ZTypePool_TypeList = [];
let ZTypePool_GreekTypes = ZGreekType.NewGreekTypes(null);
function ZTypePool_NewTypeId(T: ZType): int {
	var TypeId: int = _TypeList.size();
	_TypeList.add(T);
	return TypeId;
}
function TypeOf(TypeId: int): ZType {
	if(TypeId == 0) {
		return ZTypeVarType;
	}
	if(TypeId < ZTypePool_TypeList.size()) {
		return ZTypePool_TypeList[TypeId];
	}
	return ZTypeVarType;
}
function GetGreekType(GreekId: int): ZType {
	if(ZTypePool_GreekTypes[GreekId] == null) {
		ZTypePool_GreekTypes[GreekId] = new ZGreekType(GreekId);
	}
	return ZTypePool_GreekTypes[GreekId];
}
let ZTypePool_ClassNameMap = [];
let ZTypePool_UniqueTypeSetMap = [];
function ZTypePool_MangleType2(Type1: ZType, Type2: ZType): String {
	return ":" + Type1.TypeId + ":" + Type2.TypeId;
}
function ZTypePool_MangleTypes(TypeList: ZType[]): String {
	var s: String = "";
	var i: int = 0;
	while(i < TypeList.size()) {
		var Type: ZType = TypeList[i];
		s = s + ":" + Type.TypeId;
		i = i + 1;
	}
	return s;
}
function ZTypePool_UniqueTypes(TypeList: ZType[]): ZType[] {
	var MangleName: String = "[]" + _MangleTypes(TypeList);
	var Types: ZType[] = ZTypePool_UniqueTypeSetMap.GetOrNull(MangleName);
	if(Types == null) {
		Types = TypeList.CompactArray();
		ZTypePool_UniqueTypeSetMap.put(MangleName, Types);
	}
	return Types;
}
function ZTypePool_GetGenericType1(BaseType: ZType, ParamType: ZType): ZType {
	var MangleName: String = ZTypePool_MangleType2(BaseType, ParamType);
	var GenericType: ZType = ZTypePool_ClassNameMap.GetOrNull(MangleName);
	if(GenericType == null) {
		var Name: String = BaseType.ShortName + "<" + ParamType + ">";
		if(BaseType.IsArrayType()) {
			Name = BaseType.ShortName + "<" + ParamType + ">";
		}
		GenericType = new ZGeneric1Type(ZTypeFlag_UniqueType, Name, BaseType, ParamType);
		ZTypePool_ClassNameMap.put(MangleName, GenericType);
	}
	return GenericType;
}
function ZTypePool_GetGenericType(BaseType: ZType, TypeList: ZType[], IsCreation: boolean): ZType {
	assert(BaseType.GetParamSize() > 0);
	if(TypeList.size() == 1 && !BaseType.IsFuncType()) {
		return ZTypePool_GetGenericType1(BaseType, TypeList[0]);
	}
	var MangleName: String = ":" + BaseType.TypeId + _MangleTypes(TypeList);
	var GenericType: ZType = ZTypePool_ClassNameMap.GetOrNull(MangleName);
	if((GenericType == null) && IsCreation) {
		var ShortName: String = BaseType.ShortName + "<";
		var i: int = 0;
		for(; i < LibZen_Size(TypeList); i += 1) {
			ShortName = ShortName + TypeList[i].GetRealType().ShortName;
			if(i + 1 == LibZen_Size(TypeList)) {
				ShortName = ShortName + ">";
			}
			else {
				ShortName = ShortName + ",";
			}
		}
		if(BaseType.IsFuncType()) {
			GenericType = new ZFuncType(ShortName, _UniqueTypes(TypeList));
		}
		else {
		}
		ZTypePool_ClassNameMap.put(MangleName, GenericType);
	}
	return GenericType;
}
function ZTypePool_LookupFuncType(TypeList: ZType[]): ZFuncType {
	ZType FuncType = _GetGenericType(ZTypeFuncType, TypeList, true);
	if(FuncType instanceof ZFuncType) {
		return (ZFuncType)FuncType;
	}
	return null;
}
function ZTypePool_LookupFuncType(R: ZType, P1: ZType): ZFuncType {
	ZArray<ZType> TypeList = [];
	TypeList.add(R);
	TypeList.add(P1);
	return ZTypePool_LookupFuncType(TypeList);
}
function ZTypePool_LookupFuncType(R: ZType, P1: ZType, P2: ZType): ZFuncType {
	ZArray<ZType> TypeList = [];
	TypeList.add(R);
	TypeList.add(P1);
	TypeList.add(P2);
	return ZTypePool_LookupFuncType(TypeList);
}
let ZNode_Nop = -1;
let ZNode_NameInfo = -2;
let ZNode_TypeInfo = -3;
let ZNode_AppendIndex = -4;
let ZNode_NestedAppendIndex = -5;
let ZReturnNode_Expr = 0;
let ZSetIndexNode_Recv = 0;
let ZSetIndexNode_Index = 1;
let ZSetIndexNode_Expr = 2;
let ZSetNameNode_Expr = 0;
let ZSetterNode_Recv = 0;
let ZSetterNode_Expr = 1;
let ZSugarNode_DeSugar = 0;
let ZThrowNode_Expr = 0;
let ZTryNode_Try = 0;
let ZTryNode_Catch = 1;
let ZTryNode_Finally = 2;
let ZUnaryNode_Recv = 0;
let ZWhileNode_Cond = 0;
let ZWhileNode_Block = 1;
let TrueEmpty = new ZEmptyValue();
let FalseEmpty = new ZEmptyValue();
function ZLogger_LogError(Token: ZToken, Message: String): String {
	if(Token != null && Token.Source != null) {
		Message = Token.Source.FormatErrorMarker("error", Token.StartIndex, Message);
		Token.Source.Logger.Report(Message);
	}
	return Message;
}
function ZLogger_LogWarning(Token: ZToken, Message: String): void {
	if(Token != null && Token.Source != null) {
		Message = Token.Source.FormatErrorMarker("warning", Token.StartIndex, Message);
		Token.Source.Logger.Report(Message);
	}
}
function ZLogger_LogInfo(Token: ZToken, Message: String): void {
	if(Token != null && Token.Source != null) {
		Message = Token.Source.FormatErrorMarker("info", Token.StartIndex, Message);
		Token.Source.Logger.Report(Message);
	}
}
function ZLogger_LogDebug(Token: ZToken, Message: String): void {
	if(Token != null && Token.Source != null) {
		Message = Token.Source.FormatErrorMarker("debug", Token.StartIndex, Message);
		Token.Source.Logger.Report(Message);
	}
}
let SerialNumber = 0;
function RightPatternSymbol(PatternName: String): String {
	return "\t" + PatternName;
}
let ProgName = "LibZen";
let CodeName = "Reference Implementation of D-Script";
let MajorVersion = 0;
let MinerVersion = 1;
let PatchLevel = 0;
let Version = "0.1";
let Copyright = "Copyright (c) 2013-2014, Konoha project authors";
let License = "BSD-Style Open Source";
let ZSyntax_LeftJoin = 1 << 1;
let ZSyntax_BinaryOperator = 1;
function MergeSyntaxPattern(Pattern: ZSyntax, Parent: ZSyntax): ZSyntax {
	if(Parent == null) {
		return Pattern;
	}
	var MergedPattern: ZSyntax = new ZSyntax(Pattern.PackageNameSpace, Pattern.PatternName, Pattern.MatchFunc);
	MergedPattern.ParentPattern = Parent;
	return MergedPattern;
}
let NullToken = new ZToken(null, 0, 0);
let Required = true;
let Optional = false;
let AllowSkipIndent = true;
let NotAllowSkipIndent = false;
let AllowNewLine = true;
let MoveNext = true;
function NewGreekTypes(GreekTypes: ZType[]): ZType[] {
	if(GreekTypes == null) {
		return new ZType[LibZen_Size(LibZen_GreekNames)];
	}
	else {
		var i: int = 0;
		while(i < LibZen_Size(GreekTypes)) {
			GreekTypes[i] = null;
			i = i + 1;
		}
		return GreekTypes;
	}
}
let ZTypeChecker_DefaultTypeCheckPolicy = 0;
let ZTypeChecker_NoCheckPolicy = 1;
let ZAssertNode_Expr = 0;
let ZBinaryNode_Left = 0;
let ZBinaryNode_Right = 1;
let ZCastNode_Expr = 0;
let ZCatchNode_Block = 0;
let ZFieldNode_InitValue = 0;
let ZGetIndexNode_Recv = 0;
let ZGetIndexNode_Index = 1;
let ZGetterNode_Recv = 0;
let ZGroupNode_Expr = 0;
let ZIfNode_Cond = 0;
let ZIfNode_Then = 1;
let ZIfNode_Else = 2;
let ZInstanceOfNode_Left = 0;
let ZLetNode_InitValue = 0;
let ZMapEntryNode_Key = 0;
let ZMapEntryNode_Value = 1;
let ZMethodCallNode_Recv = 0;
let ZFuncCallNode_Func = 0;
let ZFunctionNode_Block = 0;
let ZVarNode_InitValue = 0;
function ZClassField(this: ZClassField, ClassType: ZClassType, FieldName: String, FieldType: ZType, SourceToken: ZToken): ZClassField {
	this.ClassType = ClassType;
	this.FieldType = FieldType;
	this.FieldName = FieldName;
	this.SourceToken = SourceToken;
}

function ZFunc(this: ZFunc, FuncFlag: int, FuncName: String, FuncType: ZFuncType): ZFunc {
	this.FuncFlag = FuncFlag;
	this.FuncName = FuncName;
	this.FuncType = FuncType;
}

function GetFuncType(this: ZFunc): ZFuncType {
	return this.FuncType;
}

function toString(this: ZFunc): String {
	return this.FuncName + ": " + this.FuncType;
}

function Used(this: ZFunc): void {
}

function Defined(this: ZFunc): void {
}

function IsConverterFunc(this: ZFunc): boolean {
	return LibZen_IsFlag(this.FuncFlag, ZFuncFlag_ConverterFunc);
}

function IsCoercionFunc(this: ZFunc): boolean {
	return LibZen_IsFlag(this.FuncFlag, ZFuncFlag_CoercionFunc);
}

function Is(this: ZFunc, Flag: int): boolean {
	return LibZen_IsFlag(this.FuncFlag, Flag);
}

function GetSignature(this: ZFunc): String {
	return this.FuncType.StringfySignature(this.FuncName);
}

function ZPrototype(this: ZPrototype, FuncFlag: int, FuncName: String, FuncType: ZFuncType, SourceToken: ZToken): ZPrototype {
	super(FuncFlag, FuncName, FuncType);
	this.DefinedCount = 0;
	this.UsedCount = 0;
}

function Used(this: ZPrototype): void {
	this.UsedCount = this.UsedCount + 1;
}

function Defined(this: ZPrototype): void {
	this.DefinedCount = this.DefinedCount + 1;
}

function ZType(this: ZType, TypeFlag: int, ShortName: String, RefType: ZType): ZType {
	this.TypeFlag = TypeFlag;
	this.ShortName = ShortName;
	this.RefType = RefType;
	if(LibZen_IsFlag(TypeFlag, ZTypeFlag_UniqueType)) {
		this.TypeId = ZTypePool_NewTypeId(this);
	}
}

function GetRealType(this: ZType): ZType {
	return this;
}

function GetSuperType(this: ZType): ZType {
	return this.RefType;
}

function GetBaseType(this: ZType): ZType {
	return this;
}

function GetParamSize(this: ZType): int {
	return 0;
}

function GetParamType(this: ZType, Index: int): ZType {
	return ZTypeVarType;  // for safety, it is used in Array
}

function Equals(this: ZType, Type: ZType): boolean {
	return (this.GetRealType() == Type.GetRealType());
}

function Accept(this: ZType, Type: ZType): boolean {
	var ThisType: ZType = this.GetRealType();
	if(ThisType == Type.GetRealType() /*|| ThisType == ZenSystem.AnyType*/) {
		return true;
	}
	var SuperClass: ZType = Type.GetSuperType();
	while(SuperClass != null) {
		if(SuperClass == ThisType) {
			return true;
		}
		SuperClass = SuperClass.GetSuperType();
	}
	return false;
}

function IsGreekType(this: ZType): boolean {
	return false;
}

function GetRealType(this: ZType, Greek: ZType[]): ZType {
	return this.GetRealType();
}

function AcceptValueType(this: ZType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean {
	if(this.GetRealType() != ValueType && !ValueType.IsVarType()) {
		if(ExactMatch && !this.Accept(ValueType)) {
			return false;
		}
	}
	return true;
}

function IsVoidType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeVoidType);
}

function IsVarType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeVarType);
}

function IsInferrableType(this: ZType): boolean {
	return (!this.IsVarType() && !this.IsVoidType());
}

function IsTypeType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeTypeType);
}

function IsBooleanType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeBooleanType);
}

function IsIntType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeIntType);
}

function IsFloatType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeFloatType);
}

function IsNumberType(this: ZType): boolean {
	return (this.IsIntType() || this.IsFloatType());
}

function IsStringType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeStringType);
}

function IsArrayType(this: ZType): boolean {
	return (this.GetBaseType() == ZTypeArrayType);
}

function IsMapType(this: ZType): boolean {
	return (this.GetBaseType() == ZTypeMapType);
}

function IsOpenType(this: ZType): boolean {
	return LibZen_IsFlag(this.TypeFlag, ZTypeFlag_OpenType);
}

function IsImmutableType(this: ZType): boolean {
	return false;
}

function IsNullableType(this: ZType): boolean {
	return true;
}

function toString(this: ZType): String {
	return this.ShortName;
}

function GetAsciiName(this: ZType): String {
	return this.ShortName;
}

function StringfyClassMember(this: ZType, Name: String): String {
	return Name + " of " + this.ShortName;
}

function GetUniqueName(this: ZType): String {
	return LibZen_Stringfy(this.TypeId);
}

function IsFuncType(this: ZType): boolean {
	return (this.GetRealType() instanceof ZFuncType);
}

function StringfySignature(this: ZType, FuncName: String): String {
	return FuncName;
}

function Maybe(this: ZType, T: ZType, SourceToken: ZToken): void {
}

function ZUnionType(this: ZUnionType): ZUnionType {
	super(0, "union", ZTypeVarType);
	this.TypeId = this.RefType.TypeId;
}

function ZVarScope(this: ZVarScope, Parent: ZVarScope, Logger: ZLogger, VarList: ZVarType[]): ZVarScope {
	this.Parent = Parent;
	this.Logger = Logger;
	this.VarList = VarList;
	if(this.VarList == null) {
		this.VarList = [];
	}
}

function NewVarType(this: ZVarScope, VarType: ZType, Name: String, SourceToken: ZToken): ZType {
	if(!(VarType instanceof ZVarType) && VarType.IsVarType()) {
		VarType = new ZVarType(this.VarList, Name, SourceToken);
	}
	return VarType;
}

function FoundUnresolvedSymbol(this: ZVarScope, FuncName: String): void {
	System.out.println("unresolved name: " + FuncName);
	this.UnresolvedSymbolCount = this.UnresolvedSymbolCount + 1;
}

function CheckVarNode(this: ZVarScope, ContextType: ZType, Node: ZNode): void {
	if(Node.IsUntyped()) {
		this.VarNodeCount = this.VarNodeCount + 1;
	}
	if(ContextType.IsInferrableType() && Node.Type instanceof ZVarType) {
		((ZVarType)Node.Type).Infer(ContextType, Node.SourceToken);
		Node.Type = ContextType;
	}
	if(ContextType instanceof ZVarType && !Node.IsUntyped()) {
		((ZVarType)ContextType).Infer(Node.Type, Node.SourceToken);
	}
}

function TypeCheckStmtList(this: ZVarScope, TypeSafer: ZTypeChecker, StmtList: ZNode[]): boolean {
	var PrevCount: int = -1;
	while(true) {
		var i: int = 0;
		this.VarNodeCount = 0;
		this.UnresolvedSymbolCount = 0;
		while(i < StmtList.size()) {
			StmtList[i] = TypeSafer.CheckType(StmtList[i], ZTypeVoidType);
			i = i + 1;
		}
		if(this.VarNodeCount == 0 || PrevCount == this.VarNodeCount) {
			break;
		}
		PrevCount = this.VarNodeCount;
	}
	if(this.VarNodeCount == 0) {
		return true;
	}
	return false;
}

function TypeCheckFuncBlock(this: ZVarScope, TypeSafer: ZTypeChecker, FunctionNode: ZFunctionNode): void {
	var PrevCount: int = -1;
	while(true) {
		this.VarNodeCount = 0;
		this.UnresolvedSymbolCount = 0;
		TypeSafer.DefineFunction(FunctionNode, false/*Enforced*/);
		FunctionNode.AST[ZFunctionNode_Block] = TypeSafer.CheckType(FunctionNode.AST[ZFunctionNode_Block], ZTypeVoidType);
		if(this.VarNodeCount == 0 || PrevCount == this.VarNodeCount) {
			break;
		}
		PrevCount = this.VarNodeCount;
	}
	if(this.UnresolvedSymbolCount == 0) {
		TypeSafer.DefineFunction(FunctionNode, true);
	}
	else {
		TypeSafer.DefineFunction(FunctionNode, false/*Enforced*/);
		if(this.Parent != null) {
			this.Parent.UnresolvedSymbolCount = this.UnresolvedSymbolCount + this.Parent.UnresolvedSymbolCount;
		}
	}
}

function ZVarType(this: ZVarType, VarList: ZVarType[], Name: String, SourceToken: ZToken): ZVarType {
	super(0, Name, ZTypeVarType);
	this.VarList = VarList;
	this.SourceToken = SourceToken;
	this.GreekId = VarList.size();
	VarList.add(this);
	this.TypeId = this.RefType.TypeId;
}

function GetRealType(this: ZVarType): ZType {
	return this.RefType;
}

function GetParamSize(this: ZVarType): int {
	return this.RefType.GetParamSize();
}

function GetParamType(this: ZVarType, Index: int): ZType {
	return this.RefType.GetParamType(Index);
}

function IsFuncType(this: ZVarType): boolean {
	return this.RefType.IsFuncType();
}

function IsVarType(this: ZVarType): boolean {
	return this.RefType.IsVarType();
}

function toString(this: ZVarType): String {
	return "typeof("+this.ShortName+"): " + this.RefType;
}

function Infer(this: ZVarType, ContextType: ZType, SourceToken: ZToken): void {
	if(this.RefType.IsVarType()) {
		if(ContextType instanceof ZVarType && ContextType.IsVarType()) {
			ZVarType VarType = (ZVarType)ContextType;
			if(this.GreekId < VarType.GreekId) {
				VarType.GreekId = this.GreekId;
			}
			else {
				this.GreekId = VarType.GreekId;
			}
		}
		else {
			this.RefType = ContextType.GetRealType();
			this.SourceToken = SourceToken;
			this.TypeId = this.RefType.TypeId;
			this.TypeFlag = this.RefType.TypeFlag;
		}
	}
}

function Maybe(this: ZVarType, T: ZType, SourceToken: ZToken): void {
	if(this.RefType.IsVarType()) {
		if(T instanceof ZVarType && T.IsVarType()) {
			ZVarType VarType = (ZVarType)T;
			if(this.GreekId < VarType.GreekId) {
				VarType.GreekId = this.GreekId;
			}
			else {
				this.GreekId = VarType.GreekId;
			}
		}
		else {
			this.RefType = T.GetRealType();
			this.SourceToken = SourceToken;
			this.TypeId = T.TypeId;
			this.TypeFlag = T.TypeFlag;
		}
	}
}

function ZNode(this: ZNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZNode {
	assert(this != ParentNode);
	this.ParentNode = ParentNode;
	this.SourceToken = SourceToken;
	if(Size > 0) {
		this.AST = new ZNode[Size];
	}
	else {
		this.AST = null;
	}
}

function SetChild(this: ZNode, Node: ZNode): ZNode {
	assert(Node != null);
	if(Node != null) {
		assert(this != Node);
		Node.ParentNode = this;
	}
	return Node;
}

function SetNameInfo(this: ZNode, NameToken: ZToken, Name: String): void {
	assert(Name == null);  // Set SetName in a sub class property
}

function SetTypeInfo(this: ZNode, TypeToken: ZToken, Type: ZType): void {
	this.Type = Type;  // default behavior
}

function Set(this: ZNode, Index: int, Node: ZNode): void {
	if(Index >= 0) {
		this.AST[Index] = this.SetChild(Node);
	}
	else if(Index == ZNode_AppendIndex) {
		var ListNode: ZNode = this;
		if(ListNode instanceof ZListNode) {
			((ZListNode)ListNode).Append(Node);
		}
		else {
			assert(ListNode instanceof ZListNode);
		}
	}
	else if(Index == ZNode_NameInfo) {
		this.SetNameInfo(Node.SourceToken, Node.SourceToken.GetText());
		this.SourceToken = Node.SourceToken;
		return;
	}
	else if(Index == ZNode_TypeInfo) {
		this.SetTypeInfo(Node.SourceToken, Node.Type);
		return;
	}
}

function GetAstSize(this: ZNode): int {
	if(this.AST == null) {
		return 0;
	}
	return this.AST.length;
}

function HasAst(this: ZNode, Index: int): boolean {
	if(this.AST != null && Index < this.AST.length) {
		return this.AST[Index] != null;
	}
	return false;
}

function GetAstType(this: ZNode, Index: int): ZType {
	return this.AST[Index].Type.GetRealType();
}

function GetSourceLocation(this: ZNode): String {
	if(this.SourceToken != null) {
		return "(" + this.SourceToken.GetFileName() + ":" + this.SourceToken.GetLineNumber() + ")";
	}
	return null;
}

function toString(this: ZNode): String {
	var Self: String = "#" + this.getClass().getSimpleName();
	if(!this.Type.IsVarType()) {
		Self = Self + ":" + this.Type;
	}
	else {
		Self = Self + ":?";
	}
	if(this.AST != null) {
		var i: int = 0;
		Self = Self + "[";
		while(i < this.AST.length) {
			if(i > 0) {
				Self = Self + ",";
			}
			if(this.AST[i] == null) {
				Self = Self + "null";
			}
			else {
				Self = Self + this.AST[i].toString();
			}
			i = i + 1;
		}
		Self = Self + "]";
	}
	return Self;
}

function GetScopeBlockNode(this: ZNode): ZBlockNode {
	ZNode Node = this;
	while(Node != null) {
		if(Node instanceof ZBlockNode) {
			return (ZBlockNode)Node;
		}
		if(Node == Node.ParentNode) {
			throw new RuntimeException("serious error: parent node is same: " + Node);
		}
		Node = Node.ParentNode;
	}
	return null;
}

function GetNameSpace(this: ZNode): ZNameSpace {
	ZBlockNode BlockNode = this.GetScopeBlockNode();
	return BlockNode.NameSpace;
}

function IsErrorNode(this: ZNode): boolean {
	return (this instanceof ZErrorNode);
}

function IsBreakingBlock(this: ZNode): boolean {
	return false;
}

function DeSugar(this: ZNode, Generator: ZGenerator): ZSugarNode {
	return new ZSugarNode(this, new ZErrorNode(this.ParentNode, "undefined code generation: " + this));
}

function Accept(this: ZNode, Visitor: ZVisitor): void {
	Visitor.VisitExtendedNode(this);
}

function IsUntyped(this: ZNode): boolean {
	return this.Type.IsVarType();
}

function HasUntypedNode(this: ZNode): boolean {
	if(this.HasUntypedNode) {
		if(!this.IsUntyped()) {
			var i: int = 0;
			while(i < this.GetAstSize()) {
				if(this.AST[i] != null && this.AST[i].HasUntypedNode()) {
					return true;
				}
				i = i + 1;
			}
			this.HasUntypedNode = false;
			return false;
		}
	}
	return this.HasUntypedNode;
}

function VisitTypeChecker(this: ZNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode {
	return TypeChecker.VisitTypeChecker(this, ContextType);
}

function ToReturnNode(this: ZNode): ZReturnNode {
	return null;
}

function ZParamNode(this: ZParamNode, ParentNode: ZNode): ZParamNode {
	super(ParentNode, null, 0);
}

function SetNameInfo(this: ZParamNode, NameToken: ZToken, Name: String): void {
	this.Name = Name;
	this.NameToken = NameToken;
}

function ZReturnNode(this: ZReturnNode, ParentNode: ZNode): ZReturnNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZReturnNode, Visitor: ZVisitor): void {
	Visitor.VisitReturnNode(this);
}

function ToReturnNode(this: ZReturnNode): ZReturnNode {
	return this;
}

function ZSetIndexNode(this: ZSetIndexNode, ParentNode: ZNode, LeftNode: ZNode): ZSetIndexNode {
	super(ParentNode, null, 3);
	this.Set(ZSetIndexNode_Recv, LeftNode);
}

function Accept(this: ZSetIndexNode, Visitor: ZVisitor): void {
	Visitor.VisitSetIndexNode(this);
}

function ZSetNameNode(this: ZSetNameNode, ParentNode: ZNode, Token: ZToken, VarName: String): ZSetNameNode {
	super(ParentNode, Token, 1);
	this.VarName = VarName;
}

function Accept(this: ZSetNameNode, Visitor: ZVisitor): void {
	Visitor.VisitSetNameNode(this);
}

function ZSetterNode(this: ZSetterNode, ParentNode: ZNode, RecvNode: ZNode): ZSetterNode {
	super(ParentNode, null, 2);
	this.Set(ZSetterNode_Recv, RecvNode);
}

function SetNameInfo(this: ZSetterNode, NameToken: ZToken, Name: String): void {
	this.FieldName = Name;
	this.NameToken = NameToken;
}

function Accept(this: ZSetterNode, Visitor: ZVisitor): void {
	Visitor.VisitSetterNode(this);
}

function IsStaticField(this: ZSetterNode): boolean {
	return this.AST[ZSetterNode_Recv] instanceof ZTypeNode;
}

function ZSugarNode(this: ZSugarNode, SugarNode: ZNode, DeSugarNode: ZNode): ZSugarNode {
	super(SugarNode.ParentNode, null, 1);
	this.SugarNode = SugarNode;
	SugarNode.ParentNode = this;
	this.Set(ZSugarNode_DeSugar, DeSugarNode);
	DeSugarNode.ParentNode = this;
}

function Accept(this: ZSugarNode, Visitor: ZVisitor): void {
	Visitor.VisitSugarNode(this);
}

function ZThrowNode(this: ZThrowNode, ParentNode: ZNode): ZThrowNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZThrowNode, Visitor: ZVisitor): void {
	Visitor.VisitThrowNode(this);
}

function ZTryNode(this: ZTryNode, ParentNode: ZNode): ZTryNode {
	super(ParentNode, null, 3);
}

function Accept(this: ZTryNode, Visitor: ZVisitor): void {
	Visitor.VisitTryNode(this);
}

function ZUnaryNode(this: ZUnaryNode, ParentNode: ZNode, Token: ZToken): ZUnaryNode {
	super(ParentNode, Token, 1);
}

function Accept(this: ZUnaryNode, Visitor: ZVisitor): void {
	Visitor.VisitUnaryNode(this);
}

function ZWhileNode(this: ZWhileNode, ParentNode: ZNode): ZWhileNode {
	super(ParentNode, null, 2);
}

function Accept(this: ZWhileNode, Visitor: ZVisitor): void {
	Visitor.VisitWhileNode(this);
}

function toString(this: ZEmptyValue): String { return ""; }

function Report(this: ZLogger, Message: String): void {
	this.ReportedErrorList.add(Message);
}

function GetReportedErrors(this: ZLogger): String[] {
	var List: String[] = this.ReportedErrorList;
	this.ReportedErrorList = [];
	return List.CompactArray();
}

function ShowErrors(this: ZLogger): void {
	var Messages: String[] = this.GetReportedErrors();
	var i: int = 0;
	while(i < Messages.length) {
		LibZen_PrintLine(Messages[i]);
		i = i + 1;
	}
}

function ZMacroFunc(this: ZMacroFunc, FuncName: String, FuncType: ZFuncType): ZMacroFunc {
	super(0, FuncName, FuncType);
}

function ZNameSpace(this: ZNameSpace, Generator: ZGenerator, ParentNameSpace: ZNameSpace): ZNameSpace {
	this.ParentNameSpace = ParentNameSpace;
	if(ParentNameSpace == null) {
		this.Generator = Generator;
	}
	else {
		this.Generator = ParentNameSpace.Generator;
	}
	this.SerialId = SerialNumber;
	SerialNumber = SerialNumber + 1;
}

function toString(this: ZNameSpace): String {
	return "NS["+this.SerialId+"]";
}

function CreateSubNameSpace(this: ZNameSpace): ZNameSpace {
	return new ZNameSpace(null, this);
}

function GetRootNameSpace(this: ZNameSpace): ZNameSpace {
	return this.Generator.RootNameSpace;
}

function GetTokenFunc(this: ZNameSpace, ZenChar: int): ZTokenFunc {
	if(this.TokenMatrix == null) {
		return this.ParentNameSpace.GetTokenFunc(ZenChar);
	}
	return this.TokenMatrix[ZenChar];
}

function JoinParentFunc(this: ZNameSpace, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc {
	if(Parent != null && Parent.Func == Func) {
		return Parent;
	}
	return new ZTokenFunc(Func, Parent);
}

function AppendTokenFunc(this: ZNameSpace, keys: String, TokenFunc: ZTokenFunction): void {
	if(this.TokenMatrix == null) {
		this.TokenMatrix = LibZen_NewTokenMatrix();
		if(this.ParentNameSpace != null) {
			var i: int = 0;
			for(; i < this.TokenMatrix.length; i += 1) {
				this.TokenMatrix[i] = this.ParentNameSpace.GetTokenFunc(i);
			}
		}
	}
	var i: int = 0;
	for(;i < keys.length(); i += 1) {
		var kchar: int = LibZen_GetTokenMatrixIndex(LibZen_GetChar(keys, i));
		this.TokenMatrix[kchar] = this.JoinParentFunc(TokenFunc, this.TokenMatrix[kchar]);
	}
}

function GetSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax {
	var NameSpace: ZNameSpace = this;
	while(NameSpace != null) {
		if(NameSpace.SyntaxTable != null) {
			return NameSpace.SyntaxTable.GetOrNull(PatternName);
		}
		NameSpace = NameSpace.ParentNameSpace;
	}
	return null;
}

function SetSyntaxPattern(this: ZNameSpace, PatternName: String, Syntax: ZSyntax): void {
	if(this.SyntaxTable == null) {
		this.SyntaxTable = [];
	}
	this.SyntaxTable.put(PatternName, Syntax);
}

function GetRightSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax {
	return this.GetSyntaxPattern(ZNameSpace.RightPatternSymbol(PatternName));
}

function AppendSyntaxPattern(this: ZNameSpace, PatternName: String, NewPattern: ZSyntax): void {
	LibZen_Assert(NewPattern.ParentPattern == null);
	var ParentPattern: ZSyntax = this.GetSyntaxPattern(PatternName);
	NewPattern.ParentPattern = ParentPattern;
	this.SetSyntaxPattern(PatternName, NewPattern);
}

function DefineStatement(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void {
	var Alias: int = PatternName.indexOf(" ");
	var Name: String = (Alias == -1) ? PatternName : PatternName.substring(0, Alias);
	var Pattern: ZSyntax = new ZSyntax(this, Name, MatchFunc);
	Pattern.IsStatement = true;
	this.AppendSyntaxPattern(Name, Pattern);
	if(Alias != -1) {
		this.DefineStatement(PatternName.substring(Alias+1), MatchFunc);
	}
}

function DefineExpression(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void {
	var Alias: int = PatternName.indexOf(" ");
	var Name: String = (Alias == -1) ? PatternName : PatternName.substring(0, Alias);
	var Pattern: ZSyntax = new ZSyntax(this, Name, MatchFunc);
	this.AppendSyntaxPattern(Name, Pattern);
	if(Alias != -1) {
		this.DefineExpression(PatternName.substring(Alias+1), MatchFunc);
	}
}

function DefineRightExpression(this: ZNameSpace, PatternName: String, SyntaxFlag: int, MatchFunc: ZMatchFunction): void {
	var Alias: int = PatternName.indexOf(" ");
	var Name: String = (Alias == -1) ? PatternName : PatternName.substring(0, Alias);
	var Pattern: ZSyntax = new ZSyntax(this, Name, MatchFunc);
	Pattern.SyntaxFlag = SyntaxFlag;
	this.AppendSyntaxPattern(ZNameSpace.RightPatternSymbol(Name), Pattern);
	if(Alias != -1) {
		this.DefineRightExpression(PatternName.substring(Alias+1), SyntaxFlag, MatchFunc);
	}
}

function GetSymbol(this: ZNameSpace, Symbol: String): ZSymbolEntry {
	var NameSpace: ZNameSpace = this;
	while(NameSpace != null) {
		if(NameSpace.SymbolTable != null) {
			var Entry: ZSymbolEntry = NameSpace.SymbolTable.GetOrNull(Symbol);
			if(Entry != null) {
				if(Entry.IsDisabled) {
					return null;
				}
				return Entry;
			}
		}
		NameSpace = NameSpace.ParentNameSpace;
	}
	return null;
}

function GetSymbolNode(this: ZNameSpace, Symbol: String): ZNode {
	ZSymbolEntry Entry = this.GetSymbol(Symbol);
	if(Entry != null) {
		return Entry.Node;
	}
	return null;
}

function SetLocalSymbolEntry(this: ZNameSpace, Symbol: String, Entry: ZSymbolEntry): void {
	if(this.SymbolTable == null) {
		this.SymbolTable = [];
	}
	this.SymbolTable.put(Symbol, Entry);
}

function SetLocalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry {
	var Parent: ZSymbolEntry = this.GetSymbol(Symbol);
	Node.ParentNode = null; // kill links
	this.SetLocalSymbolEntry(Symbol, new ZSymbolEntry(Parent, Node));
	return Parent;
}

function SetGlobalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry {
	return this.GetRootNameSpace().SetLocalSymbol(Symbol, Node);
}

function GetLocalVariable(this: ZNameSpace, VarName: String): ZVariable {
	ZSymbolEntry Entry = this.GetSymbol(VarName);
	if(Entry instanceof ZVariable) {
		return (ZVariable)Entry;
	}
	return null;
}

function SetLocalVariable(this: ZNameSpace, FunctionNode: ZFunctionNode, VarType: ZType, VarName: String, SourceToken: ZToken): void {
	var Parent: ZSymbolEntry = this.GetSymbol(VarName);
	var VarInfo: ZVariable = new ZVariable(Parent, FunctionNode, 0, VarType, VarName, SourceToken);
	this.SetLocalSymbolEntry(VarName, VarInfo);
}

function SetTypeName(this: ZNameSpace, Name: String, Type: ZType, SourceToken: ZToken): void {
	ZTypeNode Node = new ZTypeNode(null, SourceToken, Type);
	this.SetLocalSymbol(Name, Node);
}

function SetTypeName(this: ZNameSpace, Type: ZType, SourceToken: ZToken): void {
	this.SetTypeName(Type.ShortName, Type, SourceToken);
}

function GetTypeNode(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZTypeNode {
	var Node: ZNode = this.GetSymbolNode(TypeName);
	if(Node instanceof ZTypeNode) {
		return (ZTypeNode)Node;
	}
	if(Node == null && SourceToken != null) {
		var Type: ZType = new ZClassType(TypeName, ZTypeVarType);
		this.GetRootNameSpace().SetTypeName(TypeName, Type, SourceToken);
		return this.GetTypeNode(TypeName, null/*don"t create again*/);
	}
	return null;
}

function GetType(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZType {
	var TypeNode: ZTypeNode = this.GetTypeNode(TypeName, SourceToken);
	if(TypeNode != null) {
		return TypeNode.Type;
	}
	return null;
}

function ZSource(this: ZSource, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSource {
	this.FileName = FileName;
	this.LineNumber = LineNumber;
	this.TokenContext = TokenContext;
	this.SourceText = Source;
	this.Logger = TokenContext.Generator.Logger;
}

function GetLineNumber(this: ZSource, Position: int): int {
	var LineNumber: int = this.LineNumber;
	var i: int = 0;
	while(i < Position) {
		char ch = this.SourceText.charAt(i);
		if(ch == "\n") {
			LineNumber = LineNumber + 1;
		}
		i = i + 1;
	}
	return LineNumber;
}

function GetLineHeadPosition(this: ZSource, Position: int): int {
	var s: String = this.SourceText;
	var StartIndex: int = 0;
	var i: int = Position;
	if(!(i < s.length())) {
		i = s.length() - 1;
	}
	while(i >= 0) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			StartIndex = i + 1;
			break;
		}
		i = i - 1;
	}
	return StartIndex;
}

function CountIndentSize(this: ZSource, Position: int): int {
	var s: String = this.SourceText;
	var length: int = 0;
	var i: int = Position;
	while(i < s.length()) {
		var ch: String = s.charAt(i);
		if(ch == "\t") {
			length = length + 8;
		}
		else if(ch == " ") {
			length = length + 1;
		}
		else {
			break;
		}
		i = i + 1;
	}
	return length;
}

function GetLineText(this: ZSource, Position: int): String {
	var s: String = this.SourceText;
	var StartIndex: int = 0;
	var EndIndex: int = s.length();
	var i: int = Position;
	if(!(i < s.length())) {
		i = s.length() - 1;
	}
	while(i >= 0) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			StartIndex = i + 1;
			break;
		}
		i = i - 1;
	}
	i = Position;
	while(i < s.length()) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			EndIndex = i;
			break;
		}
		i = i + 1;
	}
	return s.substring(StartIndex, EndIndex);
}

function GetLineMarker(this: ZSource, Position: int): String {
	var s: String = this.SourceText;
	var StartIndex: int = 0;
	var i: int = Position;
	if(!(i < s.length())) {
		i = s.length() - 1;
	}
	while(i >= 0) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			StartIndex = i + 1;
			break;
		}
		i = i - 1;
	}
	var Line: String = "";
	i = StartIndex;
	while(i < Position) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			break;
		}
		if(ch == "\t") {
			Line = Line + "\t";
		}
		else {
			Line = Line + " ";
		}
		i = i + 1;
	}
	return Line + "^";
}

function FormatErrorHeader(this: ZSource, Error: String, Position: int, Message: String): String {
	return "(" + this.FileName + ":" + this.GetLineNumber(Position) + ") [" + Error +"] " + Message;
}

function FormatErrorMarker(this: ZSource, Error: String, Position: int, Message: String): String {
	var Line: String = this.GetLineText(Position);
	var Delim: String = "\n\t";
	if(Line.startsWith("\t") || Line.startsWith(" ")) {
		Delim = "\n";
	}
	var Header: String = this.FormatErrorHeader(Error, Position, Message);
	var Marker: String = this.GetLineMarker(Position);
	Message = Header + Delim + Line + Delim + Marker;
	return Message;
}

function GetCharAt(this: ZSource, n: int): String {
	if(0 <= n && n < this.SourceText.length()) {
		return LibZen_GetChar(this.SourceText, n);
	}
	return "\0";
}

function ZSourceBuilder(this: ZSourceBuilder, Template: ZSourceGenerator, Parent: ZSourceBuilder): ZSourceBuilder {
	this.Template = Template;
	this.Parent = Parent;
}

function Pop(this: ZSourceBuilder): ZSourceBuilder {
	return this.Parent;
}

function Clear(this: ZSourceBuilder): void {
	this.SourceList.clear(0);
}

function GetPosition(this: ZSourceBuilder): int {
	return this.SourceList.size();
}

function CopyString(this: ZSourceBuilder, BeginIndex: int, EndIndex: int): String {
	return LibZen_SourceBuilderToString(this, BeginIndex, EndIndex);
}

function Append(this: ZSourceBuilder, Text: String): void {
	this.SourceList.add(Text);
}

function AppendInt(this: ZSourceBuilder, Value: int): void {
	this.SourceList.add(String.valueOf(Value));
}

function AppendLineFeed(this: ZSourceBuilder): void {
	if (this.BufferedLineComment.length() > 0) {
		this.SourceList.add(this.BufferedLineComment);
		this.BufferedLineComment = "";
	}
	this.SourceList.add(this.Template.LineFeed);
}

function AppendLineFeed(this: ZSourceBuilder, AppendIndent: boolean): void {
	if (this.BufferedLineComment.length() > 0) {
		this.SourceList.add(this.BufferedLineComment);
		this.BufferedLineComment = "";
	}
	this.SourceList.add(this.Template.LineFeed);
	if(AppendIndent) {
		this.AppendIndent();
	}
}

function AppendWhiteSpace(this: ZSourceBuilder): void {
	if(this.SourceList.size() > 0) {
		var Last: String = this.SourceList[this.SourceList.size()-1];
		if(Last.endsWith(" ") || Last.endsWith("\n") || Last.endsWith("\t")) {
			return;
		}
	}
	this.SourceList.add(" ");
}

function AppendToken(this: ZSourceBuilder, Text: String): void {
	this.AppendWhiteSpace();
	this.SourceList.add(Text);
	this.AppendWhiteSpace();
}

function AppendBlockComment(this: ZSourceBuilder, Text: String): void {
	if (this.Template.BeginComment != null) {
		this.SourceList.add(this.Template.BeginComment);
		this.SourceList.add(Text);
		this.SourceList.add(this.Template.EndComment);
	} else if (this.Template.LineComment != null) {
		this.BufferedLineComment = this.BufferedLineComment + this.Template.LineComment + Text;
	}
}

function AppendCommentLine(this: ZSourceBuilder, Text: String): void {
	if (this.Template.LineComment == null) {
		this.SourceList.add(this.Template.BeginComment);
		this.SourceList.add(Text);
		this.SourceList.add(this.Template.EndComment);
	} else {
		this.SourceList.add(this.Template.LineComment);
		this.SourceList.add(Text);
	}
	this.SourceList.add(this.Template.LineFeed);
}

function Indent(this: ZSourceBuilder): void {
	this.IndentLevel = this.IndentLevel + 1;
	this.CurrentIndentString = null;
}

function UnIndent(this: ZSourceBuilder): void {
	this.IndentLevel = this.IndentLevel - 1;
	this.CurrentIndentString = null;
	LibZen_Assert(this.IndentLevel >= 0);
}

function GetIndentString(this: ZSourceBuilder): String {
	if (this.CurrentIndentString == null) {
		this.CurrentIndentString = LibZen_JoinStrings(this.Template.Tab, this.IndentLevel);
	}
	return this.CurrentIndentString;
}

function AppendIndent(this: ZSourceBuilder): void {
	this.SourceList.add(this.GetIndentString());
}

function AppendLineFeedIndent(this: ZSourceBuilder): void {
	this.SourceList.add(this.Template.LineFeed);
	this.SourceList.add(this.GetIndentString());
}

function IndentAndAppend(this: ZSourceBuilder, Text: String): void {
	this.SourceList.add(this.GetIndentString());
	this.SourceList.add(Text);
}

function AppendParamList(this: ZSourceBuilder, ParamList: ZListNode, BeginIdx: int, EndIdx: int): void {
	var i: int = BeginIdx;
	while(i < EndIdx) {
		if (i > BeginIdx) {
			this.Append(this.Template.Camma);
		}
		ParamList.GetListAt(i).Accept(this.Template);
		i = i + 1;
	}
}

function toString(this: ZSourceBuilder): String {
	return LibZen_SourceBuilderToString(this);
}

function AppendLine(this: ZSourceBuilder, Text: String): void {
	this.Append(Text);
	this.AppendLineFeed();
}

function ZSourceContext(this: ZSourceContext, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSourceContext {
	super(FileName, LineNumber, Source, TokenContext);
}

function GetCharCode(this: ZSourceContext): int {
	return LibZen_GetTokenMatrixIndex(LibZen_GetChar(this.SourceText, this.SourcePosition));
}

function GetPosition(this: ZSourceContext): int {
	return this.SourcePosition;
}

function HasChar(this: ZSourceContext): boolean {
	return this.SourceText.length() - this.SourcePosition > 0;
}

function ParseChar(this: ZSourceContext): String {
	return this.SourceText.charAt(this.SourcePosition);
}

function ParseChar(this: ZSourceContext, n: int): String {
	if(this.SourcePosition+n < this.SourceText.length()) {
		return this.SourceText.charAt(this.SourcePosition+n);
	}
	return "\0";
}

function MoveNext(this: ZSourceContext): void {
	this.SourcePosition = this.SourcePosition + 1;
}

function SkipWhiteSpace(this: ZSourceContext): void {
	while(this.HasChar()) {
		var ch: String = this.ParseChar();
		if(ch != " " && ch != "\t") {
			break;
		}
		this.MoveNext();
	}
}

function FoundIndent(this: ZSourceContext, StartIndex: int, EndIndex: int): void {
	var Token: ZToken = new ZIndentToken(this, StartIndex, EndIndex);
	this.SourcePosition = EndIndex;
	this.TokenContext.TokenList.add(Token);
}

function Tokenize(this: ZSourceContext, StartIndex: int, EndIndex: int): void {
	this.SourcePosition = EndIndex;
	if(StartIndex < EndIndex && EndIndex <= this.SourceText.length()) {
		var Token: ZToken = new ZToken(this, StartIndex, EndIndex);
		this.TokenContext.TokenList.add(Token);
	}
}

function Tokenize(this: ZSourceContext, PatternName: String, StartIndex: int, EndIndex: int): void {
	this.SourcePosition = EndIndex;
	if(StartIndex <= EndIndex && EndIndex <= this.SourceText.length()) {
		ZSyntax Pattern = this.TokenContext.NameSpace.GetSyntaxPattern(PatternName);
		if(Pattern == null) {
			var Token: ZToken = new ZToken(this, StartIndex, EndIndex);
			ZLogger_LogInfo(Token, "unregistered token pattern: " + PatternName);
			this.TokenContext.TokenList.add(Token);
		}
		else {
			var Token: ZToken = new ZPatternToken(this, StartIndex, EndIndex, Pattern);
			this.TokenContext.TokenList.add(Token);
		}
	}
}

function IsDefinedSyntax(this: ZSourceContext, StartIndex: int, EndIndex: int): boolean {
	if(EndIndex < this.SourceText.length()) {
		var NameSpace: ZNameSpace = this.TokenContext.NameSpace;
		var Token: String = this.SourceText.substring(StartIndex, EndIndex);
		var Pattern: ZSyntax = NameSpace.GetRightSyntaxPattern(Token);
		if(Pattern != null) {
			return true;
		}
	}
	return false;
}

function TokenizeDefinedSymbol(this: ZSourceContext, StartIndex: int): void {
	var EndIndex: int = StartIndex + 2;
	while(this.IsDefinedSyntax(StartIndex, EndIndex)) {
		EndIndex = EndIndex + 1;
	}
	this.Tokenize(StartIndex, EndIndex-1);
}

function ApplyTokenFunc(this: ZSourceContext, TokenFunc: ZTokenFunc): void {
	var RollbackPosition: int = this.SourcePosition;
	while(TokenFunc != null) {
		this.SourcePosition = RollbackPosition;
		if(LibZen.ApplyTokenFunc(TokenFunc.Func, this)) {
			return;
		}
		TokenFunc = TokenFunc.ParentFunc;
	}
	this.TokenizeDefinedSymbol(RollbackPosition);
}

function DoTokenize(this: ZSourceContext): boolean {
	var TokenSize: int = this.TokenContext.TokenList.size();
	var CheckPosition: int = this.SourcePosition;
	while(this.HasChar()) {
		var CharCode: int = this.GetCharCode();
		var TokenFunc: ZTokenFunc = this.TokenContext.NameSpace.GetTokenFunc(CharCode);
		this.ApplyTokenFunc(TokenFunc);
		if(this.TokenContext.TokenList.size() > TokenSize) {
			break;
		}
		if(this.SourcePosition == CheckPosition) {
			LibZen_PrintLine("Buggy TokenFunc: " + TokenFunc);
			this.MoveNext();
		}
	}
	if(this.TokenContext.TokenList.size() > TokenSize) {
		return true;
	}
	return false;
}

function LogWarning(this: ZSourceContext, Position: int, Message: String): void {
	this.Logger.Report(this.FormatErrorMarker("warning", Position, Message));
}

function ZSourceMacro(this: ZSourceMacro, FuncName: String, FuncType: ZFuncType, Macro: String): ZSourceMacro {
	super(FuncName, FuncType);
	this.Macro = Macro;
}

function ZSymbolEntry(this: ZSymbolEntry, Parent: ZSymbolEntry, Node: ZNode): ZSymbolEntry {
	this.Parent = Parent;
	this.Node = Node;
}

function ZSyntax(this: ZSyntax, NameSpace: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): ZSyntax {
	this.PackageNameSpace = NameSpace;
	this.PatternName = PatternName;
	this.MatchFunc = MatchFunc;
}

function toString(this: ZSyntax): String {
	return this.PatternName + "{" + this.MatchFunc + "}";
}

function IsBinaryOperator(this: ZSyntax): boolean {
	return LibZen_IsFlag(this.SyntaxFlag, ZSyntax_BinaryOperator);
}

function IsRightJoin(this: ZSyntax, Right: ZSyntax): boolean {
	var left: int = this.SyntaxFlag;
	var right: int = Right.SyntaxFlag;
	return (left < right || (left == right && !LibZen_IsFlag(left, ZSyntax_LeftJoin) && !LibZen_IsFlag(right, ZSyntax_LeftJoin)));
}

function EqualsName(this: ZSyntax, Name: String): boolean {
	return LibZen_EqualsString(this.PatternName, Name);
}

function ZToken(this: ZToken, Source: ZSource, StartIndex: int, EndIndex: int): ZToken {
	this.Source = Source;
	this.StartIndex = StartIndex;
	this.EndIndex = EndIndex;
}

function GetFileName(this: ZToken): String {
	return this.Source.FileName;
}

function GetLineNumber(this: ZToken): int {
	return this.Source.GetLineNumber(this.StartIndex);
}

function GetChar(this: ZToken): String {
	if(this.Source != null) {
		return this.Source.SourceText.charAt(this.StartIndex);
	}
	return "\0";
}

function GetText(this: ZToken): String {
	if(this.Source != null) {
		return this.Source.SourceText.substring(this.StartIndex, this.EndIndex);
	}
	return "";
}

function toString(this: ZToken): String {
	char ch = this.Source.GetCharAt(this.StartIndex-1);
	if(ch == "\"") {
		return "\"" + this.GetText() + "\"";
	}
	return this.GetText();
}

function EqualsText(this: ZToken, Text: String): boolean {
	if(Text.length() == this.EndIndex - this.StartIndex) {
		var s: String = this.Source.SourceText;
		var i: int = 0;
		while(i < Text.length()) {
			if(s.charAt(this.StartIndex+i) != Text.charAt(i)) {
				return false;
			}
			i = i + 1;
		}
		return true;
	}
	return false;
}

function StartsWith(this: ZToken, Text: String): boolean {
	if(Text.length() <= this.EndIndex - this.StartIndex) {
		var s: String = this.Source.SourceText;
		var i: int = 0;
		while(i < Text.length()) {
			if(s.charAt(this.StartIndex+i) != Text.charAt(i)) {
				return false;
			}
			i = i + 1;
		}
		return true;
	}
	return false;
}

function IsNull(this: ZToken): boolean {
	return (this == ZToken.NullToken);
}

function IsIndent(this: ZToken): boolean {
	return this instanceof ZIndentToken;
}

function IsNextWhiteSpace(this: ZToken): boolean {
	char ch = this.Source.GetCharAt(this.EndIndex);
	if(ch == " " || ch == "\t" || ch == "\n") {
		return true;
	}
	return false;
}

function IsNameSymbol(this: ZToken): boolean {
	char ch = this.Source.GetCharAt(this.StartIndex);
	return LibZen_IsSymbol(ch);
}

function GetIndentSize(this: ZToken): int {
	if(this.Source != null) {
		return this.Source.CountIndentSize(this.Source.GetLineHeadPosition(this.StartIndex));
	}
	return 0;
}

function ZTokenContext(this: ZTokenContext, Generator: ZGenerator, NameSpace: ZNameSpace, FileName: String, LineNumber: int, SourceText: String): ZTokenContext {
	this.Generator = Generator;
	this.NameSpace = NameSpace;
	this.Source = new ZSourceContext(FileName, LineNumber, SourceText, this);
}

function SetParseFlag(this: ZTokenContext, AllowSkipIndent: boolean): boolean {
	boolean OldFlag = this.IsAllowSkipIndent;
	this.IsAllowSkipIndent = AllowSkipIndent;
	return OldFlag;
}

function GetBeforeToken(this: ZTokenContext): ZToken {
	var MovingPos: int = this.CurrentPosition - 1;
	while(MovingPos >= 0 && MovingPos < this.TokenList.size()) {
		var Token: ZToken = this.TokenList[MovingPos];
		if(!Token.IsIndent()) {
			return Token;
		}
		MovingPos = MovingPos - 1;
	}
	return this.LatestToken;
}

function CreateExpectedErrorNode(this: ZTokenContext, SourceToken: ZToken, ExpectedTokenText: String): ZNode {
	if(SourceToken == null || SourceToken.IsNull()) {
		SourceToken = this.GetBeforeToken();
		SourceToken = new ZToken(SourceToken.Source, SourceToken.EndIndex, SourceToken.EndIndex);
		return new ZErrorNode(null, SourceToken, ExpectedTokenText + " is expected");
	}
	return new ZErrorNode(null, SourceToken, ExpectedTokenText + " is expected");
}

function Vacume(this: ZTokenContext): void {
}

function MoveNext(this: ZTokenContext): void {
	this.CurrentPosition = this.CurrentPosition + 1;
}

function GetToken(this: ZTokenContext, EnforceMoveNext: boolean): ZToken {
	while(true) {
		if(!(this.CurrentPosition < this.TokenList.size())) {
			if(!this.Source.DoTokenize()) {
				break;
			}
		}
		var Token: ZToken = this.TokenList[this.CurrentPosition];
		if((this.IsAllowSkipIndent) && Token.IsIndent()) {
			this.CurrentPosition = this.CurrentPosition + 1;
		}
		else {
			this.LatestToken = Token;
			if(EnforceMoveNext) {
				this.CurrentPosition = this.CurrentPosition + 1;
			}
			return Token;
		}
	}
	return ZToken.NullToken;
}

function GetToken(this: ZTokenContext): ZToken {
	return this.GetToken(false);
}

function HasNext(this: ZTokenContext): boolean {
	return (this.GetToken() != ZToken.NullToken);
}

function SkipIndent(this: ZTokenContext): void {
	var Token: ZToken = this.GetToken();
	while(Token.IsIndent()) {
		this.CurrentPosition = this.CurrentPosition + 1;
		Token = this.GetToken();
	}
}

function SkipError(this: ZTokenContext, ErrorToken: ZToken): void {
	var StartIndex: int = ErrorToken.StartIndex;
	var EndIndex: int = ErrorToken.EndIndex;
	var length: int = ErrorToken.GetIndentSize();
	while(this.HasNext()) {
		var Token: ZToken = this.GetToken();
		EndIndex = Token.EndIndex;
		this.CurrentPosition = this.CurrentPosition + 1;
		if(Token instanceof ZIndentToken) {
			var ilength: int = Token.GetIndentSize();
			if(ilength <= length) {
				break;
			}
		}
	}
	if(StartIndex < EndIndex) {
		LibZen_PrintDebug("StartIdx="+StartIndex+", EndIndex="+EndIndex);
		LibZen_PrintDebug("skipped: \t" + ErrorToken.Source.SourceText.subSequence(StartIndex, EndIndex));
	}
}

function IsToken(this: ZTokenContext, TokenText: String): boolean {
	var Token: ZToken = this.GetToken();
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	return false;
}

function IsNewLineToken(this: ZTokenContext, TokenText: String): boolean {
	var RollbackPos: int = this.CurrentPosition;
	this.SkipIndent();
	var Token: ZToken = this.GetToken();
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	this.CurrentPosition = RollbackPos;
	return false;
}

function MatchToken(this: ZTokenContext, TokenText: String): boolean {
	var RollbackPos: int = this.CurrentPosition;
	var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	this.CurrentPosition = RollbackPos;
	return false;
}

function MatchNewLineToken(this: ZTokenContext, TokenText: String): boolean {
	var RollbackPos: int = this.CurrentPosition;
	this.SkipIndent();
	var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	this.CurrentPosition = RollbackPos;
	return false;
}

function ParseLargeToken(this: ZTokenContext): ZToken {
	var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
	if(Token.IsNextWhiteSpace()) {
		return Token;
	}
	var StartIndex: int = Token.StartIndex;
	var EndIndex: int = Token.EndIndex;
	while(this.HasNext() && !Token.IsNextWhiteSpace()) {
		var RollbackPosition: int = this.CurrentPosition;
		Token = this.GetToken(ZTokenContext.MoveNext);
		if(Token.IsIndent() || Token.EqualsText(";") || Token.EqualsText(",")) {
			this.CurrentPosition = RollbackPosition;
			break;
		}
		EndIndex = Token.EndIndex;
	}
	return new ZToken(Token.Source, StartIndex, EndIndex);
}

function MatchToken(this: ZTokenContext, ParentNode: ZNode, TokenText: String, IsRequired: boolean): ZNode {
	if(!ParentNode.IsErrorNode()) {
		var RollbackPosition: int = this.CurrentPosition;
		var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
		if(Token.EqualsText(TokenText)) {
			if(ParentNode.SourceToken == null) {
				ParentNode.SourceToken = Token;
			}
		}
		else {
			if(IsRequired) {
				return this.CreateExpectedErrorNode(Token, TokenText);
			}
			else {
				this.CurrentPosition = RollbackPosition;
			}
		}
	}
	return ParentNode;
}

function GetApplyingSyntax(this: ZTokenContext): ZSyntax {
	return this.ApplyingPattern;
}

function ApplyMatchPattern(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, Pattern: ZSyntax, IsRequired: boolean): ZNode {
	var RollbackPosition: int = this.CurrentPosition;
	var CurrentPattern: ZSyntax = Pattern;
	var TopToken: ZToken = this.GetToken();
	var ParsedNode: ZNode = null;
	while(CurrentPattern != null) {
		var Remembered: boolean = this.IsAllowSkipIndent;
		this.CurrentPosition = RollbackPosition;
		this.ApplyingPattern  = CurrentPattern;
		ParsedNode = LibZen.ApplyMatchFunc(CurrentPattern.MatchFunc, ParentNode, this, LeftNode);
		assert(ParsedNode != ParentNode);
		this.ApplyingPattern  = null;
		this.IsAllowSkipIndent = Remembered;
		if(ParsedNode != null && !ParsedNode.IsErrorNode()) {
			return ParsedNode;
		}
		CurrentPattern = CurrentPattern.ParentPattern;
	}
	if(!IsRequired) {
		this.CurrentPosition = RollbackPosition;
		return null;
	}
	if(this.CurrentPosition == RollbackPosition) {
		System.out.println("infinite looping" + RollbackPosition + " Token=" + TopToken + " ParsedNode=" + ParsedNode);
		assert(this.CurrentPosition != RollbackPosition);
	}
	if(ParsedNode == null) {
		ParsedNode = this.CreateExpectedErrorNode(TopToken, Pattern.PatternName);
	}
	return ParsedNode;
}

function ParsePatternAfter(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, PatternName: String, IsRequired: boolean): ZNode {
	var Pattern: ZSyntax = this.NameSpace.GetSyntaxPattern(PatternName);
	var ParsedNode: ZNode = this.ApplyMatchPattern(ParentNode, LeftNode, Pattern, IsRequired);
	return ParsedNode;
}

function ParsePattern(this: ZTokenContext, ParentNode: ZNode, PatternName: String, IsRequired: boolean): ZNode {
	return this.ParsePatternAfter(ParentNode, null, PatternName, IsRequired);
}

function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean, AllowSkipIndent: boolean): ZNode {
	if(!ParentNode.IsErrorNode()) {
		var Rememberd: boolean = this.SetParseFlag(AllowSkipIndent);
		var ParsedNode: ZNode = this.ParsePattern(ParentNode, PatternName, IsRequired);
		this.SetParseFlag(Rememberd);
		if(ParsedNode != null) {
			if(Index == ZNode_NestedAppendIndex) {
				if(!(ParsedNode instanceof ZEmptyNode)) {
					ParentNode.Set(ZNode_AppendIndex, ParsedNode);
				}
				if(ParsedNode instanceof ZBlockNode || ParsedNode.IsErrorNode()) {
					return ParsedNode;
				}
			}
			if(ParsedNode.IsErrorNode()) {
				return ParsedNode;
			}
			else {
				if(!(ParsedNode instanceof ZEmptyNode)) {
					ParentNode.Set(Index, ParsedNode);
				}
			}
		}
	}
	return ParentNode;
}

function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean): ZNode {
	return this.MatchPattern(ParentNode, Index, PatternName, IsRequired, ZTokenContext.NotAllowSkipIndent);
}

function MatchOptionaPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, AllowNewLine: boolean, TokenText: String, PatternName: String): ZNode {
	if(!ParentNode.IsErrorNode()) {
		if(this.MatchToken(TokenText)) {
			return this.MatchPattern(ParentNode, Index, PatternName, ZTokenContext.Optional, ZTokenContext.NotAllowSkipIndent);
		}
	}
	return ParentNode;
}

function MatchNtimes(this: ZTokenContext, ParentNode: ZNode, StartToken: String, PatternName: String, DelimToken: String, StopToken: String): ZNode {
	var Rememberd: boolean = this.SetParseFlag(true);
	var IsRequired: boolean =   ZTokenContext.Optional;
	if(StartToken != null) {
		ParentNode = this.MatchToken(ParentNode, StartToken, ZTokenContext.Required);
	}
	while(!ParentNode.IsErrorNode()) {
		if(StopToken != null) {
			var Token: ZToken = this.GetToken();
			if(Token.EqualsText(StopToken)) {
				break;
			}
			IsRequired = ZTokenContext.Required;
		}
		var ParsedNode: ZNode = this.ParsePattern(ParentNode, PatternName, IsRequired);
		if(ParsedNode == null) {
			break;
		}
		if(ParsedNode.IsErrorNode()) {
			return ParsedNode;
		}
		if(!(ParsedNode instanceof ZEmptyNode)) {
			ParentNode.Set(ZNode_AppendIndex, ParsedNode);
		}
		if(DelimToken != null) {
			if(!this.MatchToken(DelimToken)) {
				break;
			}
		}
	}
	if(StopToken != null) {
		ParentNode = this.MatchToken(ParentNode, StopToken, ZTokenContext.Required);
	}
	this.SetParseFlag(Rememberd);
	return ParentNode;
}

function StartsWithToken(this: ZTokenContext, TokenText: String): boolean {
	var Token: ZToken = this.GetToken();
	if(Token.EqualsText(TokenText)) {
		this.CurrentPosition += 1;
		return true;
	}
	if(Token.StartsWith(TokenText)) {
		Token = new ZToken(Token.Source, Token.StartIndex + TokenText.length(), Token.EndIndex);
		this.CurrentPosition += 1;
		this.TokenList.add(this.CurrentPosition, Token);
		return true;
	}
	return false;
}

function SkipEmptyStatement(this: ZTokenContext): void {
	while(this.HasNext()) {
		var Token: ZToken = this.GetToken();
		if(Token.IsIndent() || Token.EqualsText(";")) {
			this.CurrentPosition += 1;
			continue;
		}
		break;
	}
}

function Dump(this: ZTokenContext): void {
	var Position: int = this.CurrentPosition;
	for(; Position < this.TokenList.size(); Position += 1) {
		var Token: ZToken = this.TokenList[Position];
		var DumpedToken: String = this.CurrentPosition == Position ? "*[" : "[";
		DumpedToken = DumpedToken + Position+"] " + Token.toString();
		LibZen_PrintDebug(DumpedToken);
	}
}

function ZTokenFunc(this: ZTokenFunc, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc {
	this.Func = Func;
	this.ParentFunc = Parent;
}

function toString(this: ZTokenFunc): String {
	return this.Func.toString();
}

function ZVariable(this: ZVariable, Parent: ZSymbolEntry, FuncNode: ZFunctionNode, VarFlag: int, VarType: ZType, VarName: String, SourceToken: ZToken): ZVariable {
	super(Parent, FuncNode);
	this.VarFlag = VarFlag;
	this.VarType = VarType;
	this.VarName = VarName;
	this.SourceToken = SourceToken;
	this.VarUniqueIndex = FuncNode.GetVarIndex();
	this.UsedCount = 0;
	this.DefCount  = 1;
}

function IsCaptured(this: ZVariable, CurrentFunctionNode: ZFunctionNode): boolean {
	if(CurrentFunctionNode == this.Node) {
		return false;
	}
	return true;
}

function Defined(this: ZVariable): void {
	this.DefCount = this.DefCount + 1;
}

function Used(this: ZVariable): void {
	this.UsedCount = this.UsedCount + 1;
}

function ZClassType(this: ZClassType, ShortName: String, RefType: ZType): ZClassType {
	super(ZTypeFlag_OpenType|ZTypeFlag_UniqueType, ShortName, RefType);
	if(RefType instanceof ZClassType) {
		this.ResetSuperType((ZClassType)RefType);
	}
}

function ResetSuperType(this: ZClassType, SuperClass: ZClassType): void {
	this.RefType = SuperClass;
	if(SuperClass.FieldList != null) {
		this.FieldList = [];
		var i: int = 0;
		while(i < SuperClass.FieldList.size()) {
			var Field: ZClassField = SuperClass.FieldList[i];
			this.FieldList.add(Field);
			i = i + 1;
		}
	}
}

function GetFieldSize(this: ZClassType): int {
	if(this.FieldList != null) {
		return this.FieldList.size();
	}
	return 0;
}

function GetFieldAt(this: ZClassType, Index: int): ZClassField {
	return this.FieldList[Index];
}

function HasField(this: ZClassType, FieldName: String): boolean {
	if(this.FieldList != null) {
		var i: int = 0;
		while(i < this.FieldList.size()) {
			if(LibZen_EqualsString(FieldName, this.FieldList[i].FieldName)) {
				return true;
			}
			i = i + 1;
		}
	}
	return false;
}

function GetFieldType(this: ZClassType, FieldName: String, DefaultType: ZType): ZType {
	if(this.FieldList != null) {
		var i: int = 0;
		while(i < this.FieldList.size()) {
			var Field: ZClassField = this.FieldList[i];
			if(LibZen_EqualsString(FieldName, Field.FieldName)) {
				return Field.FieldType;
			}
			i = i + 1;
		}
	}
	return DefaultType;
}

function AppendField(this: ZClassType, FieldType: ZType, FieldName: String, SourceToken: ZToken): ZClassField {
	assert(!FieldType.IsVarType());
	if(this.FieldList == null) {
		this.FieldList = [];
	}
	var ClassField: ZClassField = new ZClassField(this, FieldName, FieldType, SourceToken);
	this.FieldList.add(ClassField);
	return ClassField;
}

function ZFuncType(this: ZFuncType, ShortName: String, UniqueTypeParams: ZType[]): ZFuncType {
	super(ZTypeFlag_UniqueType, ShortName, ZTypeVarType);
	if(UniqueTypeParams == null) {
		this.TypeParams = new ZType[1];
		this.TypeParams[0] = ZTypeVarType;
	}
	else {
		this.TypeParams = UniqueTypeParams;
	}
	var i: int = 0;
	while(i < LibZen_Size(this.TypeParams)) {
		if(this.TypeParams[i].IsVarType()) {
			this.HasUnknownType = true;
		}
		if(this.TypeParams[i].IsGreekType()) {
			this.HasGreekType = true;
		}
		i = i + 1;
	}
}

function IsFuncType(this: ZFuncType): boolean {
	return true;
}

function IsVarType(this: ZFuncType): boolean {
	return this.HasUnknownType;
}

function IsGreekType(this: ZFuncType): boolean {
	return this.HasGreekType;
}

function GetRealType(this: ZFuncType, Greek: ZType[]): ZType {
	if(this.HasGreekType) {
		var TypeList: ZType[] = [];
		var i: int = 0;
		while(i < LibZen_Size(this.TypeParams)) {
			TypeList.add(this.TypeParams[i].GetRealType(Greek));
			i = i + 1;
		}
		return ZTypePool_LookupFuncType(TypeList);
	}
	return this;
}

function AcceptValueType(this: ZFuncType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean {
	if(ValueType.IsFuncType() && ValueType.GetParamSize() == this.GetParamSize()) {
		var i: int = 0;
		while(i < LibZen_Size(this.TypeParams)) {
			if(!this.TypeParams[i].AcceptValueType(ValueType.GetParamType(i), true, Greek)) {
				return false;
			}
			i = i + 1;
		}
		return true;
	}
	return false;
}

function StringfySignature(this: ZFuncType, FuncName: String): String {
	return ZFunc_StringfySignature(FuncName, this.GetFuncParamSize(), this.GetRecvType());
}

function GetBaseType(this: ZFuncType): ZType {
	return ZTypeFuncType;
}

function GetParamSize(this: ZFuncType): int {
	return LibZen_Size(this.TypeParams);
}

function GetParamType(this: ZFuncType, Index: int): ZType {
	return this.TypeParams[Index];
}

function GetReturnType(this: ZFuncType): ZType {
	return this.TypeParams[0];
}

function GetFuncParamSize(this: ZFuncType): int {
	return LibZen_Size(this.TypeParams) - 1;
}

function GetRecvType(this: ZFuncType): ZType {
	if(LibZen_Size(this.TypeParams) == 1) {
		return ZTypeVoidType;
	}
	return this.TypeParams[1];
}

function GetFuncParamType(this: ZFuncType, Index: int): ZType {
	return this.TypeParams[Index+1];
}

function NewMethodFuncType(this: ZFuncType, RecvType: ZType): ZFuncType {
	var TypeList: ZType[] = [];
	TypeList.add(this.GetReturnType());
	TypeList.add(RecvType);
	var i: int = 0;
	while(i < this.GetFuncParamSize()) {
		TypeList.add(this.GetFuncParamType(i));
		i = i + 1;
	}
	return ZTypePool_LookupFuncType(TypeList);
}

function AcceptAsFieldFunc(this: ZFuncType, FuncType: ZFuncType): boolean {
	if(FuncType.GetFuncParamSize() == this.GetFuncParamSize() && FuncType.GetReturnType().Equals(this.GetReturnType())) {
		for(int i = 1; i < FuncType.GetFuncParamSize(); i++) {
			if(!FuncType.GetFuncParamType(i).Equals(this.GetFuncParamType(i))) {
				return false;
			}
		}
	}
	return true;
}

function ZGeneric1Type(this: ZGeneric1Type, TypeFlag: int, ShortName: String, BaseType: ZType, ParamType: ZType): ZGeneric1Type {
	super(TypeFlag, ShortName, ZTypeVarType);
	this.BaseType = BaseType;
	if(this.BaseType == null) {
		this.BaseType = this;
	}
	this.ParamType = ParamType;
}

function GetSuperType(this: ZGeneric1Type): ZType {
	return this.BaseType == this ? this.RefType : this.BaseType;
}

function GetBaseType(this: ZGeneric1Type): ZType {
	return this.BaseType;
}

function GetParamSize(this: ZGeneric1Type): int {
	return 1;
}

function GetParamType(this: ZGeneric1Type, Index: int): ZType {
	if(Index == 0) {
		return this.ParamType;
	}
	return null;
}

function IsGreekType(this: ZGeneric1Type): boolean {
	return (this.ParamType.IsGreekType());
}

function GetRealType(this: ZGeneric1Type, Greek: ZType[]): ZType {
	if(this.ParamType.IsGreekType()) {
		return ZTypePool_GetGenericType1(this.BaseType, this.ParamType.GetRealType(Greek));
	}
	return this.GetRealType();
}

function AcceptValueType(this: ZGeneric1Type, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean {
	if(this.BaseType == ValueType.GetBaseType() && ValueType.GetParamSize() == 1) {
		return this.ParamType.AcceptValueType(ValueType.GetParamType(0), true, Greek);
	}
	return false;
}

function ZGreekType(this: ZGreekType, GreekId: int): ZGreekType {
	super(ZTypeFlag_UniqueType, LibZen_GreekNames[GreekId], ZTypeVarType);
	this.GreekId = GreekId;
}

function IsGreekType(this: ZGreekType): boolean {
	return true;
}

function GetRealType(this: ZGreekType, Greek: ZType[]): ZType {
	if(Greek[this.GreekId] == null) {
		return ZTypeVarType;
	}
	return Greek[this.GreekId];
}

function AcceptValueType(this: ZGreekType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean {
	if(Greek[this.GreekId] == null) {
		if(ValueType.IsVarType()) {
			return true;
		}
		Greek[this.GreekId] = ValueType;
		return true;
	}
	else {
		return Greek[this.GreekId].AcceptValueType(ValueType, ExactMatch, Greek);
	}
}

function println(this: ZTypeChecker, string: String): void {
	LibZen_PrintDebug("debug: " + string);
}

function FIXME(this: ZTypeChecker, string: String): void {
	LibZen_PrintDebug("FIXME: " + string);
}

function ZTypeChecker(this: ZTypeChecker, Generator: ZGenerator): ZTypeChecker {
	this.Generator = Generator;
	this.Logger = Generator.Logger;
	this.StackedContextType = null;
	this.ReturnedNode = null;
	this.StoppedVisitor = false;
	this.VarScope = new ZVarScope(null, this.Logger, null);
}

function EnableVisitor(this: ZTypeChecker): void {
	this.StoppedVisitor = false;
}

function StopVisitor(this: ZTypeChecker): void {
	this.StoppedVisitor = true;
}

function IsVisitable(this: ZTypeChecker): boolean {
	return !this.StoppedVisitor;
}

function GetContextType(this: ZTypeChecker): ZType {
	return this.StackedContextType;
}

function VisitTypeChecker(this: ZTypeChecker, Node: ZNode, ContextType: ZType): ZNode {
	var ParentNode: ZNode = Node.ParentNode;
	this.StackedContextType = ContextType;
	this.ReturnedNode = null;
	Node.Accept(this);
	if(this.ReturnedNode == null) {  /* debug check */
		this.FIXME("!! returns no value: " + Node);
	}
	else {
		Node = this.ReturnedNode;
	}
	if(ParentNode != Node.ParentNode && ParentNode != null) {
		ParentNode.SetChild(Node);
	}
	this.VarScope.CheckVarNode(ContextType, Node);
	return Node;
}

function CreateStupidCast(this: ZTypeChecker, Requested: ZType, Node: ZNode): ZNode {
	ZNode ErrorNode = new ZErrorNode(Node, "type error: requested = " +  Requested + ", given = " + Node.Type);
	ErrorNode.Type = Requested;
	return ErrorNode;
}

function EnforceNodeType(this: ZTypeChecker, Node: ZNode, EnforceType: ZType): ZNode {
	ZFunc Func = this.Generator.GetConverterFunc(Node.Type, ZTypeStringType);
	if(Func instanceof ZMacroFunc) {
		var MacroNode: ZMacroNode = new ZMacroNode(Node.ParentNode, null, (ZMacroFunc)Func);
		MacroNode.Append(Node);
		MacroNode.Type = EnforceType;
		return MacroNode;
	}
	else if(Func != null) {
		var MacroNode: ZFuncCallNode = new ZFuncCallNode(Node.ParentNode, Func.FuncName, Func.GetFuncType());
		MacroNode.Append(Node);
		MacroNode.Type = EnforceType;
		return MacroNode;
	}
	return this.CreateStupidCast(EnforceType, Node);
}

function TypeCheckImpl(this: ZTypeChecker, Node: ZNode, ContextType: ZType, TypeCheckPolicy: int): ZNode {
	if(Node.IsErrorNode()) {
		if(!ContextType.IsVarType()) {
			Node.Type = ContextType;
		}
		return Node;
	}
	if(Node.IsUntyped() || ContextType.IsVarType() || LibZen_IsFlag(TypeCheckPolicy, _NoCheckPolicy)) {
		return Node;
	}
	if(Node.Type == ContextType || ContextType.Accept(Node.Type)) {
		return Node;
	}
	if(ContextType.IsVoidType() && !Node.Type.IsVoidType()) {
		return new ZCastNode(Node.ParentNode, ZTypeVoidType, Node);
	}
	if(ContextType.IsFloatType() && Node.Type.IsIntType()) {
		return this.EnforceNodeType(Node, ContextType);
	}
	if(ContextType.IsIntType() && Node.Type.IsFloatType()) {
		return this.EnforceNodeType(Node, ContextType);
	}
	return this.CreateStupidCast(ContextType, Node);
}

function VisitTypeChecker(this: ZTypeChecker, Node: ZNode, ContextType: ZType, TypeCheckPolicy: int): ZNode {
	if(this.IsVisitable() && Node != null) {
		if(Node.HasUntypedNode()) {
			Node = Node.VisitTypeChecker(this, ContextType);
		}
		Node = this.TypeCheckImpl(Node, ContextType, TypeCheckPolicy);
		this.VarScope.CheckVarNode(ContextType, Node);
	}
	this.ReturnedNode = null;
	return Node;
}

function TryType(this: ZTypeChecker, Node: ZNode, ContextType: ZType): ZNode {
	return this.VisitTypeChecker(Node, ContextType, _NoCheckPolicy);
}

function TryTypeAt(this: ZTypeChecker, Node: ZNode, Index: int, ContextType: ZType): void {
	Node.Set(Index, this.VisitTypeChecker(Node.AST[Index], ContextType, _NoCheckPolicy));
}

function CheckType(this: ZTypeChecker, Node: ZNode, ContextType: ZType): ZNode {
	return this.VisitTypeChecker(Node, ContextType, _DefaultTypeCheckPolicy);
}

function CheckTypeAt(this: ZTypeChecker, Node: ZNode, Index: int, ContextType: ZType): void {
	Node.Set(Index, this.VisitTypeChecker(Node.AST[Index], ContextType, _DefaultTypeCheckPolicy));
}

function TypeCheckNodeList(this: ZTypeChecker, List: ZListNode): boolean {
	if(this.IsVisitable()) {
		var AllTyped: boolean = true;
		var i: int = 0;
		while(i < List.GetListSize()) {
			ZNode SubNode = List.GetListAt(i);
			SubNode = this.CheckType(SubNode, ZTypeVarType);
			List.SetListAt(i, SubNode);
			if(SubNode.IsUntyped()) {
				AllTyped = false;
			}
			i = i + 1;
		}
		return AllTyped;
	}
	return false;
}

function Return(this: ZTypeChecker, Node: ZNode): void {
	if(this.ReturnedNode != null) {
		this.FIXME("previous returned node " + Node);
	}
	this.ReturnedNode = Node;
}

function TypedNode(this: ZTypeChecker, Node: ZNode, Type: ZType): void {
	Node.Type = Type.GetRealType();
	if(this.ReturnedNode != null) {
		this.FIXME("previous returned node " + Node);
	}
	this.ReturnedNode = Node;
}

function ReturnErrorNode(this: ZTypeChecker, Node: ZNode, ErrorToken: ZToken, Message: String): void {
	if(ErrorToken == null) {
		ErrorToken = Node.SourceToken;
	}
	this.Return(new ZErrorNode(Node.ParentNode, ErrorToken, Message));
}

function Todo(this: ZTypeChecker, Node: ZNode): void {
	ZLogger_LogWarning(Node.SourceToken, "TODO: unimplemented type checker node: " + Node.getClass().getSimpleName());
	Node.Type = ZTypeVarType;
	this.ReturnedNode = Node;
}

function VisitErrorNode(this: ZTypeChecker, Node: ZErrorNode): void {
	var ContextType: ZType = this.GetContextType();
	if(!ContextType.IsVarType()) {
		this.TypedNode(Node, ContextType);
	}
	else {
		this.Return(Node);
	}
}

function VisitExtendedNode(this: ZTypeChecker, Node: ZNode): void {
	var ContextType: ZType = this.GetContextType();
	var DeNode: ZNode = Node.DeSugar(this.Generator);
	if(!DeNode.IsErrorNode()) {
		this.Return(this.CheckType(DeNode, ContextType));
	}
	else {
		this.TypedNode(DeNode, ContextType);
	}
}

function VisitSugarNode(this: ZTypeChecker, Node: ZSugarNode): void {
	var ContextType: ZType = this.GetContextType();
	this.CheckTypeAt(Node, ZSugarNode_DeSugar, ContextType);
	this.TypedNode(Node, Node.GetAstType(ZSugarNode_DeSugar));
}

function ZAnnotationNode(this: ZAnnotationNode, ParentNode: ZNode, Token: ZToken, Anno: Map<any>): ZAnnotationNode {
	super(ParentNode, Token, 0);
}

function IsBreakingBlock(this: ZAnnotationNode): boolean {
	return this.AnnotatedNode.IsBreakingBlock();
}

function Accept(this: ZAnnotationNode, Visitor: ZVisitor): void {
	this.AnnotatedNode.Accept(Visitor);
}

function ZAssertNode(this: ZAssertNode, ParentNode: ZNode): ZAssertNode {
	super(ParentNode, null, 1);
}

function DeSugar(this: ZAssertNode, Generator: ZGenerator): ZSugarNode {
	ZMacroFunc Func = Generator.GetMacroFunc("assert", ZTypeBooleanType, 2);
	ZMacroNode MacroNode = new ZMacroNode(this.ParentNode, this.SourceToken, Func);
	MacroNode.Append(this.AST[ZAssertNode_Expr]);
	MacroNode.Append(new ZStringNode(MacroNode, null, this.GetSourceLocation()));
	return new ZSugarNode(this, MacroNode);
}

function ZBinaryNode(this: ZBinaryNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZBinaryNode {
	super(ParentNode, SourceToken, 2);
	this.Set(ZBinaryNode_Left, Left);
	assert(Pattern != null);
	this.Pattern = Pattern;
}

function IsRightJoin(this: ZBinaryNode, Node: ZNode): boolean {
	if(Node instanceof ZBinaryNode) {
		return this.Pattern.IsRightJoin(((ZBinaryNode)Node).Pattern);
	}
	return false;
}

function RightJoin(this: ZBinaryNode, ParentNode: ZNode, RightNode: ZBinaryNode): ZNode {
	var RightLeftNode: ZNode = RightNode.AST[ZBinaryNode_Left];
	if(this.IsRightJoin(RightLeftNode)) {
		RightNode.Set(ZBinaryNode_Left, this.RightJoin(ParentNode, (ZBinaryNode) RightLeftNode));
	}
	else {
		RightNode.Set(ZBinaryNode_Left, this);
		this.Set(ZBinaryNode_Right, RightLeftNode);
	}
	return RightNode;
}

function AppendParsedRightNode(this: ZBinaryNode, ParentNode: ZNode, TokenContext: ZTokenContext): ZNode {
	var RightNode: ZNode = TokenContext.ParsePattern(ParentNode, "$Expression$", ZTokenContext.Required);
	if(RightNode.IsErrorNode()) {
		return RightNode;
	}
	if(this.IsRightJoin(RightNode)) {
		return this.RightJoin(ParentNode, (ZBinaryNode) RightNode);
	}
	this.Set(ZBinaryNode_Right, RightNode);
	return this;
}

function TryMacroNode(this: ZBinaryNode, Generator: ZGenerator): ZNode {
	if(!this.GetAstType(ZBinaryNode_Left).IsVarType() && !this.GetAstType(ZBinaryNode_Right).IsVarType()) {
		var Op: String = this.SourceToken.GetText();
		var Func: ZFunc = Generator.GetDefinedFunc(Op, this.GetAstType(ZBinaryNode_Left), 2);
		if(Func instanceof ZMacroFunc) {
			ZMacroNode MacroNode = new ZMacroNode(this.ParentNode, this.SourceToken, (ZMacroFunc)Func);
			MacroNode.Append(this.AST[ZBinaryNode_Left]);
			MacroNode.Append(this.AST[ZBinaryNode_Right]);
			return MacroNode;
		}
	}
	return this;
}

function Accept(this: ZBinaryNode, Visitor: ZVisitor): void {
	Visitor.VisitBinaryNode(this);
}

function ZBreakNode(this: ZBreakNode, ParentNode: ZNode): ZBreakNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZBreakNode, Visitor: ZVisitor): void {
	Visitor.VisitBreakNode(this);
}

function ZCastNode(this: ZCastNode, ParentNode: ZNode, CastType: ZType, Node: ZNode): ZCastNode {
	super(ParentNode, null, 1);
	this.Type = CastType;
	if(Node != null) {
		this.Set(ZCastNode_Expr, Node);
	}
}

function Accept(this: ZCastNode, Visitor: ZVisitor): void {
	Visitor.VisitCastNode(this);
}

function ToFuncCallNode(this: ZCastNode, Func: ZFunc): ZListNode {
	if(Func instanceof ZMacroFunc) {
		ZMacroNode FuncNode = new ZMacroNode(this.ParentNode, this.SourceToken, (ZMacroFunc)Func);
		FuncNode.Append(this.AST[ZCastNode_Expr]);
		return FuncNode;
	}
	else {
		ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, Func.FuncName, Func.GetFuncType());
		FuncNode.SourceToken = this.SourceToken;
		FuncNode.Append(this.AST[ZCastNode_Expr]);
		return FuncNode;
	}
}

function ZCatchNode(this: ZCatchNode, ParentNode: ZNode): ZCatchNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZCatchNode, TypeToken: ZToken, Type: ZType): void {
	this.ExceptionType = Type;
}

function SetNameInfo(this: ZCatchNode, NameToken: ZToken, Name: String): void {
	this.ExceptionName = Name;
	this.NameToken = NameToken;
}

function ZComparatorNode(this: ZComparatorNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZComparatorNode {
	super(ParentNode, SourceToken, Left, Pattern);
}

function Accept(this: ZComparatorNode, Visitor: ZVisitor): void {
	Visitor.VisitComparatorNode(this);
}

function ZConstNode(this: ZConstNode, ParentNode: ZNode, SourceToken: ZToken): ZConstNode {
	super(ParentNode, SourceToken, 0);
}

function ZEmptyNode(this: ZEmptyNode, ParentNode: ZNode, Token: ZToken): ZEmptyNode {
	super(ParentNode, Token, 0);
}

function ZErrorNode(this: ZErrorNode, ParentNode: ZNode, SourceToken: ZToken, ErrorMessage: String): ZErrorNode {
	super(ParentNode, SourceToken);
	this.ErrorMessage = ErrorMessage;
}

function ZErrorNode(this: ZErrorNode, Node: ZNode, ErrorMessage: String): ZErrorNode {
	super(Node.ParentNode, Node.SourceToken);
	this.ErrorMessage = ErrorMessage;
}

function Accept(this: ZErrorNode, Visitor: ZVisitor): void {
	Visitor.VisitErrorNode(this);
}

function toString(this: ZErrorNode): String {
	return "ErrorNode "" + this.ErrorMessage + """;
}

function ZFieldNode(this: ZFieldNode, ParentNode: ZNode): ZFieldNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZFieldNode, TypeToken: ZToken, Type: ZType): void {
	this.DeclType = Type;
}

function SetNameInfo(this: ZFieldNode, NameToken: ZToken, Name: String): void {
	this.FieldName = Name;
	this.NameToken = NameToken;
}

function ZFloatNode(this: ZFloatNode, ParentNode: ZNode, Token: ZToken, Value: float): ZFloatNode {
	super(ParentNode, Token);
	this.Type = ZTypeFloatType;
	this.FloatValue = Value;
}

function Accept(this: ZFloatNode, Visitor: ZVisitor): void {
	Visitor.VisitFloatNode(this);
}

function ZGetIndexNode(this: ZGetIndexNode, ParentNode: ZNode, RecvNode: ZNode): ZGetIndexNode {
	super(ParentNode, null, 2);
	this.AST[ZGetIndexNode_Recv] = this.SetChild(RecvNode);
}

function Accept(this: ZGetIndexNode, Visitor: ZVisitor): void {
	Visitor.VisitGetIndexNode(this);
}

function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, Token: ZToken, NativeName: String): ZGetNameNode {
	super(ParentNode, Token, 0);
	this.VarName = NativeName;
}

function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, ResolvedFunc: ZFunc): ZGetNameNode {
	super(ParentNode, null, 0);
	this.VarName = ResolvedFunc.FuncName;
	this.Type = ResolvedFunc.GetFuncType();
}

function Accept(this: ZGetNameNode, Visitor: ZVisitor): void {
	Visitor.VisitGetNameNode(this);
}

function ToGlobalNameNode(this: ZGetNameNode): ZNode {
	return new ZGlobalNameNode(this.ParentNode, this.SourceToken, this.Type, this.VarName, false);
}

function ZGetterNode(this: ZGetterNode, ParentNode: ZNode, RecvNode: ZNode): ZGetterNode {
	super(ParentNode, null, 1);
	this.Set(ZGetterNode_Recv, RecvNode);
}

function SetNameInfo(this: ZGetterNode, NameToken: ZToken, Name: String): void {
	this.FieldName = Name;
	this.NameToken = NameToken;
}

function Accept(this: ZGetterNode, Visitor: ZVisitor): void {
	Visitor.VisitGetterNode(this);
}

function IsStaticField(this: ZGetterNode): boolean {
	return this.AST[ZGetterNode_Recv] instanceof ZTypeNode;
}

function ZGlobalNameNode(this: ZGlobalNameNode, ParentNode: ZNode, SourceToken: ZToken, Type: ZType, GlobalName: String, IsStaticFuncName: boolean): ZGlobalNameNode {
	super(ParentNode, SourceToken, 0);
	this.GlobalName = GlobalName;
	this.Type = Type;
	this.IsStaticFuncName = IsStaticFuncName;
}

function IsGivenName(this: ZGlobalNameNode): boolean {
	return (!this.IsStaticFuncName);
}

function Accept(this: ZGlobalNameNode, Visitor: ZVisitor): void {
	Visitor.VisitGlobalNameNode(this);
}

function ZGroupNode(this: ZGroupNode, ParentNode: ZNode): ZGroupNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZGroupNode, Visitor: ZVisitor): void {
	Visitor.VisitGroupNode(this);
}

function ZIfNode(this: ZIfNode, ParentNode: ZNode): ZIfNode {
	super(ParentNode, null, 3);
}

function Accept(this: ZIfNode, Visitor: ZVisitor): void {
	Visitor.VisitIfNode(this);
}

function ZImportNode(this: ZImportNode, ParentNode: ZNode): ZImportNode {
	super(ParentNode, null, 0);
}

function SetNameInfo(this: ZImportNode, NameToken: ZToken, Name: String): void {
	if(this.ResourcePath == null) {
		this.ResourcePath = Name;
		this.ResourceToken = NameToken;
	}
	else {
		this.Alias = Name;
	}
}

function ZInstanceOfNode(this: ZInstanceOfNode, ParentNode: ZNode, Token: ZToken, LeftNode: ZNode): ZInstanceOfNode {
	super(ParentNode, Token, 1);
	this.Set(ZInstanceOfNode_Left, LeftNode);
}

function SetTypeInfo(this: ZInstanceOfNode, TypeToken: ZToken, Type: ZType): void {
	this.TargetType = Type;
}

function Accept(this: ZInstanceOfNode, Visitor: ZVisitor): void {
	Visitor.VisitInstanceOfNode(this);
}

function ZIntNode(this: ZIntNode, ParentNode: ZNode, Token: ZToken, Value: int): ZIntNode {
	super(ParentNode, Token);
	this.Type = ZTypeIntType;
	this.IntValue = Value;
}

function Accept(this: ZIntNode, Visitor: ZVisitor): void {
	Visitor.VisitIntNode(this);
}

function ZLetNode(this: ZLetNode, ParentNode: ZNode): ZLetNode {
	super(ParentNode, null, 1);
}

function SetNameInfo(this: ZLetNode, NameToken: ZToken, Name: String): void {
	this.Symbol = Name;
	this.SymbolToken = NameToken;
}

function SetTypeInfo(this: ZLetNode, TypeToken: ZToken, Type: ZType): void {
	this.SymbolType = Type;
}

function Accept(this: ZLetNode, Visitor: ZVisitor): void {
	Visitor.VisitLetNode(this);
}

function ToGlobalNameNode(this: ZLetNode): ZGlobalNameNode {
	return new ZGlobalNameNode(null, this.SymbolToken, this.GetAstType(ZLetNode_InitValue), this.GlobalName, false);
}

function ZListNode(this: ZListNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZListNode {
	super(ParentNode, SourceToken, Size);
	this.ListStartIndex = Size;
}

function Append(this: ZListNode, Node: ZNode): void {
	if(this.AST == null) {
		this.AST = new ZNode[1];
		this.Set(0, Node);
	}
	else {
		var newAST: ZNode[] = new ZNode[this.AST.length+1];
		System.arraycopy(this.AST, 0, newAST, 0, this.AST.length);
		this.AST = newAST;
		this.Set(this.AST.length - 1, Node);
	}
}

function GetListSize(this: ZListNode): int {
	return this.GetAstSize() - this.ListStartIndex;
}

function GetListAt(this: ZListNode, Index: int): ZNode {
	return this.AST[this.ListStartIndex + Index];
}

function SetListAt(this: ZListNode, Index: int, Node: ZNode): void {
	this.Set(Index + this.ListStartIndex, Node);
}

function InsertListAt(this: ZListNode, Index: int, Node: ZNode): void {
	if(this.AST == null || Index < 0 || this.AST.length == Index) {
		this.Append(Node);
	} else {
		var newAST: ZNode[] = new ZNode[this.AST.length + 1];
		Index = this.ListStartIndex + Index;
		System.arraycopy(this.AST, 0, newAST, 0, Index);
		this.Set(Index, Node);
		System.arraycopy(this.AST, Index, newAST, Index + 1, this.AST.length - Index);
		this.AST = newAST;
	}
}

function RemoveListAt(this: ZListNode, Index: int): ZNode {
	var Removed: ZNode = this.GetListAt(Index);
	var newAST: ZNode[] = new ZNode[this.AST.length - 1];
	int RemovedIndex = this.ListStartIndex + Index;
	System.arraycopy(this.AST, 0, newAST, 0, RemovedIndex);
	System.arraycopy(this.AST, RemovedIndex + 1, newAST, RemovedIndex, this.AST.length - (RemovedIndex + 1));
	this.AST = newAST;
	return Removed;
}

function ClearListAfter(this: ZListNode, Size: int): void {
	if(Size < this.GetListSize()) {
		var newsize: int = this.ListStartIndex + Size;
		if(newsize == 0) {
			this.AST = null;
		}
		else {
			var newAST: ZNode[] = new ZNode[newsize];
			System.arraycopy(this.AST, 0, newAST, 0, newsize);
			this.AST = newAST;
		}
	}
}

function ZMacroNode(this: ZMacroNode, ParentNode: ZNode, SourceToken: ZToken, MacroFunc: ZMacroFunc): ZMacroNode {
	super(ParentNode, SourceToken, 0);
	this.MacroFunc = MacroFunc;
	assert(MacroFunc != null);
}

function GetFuncType(this: ZMacroNode): ZFuncType {
	return this.MacroFunc.GetFuncType();
}

function GetMacroText(this: ZMacroNode): String {
	var Func: ZMacroFunc = this.MacroFunc;
	if(Func instanceof ZSourceMacro) {
		return ((ZSourceMacro)Func).Macro;
	}
	return "";
}

function Accept(this: ZMacroNode, Visitor: ZVisitor): void {
	Visitor.VisitMacroNode(this);
}

function ZMapEntryNode(this: ZMapEntryNode, ParentNode: ZNode): ZMapEntryNode {
	super(ParentNode, null, 2);
}

function ZMapLiteralNode(this: ZMapLiteralNode, ParentNode: ZNode): ZMapLiteralNode {
	super(ParentNode, null, 0);
}

function GetMapEntryNode(this: ZMapLiteralNode, Index: int): ZMapEntryNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZMapEntryNode) {
		return (ZMapEntryNode)Node;
	}
	return null;
}

function Accept(this: ZMapLiteralNode, Visitor: ZVisitor): void {
	Visitor.VisitMapLiteralNode(this);
}

function ZMethodCallNode(this: ZMethodCallNode, ParentNode: ZNode, RecvNode: ZNode): ZMethodCallNode {
	super(ParentNode, null, 1);
	this.Set(ZMethodCallNode_Recv, RecvNode);
}

function SetNameInfo(this: ZMethodCallNode, NameToken: ZToken, Name: String): void {
	this.MethodName = Name;
	this.MethodToken = NameToken;
}

function Accept(this: ZMethodCallNode, Visitor: ZVisitor): void {
	Visitor.VisitMethodCallNode(this);
}

function ToGetterFuncCall(this: ZMethodCallNode): ZFuncCallNode {
	ZGetterNode Getter = new ZGetterNode(null, this.AST[ZMethodCallNode_Recv]);
	Getter.SetNameInfo(this.MethodToken, this.MethodName);
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, Getter);
	FuncNode.SourceToken = this.SourceToken;
	FuncNode.Append(this.AST[ZMethodCallNode_Recv]);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	return FuncNode;
}

function ToFuncCallNode(this: ZMethodCallNode, Func: ZFunc): ZListNode {
	if(Func instanceof ZMacroFunc) {
		ZMacroNode MacroNode = new ZMacroNode(this.ParentNode, this.MethodToken, (ZMacroFunc)Func);
		MacroNode.Append(this.AST[ZMethodCallNode_Recv]);
		var i: int = 0;
		while(i < this.GetListSize()) {
			MacroNode.Append(this.GetListAt(i));
			i = i + 1;
		}
		return MacroNode;
	}
	else {
		ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, Func.FuncName, Func.GetFuncType());
		FuncNode.SourceToken = this.MethodToken;
		FuncNode.Append(this.AST[ZMethodCallNode_Recv]);
		var i: int = 0;
		while(i < this.GetListSize()) {
			FuncNode.Append(this.GetListAt(i));
			i = i + 1;
		}
		return FuncNode;
	}
}

function ZNewArrayNode(this: ZNewArrayNode, ParentNode: ZNode, Type: ZType, Token: ZToken): ZNewArrayNode {
	super(ParentNode, null, 0);
}

function ZNewObjectNode(this: ZNewanyNode, ParentNode: ZNode): ZNewanyNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZNewanyNode, Visitor: ZVisitor): void {
	Visitor.VisitNewObjectNode(this);
}

function ToFuncCallNode(this: ZNewanyNode, Func: ZFunc): ZListNode {
	var FuncNode: ZListNode;
	if(Func instanceof ZMacroFunc) {
		FuncNode = new ZMacroNode(this.ParentNode, this.SourceToken, (ZMacroFunc)Func);
	}
	else {
		FuncNode = new ZFuncCallNode(this.ParentNode, Func.FuncName, Func.GetFuncType());
		FuncNode.SourceToken = this.SourceToken;
	}
	FuncNode.Append(this);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	this.ClearListAfter(0);
	return FuncNode;
}

function ZNotNode(this: ZNotNode, ParentNode: ZNode, Token: ZToken): ZNotNode {
	super(ParentNode, Token);
}

function Accept(this: ZNotNode, Visitor: ZVisitor): void {
	Visitor.VisitNotNode(this);
}

function ZNullNode(this: ZNullNode, ParentNode: ZNode, SourceToken: ZToken): ZNullNode {
	super(ParentNode, SourceToken);
}

function Accept(this: ZNullNode, Visitor: ZVisitor): void {
	Visitor.VisitNullNode(this);
}

function ZOrNode(this: ZOrNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZOrNode {
	super(ParentNode, Token, Left, Pattern);
}

function Accept(this: ZOrNode, Visitor: ZVisitor): void {
	Visitor.VisitOrNode(this);
}

function ZPrototypeNode(this: ZPrototypeNode, ParentNode: ZNode): ZPrototypeNode {
	super(ParentNode, null, 0);
}

function SetTypeInfo(this: ZPrototypeNode, TypeToken: ZToken, Type: ZType): void {
	this.ReturnType = Type;
}

function SetNameInfo(this: ZPrototypeNode, NameToken: ZToken, Name: String): void {
	this.FuncName = Name;
	this.NameToken = NameToken;
}

function GetParamNode(this: ZPrototypeNode, Index: int): ZParamNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZParamNode) {
		return (ZParamNode)Node;
	}
	return null;
}

function GetFuncType(this: ZPrototypeNode): ZFuncType {
	var TypeList: ZType[] = [];
	TypeList.add(this.ReturnType.GetRealType());
	var i: int = 0;
	while(i < this.GetListSize()) {
		var Node: ZParamNode = this.GetParamNode(i);
		var ParamType: ZType = Node.Type.GetRealType();
		TypeList.add(ParamType);
		i = i + 1;
	}
	return ZTypePool_LookupFuncType(TypeList);
}

function ZStringNode(this: ZStringNode, ParentNode: ZNode, Token: ZToken, Value: String): ZStringNode {
	super(ParentNode, Token);
	this.Type = ZTypeStringType;
	this.StringValue = Value;
}

function Accept(this: ZStringNode, Visitor: ZVisitor): void {
	Visitor.VisitStringNode(this);
}

function ZTypeNode(this: ZTypeNode, ParentNode: ZNode, SourceToken: ZToken, ParsedType: ZType): ZTypeNode {
	super(ParentNode, SourceToken);
	this.Type = ParsedType;
}

function ZGenerator(this: ZGenerator, LanguageExtension: String, TargetVersion: String): ZGenerator {
	super();
	this.RootNameSpace = new ZNameSpace(this, null);
	this.GrammarInfo = "";
	this.LanguageExtention = LanguageExtension;
	this.TargetVersion = TargetVersion;
	this.OutputFile = null;
	this.Logger = new ZLogger();
	this.StoppedVisitor = false;
}

function ImportLocalGrammar(this: ZGenerator, NameSpace: ZNameSpace): void {
}

function WriteTo(this: ZGenerator, FileName: String): void {
}

function NameOutputFile(this: ZGenerator, FileName: String): String {
	if(FileName != null) {
		return FileName + "." + this.LanguageExtention;
	}
	return FileName;
}

function EnableVisitor(this: ZGenerator): void {
	this.StoppedVisitor = false;
}

function StopVisitor(this: ZGenerator): void {
	this.StoppedVisitor = true;
}

function IsVisitable(this: ZGenerator): boolean {
	return !this.StoppedVisitor;
}

function GetGrammarInfo(this: ZGenerator): String {
	return this.GrammarInfo.trim();
}

function AppendGrammarInfo(this: ZGenerator, GrammarInfo: String): void {
	this.GrammarInfo = this.GrammarInfo + GrammarInfo + " ";
}

function GetTargetLangInfo(this: ZGenerator): String {
	return this.LanguageExtention + this.TargetVersion;
}

function GetFieldType(this: ZGenerator, BaseType: ZType, Name: String): ZType {
	return ZTypeVarType;     // undefined
}

function GetSetterType(this: ZGenerator, BaseType: ZType, Name: String): ZType {
	return ZTypeVarType;     // undefined
}

function GetConstructorFuncType(this: ZGenerator, ClassType: ZType, List: ZListNode): ZFuncType {
	return null;     // undefined
}

function GetMethodFuncType(this: ZGenerator, RecvType: ZType, MethodName: String, List: ZListNode): ZFuncType {
	return null;     // undefined
}

function GetUniqueNumber(this: ZGenerator): int {
	var UniqueNumber: int = this.UniqueNumber;
	this.UniqueNumber = this.UniqueNumber + 1;
	return UniqueNumber;
}

function NameGlobalSymbol(this: ZGenerator, Symbol: String): String {
	return Symbol + "_Z" + this.GetUniqueNumber();
}

function NameClass(this: ZGenerator, ClassType: ZType): String {
	return ClassType.ShortName + "" + ClassType.TypeId;
}

function SetDefinedFunc(this: ZGenerator, Func: ZFunc): void {
	this.DefinedFuncMap.put(Func.GetSignature(), Func);
}

function SetPrototype(this: ZGenerator, Node: ZNode, FuncName: String, FuncType: ZFuncType): boolean {
	var Func: ZFunc = this.GetDefinedFunc(FuncName, FuncType);
	if(Func != null) {
		if(!FuncType.Equals(Func.GetFuncType())) {
			ZLogger_LogError(Node.SourceToken, "function has been defined diffrently: " + Func.GetFuncType());
			return false;
		}
	}
	else {
		Func = new ZPrototype(0, FuncName, FuncType, Node.SourceToken);
		this.DefinedFuncMap.put(Func.GetSignature(), Func);
	}
	return true;
}

function GetDefinedFunc(this: ZGenerator, GlobalName: String): ZFunc {
	var Func: ZFunc = this.DefinedFuncMap.GetOrNull(GlobalName);
	if(Func == null && LibZen_IsLetter(LibZen_GetChar(GlobalName, 0))) {
		Func = this.DefinedFuncMap.GetOrNull(LibZen_AnotherName(GlobalName));
	}
	return Func;
}

function GetDefinedFunc(this: ZGenerator, FuncName: String, FuncType: ZFuncType): ZFunc {
	return this.GetDefinedFunc(FuncType.StringfySignature(FuncName));
}

function GetDefinedFunc(this: ZGenerator, FuncName: String, RecvType: ZType, FuncParamSize: int): ZFunc {
	return this.GetDefinedFunc(ZFunc_StringfySignature(FuncName, FuncParamSize, RecvType));
}

function GetMacroFunc(this: ZGenerator, FuncName: String, RecvType: ZType, FuncParamSize: int): ZMacroFunc {
	ZFunc Func = this.GetDefinedFunc(ZFunc_StringfySignature(FuncName, FuncParamSize, RecvType));
	if(Func instanceof ZMacroFunc) {
		return ((ZMacroFunc)Func);
	}
	return null;
}

function NameConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): String {
	return FromType.GetUniqueName() + "T" + ToType.GetUniqueName();
}

function SetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType, Func: ZFunc): void {
	this.DefinedFuncMap.put(this.NameConverterFunc(FromType, ToType), Func);
}

function GetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc {
	while(FromType != null) {
		var Func: ZFunc = this.DefinedFuncMap.GetOrNull(this.NameConverterFunc(FromType, ToType));
		if(Func != null) {
			return Func;
		}
		FromType = FromType.GetSuperType();
	}
	return null;
}

function GetCoercionFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc {
	while(FromType != null) {
		var Func: ZFunc = this.DefinedFuncMap.GetOrNull(this.NameConverterFunc(FromType, ToType));
		if(Func != null && Func.IsCoercionFunc()) {
			return Func;
		}
		FromType = FromType.GetSuperType();
	}
	return null;
}

function VisitExtendedNode(this: ZGenerator, Node: ZNode): void {
	var DeNode: ZSugarNode = Node.DeSugar(this);
	DeNode.Accept(this);
}

function VisitSugarNode(this: ZGenerator, Node: ZSugarNode): void {
	Node.AST[ZSugarNode_DeSugar].Accept(this);
}

function ZIndentToken(this: ZIndentToken, Source: ZSource, StartIndex: int, EndIndex: int): ZIndentToken {
	super(Source, StartIndex, EndIndex);
}

function ZPatternToken(this: ZPatternToken, Source: ZSource, StartIndex: int, EndIndex: int, PresetPattern: ZSyntax): ZPatternToken {
	super(Source, StartIndex, EndIndex);
	this.PresetPattern = PresetPattern;
}

function ZSourceEngine(this: ZSourceEngine, TypeChecker: ZTypeChecker, Generator: ZGenerator): ZSourceEngine {
	this.TypeChecker = TypeChecker;
	this.Generator = Generator;
	this.Logger = Generator.Logger;
}

function IsVisitable(this: ZSourceEngine): boolean {
	return this.IsVisitable;
}

function EnableVisitor(this: ZSourceEngine): void {
	this.IsVisitable = true;
}

function StopVisitor(this: ZSourceEngine): void {
	this.IsVisitable = false;
}

function Eval(this: ZSourceEngine, Node: ZNode): any {
	if(this.IsVisitable()) {
		Node.Accept(this);
	}
	return ZEmptyValue.TrueEmpty;
}

function Exec(this: ZSourceEngine, Node: ZNode, IsInteractive: boolean): any {
	this.InteractiveContext = IsInteractive;
	this.EnableVisitor();
	Node = this.TypeChecker.CheckType(Node, ZTypeVoidType);
	var ResultValue: any = this.Eval(Node);
	return ResultValue;
}

function Eval(this: ZSourceEngine, NameSpace: ZNameSpace, ScriptText: String, FileName: String, LineNumber: int, IsInteractive: boolean): any {
	var ResultValue: any = ZEmptyValue.TrueEmpty;
	var TopBlockNode: ZBlockNode = new ZBlockNode(NameSpace);
	var TokenContext: ZTokenContext = new ZTokenContext(this.Generator, NameSpace, FileName, LineNumber, ScriptText);
	TokenContext.SkipEmptyStatement();
	var SkipToken: ZToken = TokenContext.GetToken();
	while(TokenContext.HasNext()) {
		TokenContext.SetParseFlag(ZTokenContext.NotAllowSkipIndent);
		TopBlockNode.ClearListAfter(0);
		SkipToken = TokenContext.GetToken();
		var ParsedNode: ZNode = TokenContext.ParsePattern(TopBlockNode, "$Statement$", ZTokenContext.Required);
		if(ParsedNode.IsErrorNode()) {
			TokenContext.SkipError(SkipToken);
		}
		ResultValue = this.Exec(ParsedNode, IsInteractive);
		if(ResultValue == ZEmptyValue.FalseEmpty) {
			break;
		}
		TokenContext.SkipEmptyStatement();
		TokenContext.Vacume();
	}
	if(TokenContext.HasNext() && !IsInteractive) {
		ZLogger_LogInfo(SkipToken, "stopped script at this line");
	}
	return ResultValue;
}

function Eval(this: ZSourceEngine, ScriptText: String, FileName: String, LineNumber: int, IsInteractive: boolean): any {
	return this.Eval(this.Generator.RootNameSpace, ScriptText, FileName, LineNumber, IsInteractive);
}

function Load(this: ZSourceEngine, FileName: String): boolean {
	var ScriptText: String = LibZen.LoadTextFile(FileName);
	if(ScriptText == null) {
		LibZen_Exit(1, "file not found: " + FileName);
		return false;
	}
	Object ResultValue = this.Eval(ScriptText, FileName, 1, false);
	this.Logger.ShowErrors();
	if(ResultValue == ZEmptyValue.FalseEmpty) {
		return false;
	}
	return true;
}

function Unsupported(this: ZSourceEngine, Node: ZNode): void {
	if(this.InteractiveContext) {
		this.Generator.StartCodeGeneration(Node, this.InteractiveContext);
	}
	else {
		ZLogger_LogError(Node.SourceToken, "unsupported at top level");
		this.StopVisitor();
	}
}

function VisitNullNode(this: ZSourceEngine, Node: ZNullNode): void {
	this.Unsupported(Node);
}

function VisitBooleanNode(this: ZSourceEngine, Node: ZBooleanNode): void {
	this.Unsupported(Node);
}

function VisitIntNode(this: ZSourceEngine, Node: ZIntNode): void {
	this.Unsupported(Node);
}

function VisitFloatNode(this: ZSourceEngine, Node: ZFloatNode): void {
	this.Unsupported(Node);
}

function VisitStringNode(this: ZSourceEngine, Node: ZStringNode): void {
	this.Unsupported(Node);
}

function VisitArrayLiteralNode(this: ZSourceEngine, Node: ZArrayLiteralNode): void {
	this.Unsupported(Node);
}

function VisitMapLiteralNode(this: ZSourceEngine, Node: ZMapLiteralNode): void {
	this.Unsupported(Node);
}

function VisitNewObjectNode(this: ZSourceEngine, Node: ZNewanyNode): void {
	this.Unsupported(Node);
}

function VisitGlobalNameNode(this: ZSourceEngine, Node: ZGlobalNameNode): void {
	this.Unsupported(Node);
}

function VisitGetNameNode(this: ZSourceEngine, Node: ZGetNameNode): void {
	this.Unsupported(Node);
}

function VisitSetNameNode(this: ZSourceEngine, Node: ZSetNameNode): void {
	this.Unsupported(Node);
}

function VisitGroupNode(this: ZSourceEngine, Node: ZGroupNode): void {
	this.Eval(Node.AST[ZGroupNode_Expr]);
}

function VisitGetterNode(this: ZSourceEngine, Node: ZGetterNode): void {
	this.Unsupported(Node);
}

function VisitSetterNode(this: ZSourceEngine, Node: ZSetterNode): void {
	this.Unsupported(Node);
}

function VisitGetIndexNode(this: ZSourceEngine, Node: ZGetIndexNode): void {
	this.Unsupported(Node);
}

function VisitSetIndexNode(this: ZSourceEngine, Node: ZSetIndexNode): void {
	this.Unsupported(Node);
}

function VisitMacroNode(this: ZSourceEngine, Node: ZMacroNode): void {
	this.Unsupported(Node);
}

function VisitFuncCallNode(this: ZSourceEngine, Node: ZFuncCallNode): void {
	this.Unsupported(Node);
}

function VisitMethodCallNode(this: ZSourceEngine, Node: ZMethodCallNode): void {
	this.Unsupported(Node);
}

function VisitUnaryNode(this: ZSourceEngine, Node: ZUnaryNode): void {
	this.Unsupported(Node);
}

function VisitNotNode(this: ZSourceEngine, Node: ZNotNode): void {
	this.Unsupported(Node);
}

function VisitCastNode(this: ZSourceEngine, Node: ZCastNode): void {
	if(Node.Type.IsVoidType()) {
		this.Eval(Node.AST[ZCastNode_Expr]);
		Node.Type = Node.AST[ZCastNode_Expr].Type;
	}
	else {
		this.Unsupported(Node);
	}
}

function VisitInstanceOfNode(this: ZSourceEngine, Node: ZInstanceOfNode): void {
	this.Unsupported(Node);
}

function VisitBinaryNode(this: ZSourceEngine, Node: ZBinaryNode): void {
	this.Unsupported(Node);
}

function VisitComparatorNode(this: ZSourceEngine, Node: ZComparatorNode): void {
	this.Unsupported(Node);
}

function VisitAndNode(this: ZSourceEngine, Node: ZAndNode): void {
	this.Unsupported(Node);
}

function VisitOrNode(this: ZSourceEngine, Node: ZOrNode): void {
	this.Unsupported(Node);
}

function VisitBlockNode(this: ZSourceEngine, Node: ZBlockNode): void {
	var i: int = 1;
	while(i < Node.GetListSize() && this.IsVisitable()) {
		ZNode StmtNode = Node.GetListAt(i);
		this.Eval(StmtNode);
		if(StmtNode.IsBreakingBlock()) {
			break;
		}
	}
}

function VisitVarNode(this: ZSourceEngine, Node: ZVarNode): void {
	this.Unsupported(Node);
}

function VisitIfNode(this: ZSourceEngine, Node: ZIfNode): void {
	Object BooleanValue = this.Eval(Node.AST[ZIfNode_Cond]);
	if(BooleanValue instanceof Boolean) {
		if((Boolean)BooleanValue) {
			this.Eval(Node.AST[ZIfNode_Then]);
		}
		else if(Node.AST[ZIfNode_Else] != null) {
			this.Eval(Node.AST[ZIfNode_Then]);
		}
	}
}

function VisitReturnNode(this: ZSourceEngine, Node: ZReturnNode): void {
	this.Unsupported(Node);
}

function VisitWhileNode(this: ZSourceEngine, Node: ZWhileNode): void {
	this.Unsupported(Node);
}

function VisitBreakNode(this: ZSourceEngine, Node: ZBreakNode): void {
	this.Unsupported(Node);
}

function VisitThrowNode(this: ZSourceEngine, Node: ZThrowNode): void {
	this.Unsupported(Node);
}

function VisitTryNode(this: ZSourceEngine, Node: ZTryNode): void {
	this.Unsupported(Node);
}

function VisitLetNode(this: ZSourceEngine, Node: ZLetNode): void {
	if(Node.HasUntypedNode()) {
		LibZen_PrintDebug("HasUntypedNode: " + Node.HasUntypedNode() + "\n" + Node);
	}
	this.Generator.StartCodeGeneration(Node, this.InteractiveContext);
}

function VisitFunctionNode(this: ZSourceEngine, Node: ZFunctionNode): void {
	if(Node.HasUntypedNode()) {
		LibZen_PrintDebug("HasUntypedNode: " + Node.HasUntypedNode() + "\nLAZY: " + Node);
	}
	this.Generator.StartCodeGeneration(Node, this.InteractiveContext);
}

function VisitClassNode(this: ZSourceEngine, Node: ZClassNode): void {
	if(Node.HasUntypedNode()) {
		LibZen_PrintDebug("HasUntypedNode: " + Node.HasUntypedNode() + "\n" + Node);
	}
	this.Generator.StartCodeGeneration(Node, this.InteractiveContext);
}

function VisitErrorNode(this: ZSourceEngine, Node: ZErrorNode): void {
	ZLogger_LogError(Node.SourceToken, Node.ErrorMessage);
	this.StopVisitor();
}

function VisitPrototypeNode(this: ZSourceEngine, Node: ZPrototypeNode): void {
	var FuncType: ZFuncType = Node.GetFuncType();
	this.Generator.SetPrototype(Node, Node.FuncName, FuncType);
}

function VisitImportNode(this: ZSourceEngine, Node: ZImportNode): void {
	Node.Import();
}

function VisitTypeNode(this: ZSourceEngine, Node: ZTypeNode): void {
	this.Unsupported(Node);
}

function VisitExtendedNode(this: ZSourceEngine, Node: ZNode): void {
	if(Node instanceof ZPrototypeNode) {
		this.VisitPrototypeNode((ZPrototypeNode)Node);
	}
	else if(Node instanceof ZImportNode) {
		this.VisitImportNode((ZImportNode)Node);
	}
	else if(Node instanceof ZTypeNode) {
		this.VisitTypeNode((ZTypeNode)Node);
	}
	else {
		var SugarNode: ZNode = Node.DeSugar(this.Generator);
		SugarNode.Accept(this);
	}
}

function VisitSugarNode(this: ZSourceEngine, Node: ZSugarNode): void {
	this.Eval(Node.AST[ZSugarNode_DeSugar]);
}

function WriteTo(this: ZSourceEngine, OutputFile: String): void {
	this.Generator.WriteTo(OutputFile);
	this.Generator.Logger.ShowErrors();
}

function ZSourceGenerator(this: ZSourceGenerator, TargetCode: String, TargetVersion: String): ZSourceGenerator {
	super(TargetCode, TargetVersion);
	this.NativeTypeMap = [];
	this.BuilderList = [];
	this.InitBuilderList();
	this.LineFeed = "\n";
	this.Tab = "   ";
	this.LineComment = "//"; // if not, set null
	this.BeginComment = "/*";
	this.EndComment = "*/";
	this.Camma = ", ";
	this.SemiColon = ";";
	this.TrueLiteral = "true";
	this.FalseLiteral = "false";
	this.NullLiteral = "null";
	this.AndOperator = "&&";
	this.OrOperator = "||";
	this.NotOperator = "!";
	this.TopType = "var";
}

function InitBuilderList(this: ZSourceGenerator): void {
	this.CurrentBuilder = null;
	this.BuilderList.clear(0);
	this.HeaderBuilder = this.AppendNewSourceBuilder();
	this.CurrentBuilder = this.AppendNewSourceBuilder();
}

function GetEngine(this: ZSourceGenerator): ZSourceEngine {
	System.out.println("FIXME: Overide GetEngine in each generator!!");
	return new ZSourceEngine(new ZenTypeSafer(this), this);
}

function AppendNewSourceBuilder(this: ZSourceGenerator): ZSourceBuilder {
	var Builder: ZSourceBuilder = new ZSourceBuilder(this, this.CurrentBuilder);
	this.BuilderList.add(Builder);
	return Builder;
}

function InsertNewSourceBuilder(this: ZSourceGenerator): ZSourceBuilder {
	var Builder: ZSourceBuilder = new ZSourceBuilder(this, this.CurrentBuilder);
	var i: int = 0;
	while(i < this.BuilderList.size()) {
		if(this.BuilderList[i] == this.CurrentBuilder) {
			this.BuilderList.add(i, Builder);
			return Builder;
		}
		i = i + 1;
	}
	this.BuilderList.add(Builder);
	return Builder;
}

function SetNativeType(this: ZSourceGenerator, Type: ZType, TypeName: String): void {
	var Key: String = "" + Type.TypeId;
	this.NativeTypeMap.put(Key, TypeName);
}

function GetNativeType(this: ZSourceGenerator, Type: ZType): String {
	var Key: String = "" + Type.TypeId;
	var TypeName: String = this.NativeTypeMap.GetOrNull(Key);
	if (TypeName == null) {
		return Type.ShortName;
	}
	return TypeName;
}

function SetMacro(this: ZSourceGenerator, FuncName: String, Macro: String, ReturnType: ZType, P1: ZType): void {
	ZFuncType FuncType = ZTypePool_LookupFuncType(ReturnType, P1);
	this.SetDefinedFunc(new ZSourceMacro(FuncName, FuncType, Macro));
}

function SetMacro(this: ZSourceGenerator, FuncName: String, Macro: String, ReturnType: ZType, P1: ZType, P2: ZType): void {
	ZFuncType FuncType = ZTypePool_LookupFuncType(ReturnType, P1, P2);
	this.SetDefinedFunc(new ZSourceMacro(FuncName, FuncType, Macro));
}

function SetConverterMacro(this: ZSourceGenerator, Macro: String, ReturnType: ZType, P1: ZType): void {
	ZFuncType FuncType = ZTypePool_LookupFuncType(ReturnType, P1);
	this.SetConverterFunc(P1, ReturnType, new ZSourceMacro("to" + this.NameClass(ReturnType), FuncType, Macro));
}

function WriteTo(this: ZSourceGenerator, FileName: String): void {
	LibZen_WriteTo(this.NameOutputFile(FileName), this.BuilderList);
	this.InitBuilderList();
}

function StartCodeGeneration(this: ZSourceGenerator, Node: ZNode, IsInteractive: boolean): boolean {
	Node.Accept(this);
	if(IsInteractive) {
		var i: int = 0;
		LibZen_PrintLine("---");
		while(i < this.BuilderList.size()) {
			var Builder: ZSourceBuilder = this.BuilderList[i];
			LibZen_PrintLine(Builder.toString());
			Builder.Clear();
			i = i + 1;
		}
		this.InitBuilderList();
	}
	return true;
}

function GenerateCode(this: ZSourceGenerator, ContextType: ZType, Node: ZNode): void {
	Node.Accept(this);
}

function IsNeededSurroud(this: ZSourceGenerator, Node: ZNode): boolean {
	if(Node instanceof ZBinaryNode) {
		return true;
	}
	return false;
}

function GenerateSurroundCode(this: ZSourceGenerator, Node: ZNode): void {
	if(this.IsNeededSurroud(Node)) {
		this.CurrentBuilder.Append("(");
		this.GenerateCode(null, Node);
		this.CurrentBuilder.Append(")");
	}
	else {
		this.GenerateCode(null, Node);
	}
}

function AppendCode(this: ZSourceGenerator, RawSource: String): void {
	this.CurrentBuilder.Append(RawSource);
}

function VisitStmtList(this: ZSourceGenerator, BlockNode: ZBlockNode): void {
	var i: int = 0;
	while (i < BlockNode.GetListSize()) {
		var SubNode: ZNode = BlockNode.GetListAt(i);
		this.CurrentBuilder.AppendLineFeed();
		this.CurrentBuilder.AppendIndent();
		this.GenerateCode(null, SubNode);
		i = i + 1;
		if(i  < BlockNode.GetListSize()) {
			this.CurrentBuilder.Append(this.SemiColon);
		}
	}
}

function VisitBlockNode(this: ZSourceGenerator, Node: ZBlockNode): void {
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append("{");
	this.CurrentBuilder.Indent();
	this.VisitStmtList(Node);
	if(Node.GetListSize()>0) {
		this.CurrentBuilder.Append(this.SemiColon);
	}
	this.CurrentBuilder.UnIndent();
	this.CurrentBuilder.AppendLineFeed();
	this.CurrentBuilder.AppendIndent();
	this.CurrentBuilder.Append("}");
}

function VisitNullNode(this: ZSourceGenerator, Node: ZNullNode): void {
	this.CurrentBuilder.Append(this.NullLiteral);
}

function VisitBooleanNode(this: ZSourceGenerator, Node: ZBooleanNode): void {
	if (Node.BooleanValue) {
		this.CurrentBuilder.Append(this.TrueLiteral);
	} else {
		this.CurrentBuilder.Append(this.FalseLiteral);
	}
}

function VisitIntNode(this: ZSourceGenerator, Node: ZIntNode): void {
	this.CurrentBuilder.Append(String.valueOf(Node.IntValue));
}

function VisitFloatNode(this: ZSourceGenerator, Node: ZFloatNode): void {
	this.CurrentBuilder.Append(String.valueOf(Node.FloatValue));
}

function VisitStringNode(this: ZSourceGenerator, Node: ZStringNode): void {
	this.CurrentBuilder.Append(LibZen_QuoteString(Node.StringValue));
}

function VisitArrayLiteralNode(this: ZSourceGenerator, Node: ZArrayLiteralNode): void {
	this.VisitListNode("[", Node, "]");
}

function VisitMapLiteralNode(this: ZSourceGenerator, Node: ZMapLiteralNode): void {
}

function VisitNewArrayNode(this: ZSourceGenerator, Node: ZNewArrayNode): void {
}

function VisitNewObjectNode(this: ZSourceGenerator, Node: ZNewanyNode): void {
	this.CurrentBuilder.Append("new");
	this.CurrentBuilder.AppendWhiteSpace();
	this.GenerateTypeName(Node.Type);
	this.VisitListNode("(", Node, ")");
}

function VisitGroupNode(this: ZSourceGenerator, Node: ZGroupNode): void {
	this.CurrentBuilder.Append("(");
	this.GenerateCode(null, Node.AST[ZGroupNode_Expr]);
	this.CurrentBuilder.Append(")");
}

function VisitGetIndexNode(this: ZSourceGenerator, Node: ZGetIndexNode): void {
	this.GenerateCode(null, Node.AST[ZGetIndexNode_Recv]);
	this.CurrentBuilder.Append("[");
	this.GenerateCode(null, Node.AST[ZGetIndexNode_Index]);
	this.CurrentBuilder.Append("]");
}

function VisitSetIndexNode(this: ZSourceGenerator, Node: ZSetIndexNode): void {
	this.GenerateCode(null, Node.AST[ZSetIndexNode_Recv]);
	this.CurrentBuilder.Append("[");
	this.GenerateCode(null, Node.AST[ZSetIndexNode_Index]);
	this.CurrentBuilder.Append("]");
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.AST[ZSetIndexNode_Expr]);
}

function VisitGlobalNameNode(this: ZSourceGenerator, Node: ZGlobalNameNode): void {
	if(Node.IsUntyped()) {
		ZLogger_LogError(Node.SourceToken, "undefined symbol: " + Node.GlobalName);
	}
	if(Node.IsStaticFuncName) {
		this.CurrentBuilder.Append(Node.Type.StringfySignature(Node.GlobalName));
	}
	else {
		this.CurrentBuilder.Append(Node.GlobalName);
	}
}

function VisitGetNameNode(this: ZSourceGenerator, Node: ZGetNameNode): void {
	this.CurrentBuilder.Append(Node.VarName);
}

function VisitSetNameNode(this: ZSourceGenerator, Node: ZSetNameNode): void {
	this.CurrentBuilder.Append(Node.VarName);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.AST[ZSetNameNode_Expr]);
}

function VisitGetterNode(this: ZSourceGenerator, Node: ZGetterNode): void {
	this.GenerateSurroundCode(Node.AST[ZGetterNode_Recv]);
	this.CurrentBuilder.Append(".");
	this.CurrentBuilder.Append(Node.FieldName);
}

function VisitSetterNode(this: ZSourceGenerator, Node: ZSetterNode): void {
	this.GenerateSurroundCode(Node.AST[ZSetterNode_Recv]);
	this.CurrentBuilder.Append(".");
	this.CurrentBuilder.Append(Node.FieldName);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.AST[ZSetterNode_Expr]);
}

function VisitMethodCallNode(this: ZSourceGenerator, Node: ZMethodCallNode): void {
	this.GenerateSurroundCode(Node.AST[ZMethodCallNode_Recv]);
	this.CurrentBuilder.Append(".");
	this.CurrentBuilder.Append(Node.MethodName);
	this.VisitListNode("(", Node, ")");
}

function VisitMacroNode(this: ZSourceGenerator, Node: ZMacroNode): void {
	var Macro: String = Node.GetMacroText();
	var FuncType: ZFuncType = Node.GetFuncType();
	var fromIndex: int = 0;
	var BeginNum: int = Macro.indexOf("$[", fromIndex);
	while(BeginNum != -1) {
		var EndNum: int = Macro.indexOf("]", BeginNum + 2);
		if(EndNum == -1) {
			break;
		}
		this.CurrentBuilder.Append(Macro.substring(fromIndex, BeginNum));
		var Index: int = (int)LibZen_ParseInt(Macro.substring(BeginNum+2, EndNum));
		if(Node.HasAst(Index)) {
			this.GenerateCode(FuncType.GetFuncParamType(Index), Node.AST[Index]);
		}
		fromIndex = EndNum + 1;
		BeginNum = Macro.indexOf("$[", fromIndex);
	}
	this.CurrentBuilder.Append(Macro.substring(fromIndex));
}

function VisitFuncCallNode(this: ZSourceGenerator, Node: ZFuncCallNode): void {
	this.GenerateCode(null, Node.AST[ZFuncCallNode_Func]);
	this.VisitListNode("(", Node, ")");
}

function VisitUnaryNode(this: ZSourceGenerator, Node: ZUnaryNode): void {
	this.CurrentBuilder.Append(Node.SourceToken.GetText());
	this.GenerateCode(null, Node.AST[ZUnaryNode_Recv]);
}

function VisitNotNode(this: ZSourceGenerator, Node: ZNotNode): void {
	this.CurrentBuilder.Append(this.NotOperator);
	this.GenerateSurroundCode(Node.AST[ZUnaryNode_Recv]);
}

function VisitCastNode(this: ZSourceGenerator, Node: ZCastNode): void {
	this.CurrentBuilder.Append("(");
	this.GenerateTypeName(Node.Type);
	this.CurrentBuilder.Append(")");
	this.GenerateSurroundCode(Node.AST[ZCastNode_Expr]);
}

function VisitInstanceOfNode(this: ZSourceGenerator, Node: ZInstanceOfNode): void {
	this.GenerateCode(null, Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken("instanceof");
	this.GenerateTypeName(Node.AST[ZBinaryNode_Right].Type);
}

function VisitBinaryNode(this: ZSourceGenerator, Node: ZBinaryNode): void {
	if (Node.ParentNode instanceof ZBinaryNode) {
		this.CurrentBuilder.Append("(");
	}
	this.GenerateCode(null, Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(Node.SourceToken.GetText());
	this.GenerateCode(null, Node.AST[ZBinaryNode_Right]);
	if (Node.ParentNode instanceof ZBinaryNode) {
		this.CurrentBuilder.Append(")");
	}
}

function VisitComparatorNode(this: ZSourceGenerator, Node: ZComparatorNode): void {
	this.GenerateCode(null, Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(Node.SourceToken.GetText());
	this.GenerateCode(null, Node.AST[ZBinaryNode_Right]);
}

function VisitAndNode(this: ZSourceGenerator, Node: ZAndNode): void {
	this.GenerateCode(null, Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(this.AndOperator);
	this.GenerateCode(null, Node.AST[ZBinaryNode_Right]);
}

function VisitOrNode(this: ZSourceGenerator, Node: ZOrNode): void {
	this.GenerateCode(null, Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(this.OrOperator);
	this.GenerateCode(null, Node.AST[ZBinaryNode_Right]);
}

function VisitIfNode(this: ZSourceGenerator, Node: ZIfNode): void {
	this.CurrentBuilder.Append("if (");
	this.GenerateCode(null, Node.AST[ZIfNode_Cond]);
	this.CurrentBuilder.Append(")");
	this.GenerateCode(null, Node.AST[ZIfNode_Then]);
	if (Node.AST[ZIfNode_Else] != null) {
		this.CurrentBuilder.AppendToken("else");
		this.GenerateCode(null, Node.AST[ZIfNode_Else]);
	}
}

function VisitReturnNode(this: ZSourceGenerator, Node: ZReturnNode): void {
	this.CurrentBuilder.Append("return");
	if (Node.AST[ZReturnNode_Expr] != null) {
		this.CurrentBuilder.AppendWhiteSpace();
		this.GenerateCode(null, Node.AST[ZReturnNode_Expr]);
	}
}

function VisitWhileNode(this: ZSourceGenerator, Node: ZWhileNode): void {
	this.CurrentBuilder.Append("while (");
	this.GenerateCode(null, Node.AST[ZWhileNode_Cond]);
	this.CurrentBuilder.Append(")");
	this.GenerateCode(null, Node.AST[ZWhileNode_Block]);
}

function VisitBreakNode(this: ZSourceGenerator, Node: ZBreakNode): void {
	this.CurrentBuilder.Append("break");
}

function VisitThrowNode(this: ZSourceGenerator, Node: ZThrowNode): void {
	this.CurrentBuilder.Append("throw");
	this.CurrentBuilder.AppendWhiteSpace();
	this.GenerateCode(null, Node.AST[ZThrowNode_Expr]);
}

function VisitTryNode(this: ZSourceGenerator, Node: ZTryNode): void {
	this.CurrentBuilder.Append("try");
	this.GenerateCode(null, Node.AST[ZTryNode_Try]);
	if(Node.AST[ZTryNode_Catch] != null) {
		this.GenerateCode(null, Node.AST[ZTryNode_Catch]);
	}
	if (Node.AST[ZTryNode_Finally] != null) {
		this.CurrentBuilder.Append("finally");
		this.GenerateCode(null, Node.AST[ZTryNode_Finally]);
	}
}

function VisitCatchNode(this: ZSourceGenerator, Node: ZCatchNode): void {
	this.CurrentBuilder.Append("catch (");
	this.CurrentBuilder.Append(Node.ExceptionName);
	this.VisitTypeAnnotation(Node.ExceptionType);
	this.CurrentBuilder.Append(")");
	this.GenerateCode(null, Node.AST[ZCatchNode_Block]);
}

function VisitVarNode(this: ZSourceGenerator, Node: ZVarNode): void {
	this.CurrentBuilder.Append("var");
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append(Node.NativeName);
	this.VisitTypeAnnotation(Node.DeclType);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.AST[ZVarNode_InitValue]);
	this.CurrentBuilder.Append(this.SemiColon);
	this.VisitStmtList(Node);
}

function VisitTypeAnnotation(this: ZSourceGenerator, Type: ZType): void {
	this.CurrentBuilder.Append(": ");
	this.GenerateTypeName(Type);
}

function VisitLetNode(this: ZSourceGenerator, Node: ZLetNode): void {
	this.CurrentBuilder.Append("let");
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append(Node.GlobalName);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(null, Node.AST[ZLetNode_InitValue]);
}

function VisitParamNode(this: ZSourceGenerator, Node: ZParamNode): void {
	this.CurrentBuilder.Append(Node.Name);
	this.VisitTypeAnnotation(Node.Type);
}

function VisitFunctionNode(this: ZSourceGenerator, Node: ZFunctionNode): void {
	this.CurrentBuilder.Append("function");
	this.CurrentBuilder.AppendWhiteSpace();
	if(Node.FuncName != null) {
		this.CurrentBuilder.Append(Node.FuncName);
	}
	this.VisitListNode("(", Node, ")");
	this.VisitTypeAnnotation(Node.ReturnType);
	this.GenerateCode(null, Node.AST[ZFunctionNode_Block]);
}

function VisitClassNode(this: ZSourceGenerator, Node: ZClassNode): void {
	this.CurrentBuilder.Append("class");
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append(Node.ClassName);
	if(Node.SuperType != null) {
		this.CurrentBuilder.AppendToken("extends");
		this.GenerateTypeName(Node.SuperType);
	}
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append("{");
	this.CurrentBuilder.Indent();
	var i: int = 0;
	while (i < Node.GetListSize()) {
		var FieldNode: ZFieldNode = Node.GetFieldNode(i);
		this.CurrentBuilder.AppendLineFeed();
		this.CurrentBuilder.AppendIndent();
		this.CurrentBuilder.Append("field");
		this.CurrentBuilder.AppendWhiteSpace();
		this.CurrentBuilder.Append(FieldNode.FieldName);
		this.VisitTypeAnnotation(FieldNode.DeclType);
		this.CurrentBuilder.AppendToken("=");
		this.GenerateCode(null, FieldNode.AST[ZFieldNode_InitValue]);
		this.CurrentBuilder.Append(this.SemiColon);
		i = i + 1;
	}
	this.CurrentBuilder.UnIndent();
	this.CurrentBuilder.AppendLineFeed();
	this.CurrentBuilder.AppendIndent();
	this.CurrentBuilder.Append("}");
}

function VisitErrorNode(this: ZSourceGenerator, Node: ZErrorNode): void {
	ZLogger_LogError(Node.SourceToken, Node.ErrorMessage);
	this.CurrentBuilder.Append("ThrowError(");
	this.CurrentBuilder.Append(LibZen_QuoteString(Node.ErrorMessage));
	this.CurrentBuilder.Append(")");
}

function VisitExtendedNode(this: ZSourceGenerator, Node: ZNode): void {
	if(Node instanceof ZParamNode) {
		this.VisitParamNode((ZParamNode)Node);
	}
	else {
		ZSugarNode SugarNode = Node.DeSugar(this);
		this.VisitSugarNode(SugarNode);
	}
}

function VisitSugarNode(this: ZSourceGenerator, Node: ZSugarNode): void {
	this.GenerateCode(null, Node.AST[ZSugarNode_DeSugar]);
}

function GenerateTypeName(this: ZSourceGenerator, Type: ZType): void {
	this.CurrentBuilder.Append(this.GetNativeType(Type.GetRealType()));
}

function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, DelimToken: String, CloseToken: String): void {
	this.CurrentBuilder.Append(OpenToken);
	var i: int = 0;
	while(i < VargNode.GetListSize()) {
		var ParamNode: ZNode = VargNode.GetListAt(i);
		if (i > 0) {
			this.CurrentBuilder.Append(DelimToken);
		}
		this.GenerateCode(null, ParamNode);
		i = i + 1;
	}
	this.CurrentBuilder.Append(CloseToken);
}

function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, CloseToken: String): void {
	this.VisitListNode(OpenToken, VargNode, ", ", CloseToken);
}

function ZArrayType(this: ZArrayType, TypeFlag: int, ParamType: ZType): ZArrayType {
	super(TypeFlag, ParamType+"[]", ZTypeArrayType, ParamType);
}

function ZAndNode(this: ZAndNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZAndNode {
	super(ParentNode, Token, Left, Pattern);
}

function Accept(this: ZAndNode, Visitor: ZVisitor): void {
	Visitor.VisitAndNode(this);
}

function ZArrayLiteralNode(this: ZArrayLiteralNode, ParentNode: ZNode): ZArrayLiteralNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZArrayLiteralNode, Visitor: ZVisitor): void {
	Visitor.VisitArrayLiteralNode(this);
}

function ZBlockNode(this: ZBlockNode, NameSpace: ZNameSpace): ZBlockNode {
	super(null, null, 0);
	this.NameSpace = NameSpace;
}

function ZBlockNode(this: ZBlockNode, ParentNode: ZNode, Init: int): ZBlockNode {
	super(ParentNode, null, Init);
	this.NameSpace = ParentNode.GetNameSpace().CreateSubNameSpace();
}

function Accept(this: ZBlockNode, Visitor: ZVisitor): void {
	Visitor.VisitBlockNode(this);
}

function ToReturnNode(this: ZBlockNode): ZReturnNode {
	if(this.GetListSize() == 1) {
		return this.GetListAt(0).ToReturnNode();
	}
	return null;
}

function IndexOf(this: ZBlockNode, ChildNode: ZNode): int {
	var i: int = 0;
	while(i < this.GetListSize()) {
		if(this.GetListAt(i) == ChildNode) {
			return i;
		}
		i = i + 1;
	}
	return -1;
}

function CopyTo(this: ZBlockNode, Index: int, BlockNode: ZBlockNode): void {
	var i: int = Index;
	while(i < this.GetListSize()) {
		BlockNode.Append(this.GetListAt(i));
		i = i + 1;
	}
}

function ZBooleanNode(this: ZBooleanNode, ParentNode: ZNode, Token: ZToken, Value: boolean): ZBooleanNode {
	super(ParentNode, Token);
	this.Type = ZTypeBooleanType;
	this.BooleanValue = Value;
}

function Accept(this: ZBooleanNode, Visitor: ZVisitor): void {
	Visitor.VisitBooleanNode(this);
}

function ZClassNode(this: ZClassNode, ParentNode: ZNode): ZClassNode {
	super(ParentNode, null, 0);
}

function SetTypeInfo(this: ZClassNode, TypeToken: ZToken, Type: ZType): void {
	this.SuperType = Type;
	this.SuperToken = TypeToken;
}

function SetNameInfo(this: ZClassNode, NameToken: ZToken, Name: String): void {
	this.ClassName = Name;
	this.NameToken = NameToken;
}

function GetFieldNode(this: ZClassNode, Index: int): ZFieldNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZFieldNode) {
		return (ZFieldNode)Node;
	}
	return null;
}

function Accept(this: ZClassNode, Visitor: ZVisitor): void {
	Visitor.VisitClassNode(this);
}

function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncNode: ZNode): ZFuncCallNode {
	super(ParentNode, null, 1);
	this.Set(ZFuncCallNode_Func, FuncNode);
}

function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncName: String, FuncType: ZFuncType): ZFuncCallNode {
	super(ParentNode, null, 1);
	var FuncNode: ZGlobalNameNode = new ZGlobalNameNode(this, null, FuncType, FuncName, true);
	this.Set(ZFuncCallNode_Func, FuncNode);
}

function Accept(this: ZFuncCallNode, Visitor: ZVisitor): void {
	Visitor.VisitFuncCallNode(this);
}

function GetRecvType(this: ZFuncCallNode): ZType {
	if(this.GetListSize() > 0) {
		return this.GetListAt(0).Type.GetRealType();
	}
	return ZTypeVoidType;
}

function GetFuncName(this: ZFuncCallNode): String {
	ZNode FNode = this.AST[ZFuncCallNode_Func];
	if(FNode instanceof ZGlobalNameNode) {
		return ((ZGlobalNameNode)FNode).GlobalName;
	}
	return null;
}

function GetFuncType(this: ZFuncCallNode): ZFuncType {
	ZType FType = this.AST[ZFuncCallNode_Func].Type;
	if(FType instanceof ZFuncType) {
		return (ZFuncType)FType;
	}
	return null;
}

function ToMacroNode(this: ZFuncCallNode, MacroFunc: ZMacroFunc): ZMacroNode {
	ZMacroNode MacroNode = new ZMacroNode(this.ParentNode, this.AST[ZFuncCallNode_Func].SourceToken, MacroFunc);
	var i: int = 0;
	while(i < this.GetListSize()) {
		MacroNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	return MacroNode;
}

function ZFunctionNode(this: ZFunctionNode, ParentNode: ZNode): ZFunctionNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZFunctionNode, TypeToken: ZToken, Type: ZType): void {
	this.ReturnType = Type;
}

function SetNameInfo(this: ZFunctionNode, NameToken: ZToken, Name: String): void {
	this.FuncName = Name;
	this.NameToken = NameToken;
}

function Accept(this: ZFunctionNode, Visitor: ZVisitor): void {
	Visitor.VisitFunctionNode(this);
}

function GetParamNode(this: ZFunctionNode, Index: int): ZParamNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZParamNode) {
		return (ZParamNode)Node;
	}
	return null;
}

function GetFuncType(this: ZFunctionNode, ContextType: ZType): ZFuncType {
	if(this.ResolvedFuncType == null) {
		var FuncType: ZFuncType = null;
		if(ContextType instanceof ZFuncType) {
			FuncType = (ZFuncType)ContextType;
		}
		var TypeList: ZType[] = [];
		if(this.ReturnType.IsVarType() && FuncType != null) {
			this.ReturnType = FuncType.GetParamType(0);
		}
		TypeList.add(this.ReturnType.GetRealType());
		var i: int = 0;
		while(i < this.GetListSize()) {
			var Node: ZParamNode = this.GetParamNode(i);
			var ParamType: ZType = Node.Type.GetRealType();
			if(ParamType.IsVarType() && FuncType != null) {
				ParamType = FuncType.GetParamType(i+1);
			}
			TypeList.add(ParamType);
			i = i + 1;
		}
		FuncType = ZTypePool_LookupFuncType(TypeList);
		if(!FuncType.IsVarType()) {
			this.ResolvedFuncType = FuncType;
		}
		return FuncType;
	}
	return this.ResolvedFuncType;
}

function GetSignature(this: ZFunctionNode, Generator: ZGenerator): String {
	ZFuncType FuncType = this.GetFuncType(null);
	if(this.FuncName == null) {
		this.FuncName = "f_Z" + Generator.GetUniqueNumber();
	}
	return FuncType.StringfySignature(this.FuncName);
}

function Push(this: ZFunctionNode, Parent: ZFunctionNode): ZFunctionNode {
	this.ParentFunctionNode = Parent;
	return this;
}

function Pop(this: ZFunctionNode): ZFunctionNode {
	return this.ParentFunctionNode;
}

function IsTopLevel(this: ZFunctionNode): boolean {
	return this.ParentFunctionNode == null;
}

function GetVarIndex(this: ZFunctionNode): int {
	var Index: int = this.VarIndex;
	this.VarIndex = this.VarIndex + 1;
	return Index;
}

function ZVarNode(this: ZVarNode, ParentNode: ZNode): ZVarNode {
	super(ParentNode, 1);
}

function SetNameInfo(this: ZVarNode, NameToken: ZToken, Name: String): void {
	this.NativeName = Name;
	this.NameToken = NameToken;
}

function SetTypeInfo(this: ZVarNode, TypeToken: ZToken, Type: ZType): void {
	this.DeclType  = Type;
	this.TypeToken = TypeToken;
}

function Accept(this: ZVarNode, Visitor: ZVisitor): void {
	Visitor.VisitVarNode(this);
}


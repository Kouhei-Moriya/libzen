class ZNode {
	var ParentNode: ZNode;
	var SourceToken: ZToken;
	var AST: ZNode[];
	var Type: ZType = ZType.VarType;
	var HasUntypedNode: boolean = true;

	var SetNameInfo: Func<void,ZNode,String>;
	var SetTypeInfo: Func<void,ZNode,ZType>;
	var IsErrorNode: Func<boolean,ZNode>;
	var IsBreakingBlock: Func<boolean,ZNode>;
	var GetVisitName: Func<String,ZNode>;
	var DeSugar: Func<ZNode,ZNode,ZGenerator>;
	var Accept: Func<void,ZNode,ZVisitor>;
	var VisitTypeChecker: Func<ZNode,ZNode,ZTypeChecker,ZType>;
	var ToReturnNode: Func<ZReturnNode,ZNode>;
	var GetNextNode: Func<ZNode,ZNode>;
}
class ZParamNode extends ZNode {
	var Name: String;

}
class ZReturnNode extends ZNode {
}
class ZSetIndexNode extends ZNode {
}
class ZSetNameNode extends ZNode {
	var int: static _Expr = 0;
	var VarName: String;
	var VarIndex: int = 0;
	var IsCaptured: boolean = false;

}
class ZSetterNode extends ZNode {
	var FieldName: String = null;
}
class ZThrowNode extends ZNode {
}
class ZTryNode extends ZNode {
}
class ZUnaryNode extends ZNode {

}
class ZWhileNode extends ZNode {
}
class ZLogger {
	var ReportedErrorList: String[] = [];
	var StatMap: Map<ZCounter>;
}
class ZCounter {
	var count: int = 1;

}
class ZNameSpace {
	var ParentNameSpace: ZNameSpace;
	var Generator: ZGenerator;
	var SerialId: int = 0;
	var TokenMatrix: ZTokenFunc[] = null;
	var SymbolPatternTable: Map<any> = null;
	var SyntaxTable: Map<ZSyntax> = null;
	var SymbolTable: Map<ZSymbolEntry> = null;
}
class ZParserConst {
}
class ZSource {
	var TokenContext: ZTokenContext;
	var Logger: ZLogger;
	var FileName: String;
	var LineNumber: int;
	var SourceText: String;

	var MakeHeader: Func<String,ZSource,String,int,String>;
	var MakeBody: Func<String,ZSource,String,int,String>;
	var Panic: Func<void,ZSource,int,String>;
	var Warning: Func<void,ZSource,int,String>;
}
class ZSourceBuilder {
	var SourceList: String[] = [];
	var Template: ZSourceGenerator;
	var IndentLevel: int = 0;
	var CurrentIndentString: String = "";
	var BufferedLineComment: String = "";
}
class ZSourceContext extends ZSource {
	var SourcePosition: int = 0;
}
class ZSymbolEntry {
	var Parent: ZSymbolEntry;
	var Node: ZNode;
	var IsDisabled: boolean = false;

}
class ZSyntax {
	var PackageNameSpace: ZNameSpace;
	var PatternName: String;
	var MatchFunc: ZMatchFunction;
	var SyntaxFlag: int = 0;
	var ParentPattern: ZSyntax = null;
	var IsDisabled: boolean          = false;
	var IsStatement: boolean         = false;
}
class ZToken {
	var Source: ZSource;
	var StartIndex: int;
	var EndIndex: int;

	var GetIndentSize: Func<int,ZToken>;
}
class ZTokenContext {
	var Generator: ZGenerator;
	var NameSpace: ZNameSpace;
	var Source: ZSourceContext;
	var TokenList: ZToken[] = [];
	var CurrentPosition: int = 0;
	var IsAllowSkipIndent: boolean = false;
	var LatestToken: ZToken = null;
	var ApplyingPattern: ZSyntax = null;
}
class ZTokenFunc {
	var Func: ZTokenFunction;
	var ParentFunc: ZTokenFunc;
}
class ZVariable extends ZSymbolEntry {
	var VarFlag: int;
	var VarType: ZType;
	var VarName: String;
	var VarUniqueIndex: int;
	var SourceToken: ZToken;
	var DefCount: int;
	var UsedCount: int;

}
class ZVisitor {
	var VisitNullNode: Func<void,ZVisitor,ZNullNode>;
	var VisitBooleanNode: Func<void,ZVisitor,ZBooleanNode>;
	var VisitIntNode: Func<void,ZVisitor,ZIntNode>;
	var VisitFloatNode: Func<void,ZVisitor,ZFloatNode>;
	var VisitStringNode: Func<void,ZVisitor,ZStringNode>;
	var VisitArrayLiteralNode: Func<void,ZVisitor,ZArrayLiteralNode>;
	var VisitMapLiteralNode: Func<void,ZVisitor,ZMapLiteralNode>;
	var VisitNewArrayNode: Func<void,ZVisitor,ZNewArrayNode>;
	var VisitNewObjectNode: Func<void,ZVisitor,ZNewanyNode>;
	var VisitGetNameNode: Func<void,ZVisitor,ZGetNameNode>;
	var VisitSetNameNode: Func<void,ZVisitor,ZSetNameNode>;
	var VisitGroupNode: Func<void,ZVisitor,ZGroupNode>;
	var VisitGetterNode: Func<void,ZVisitor,ZGetterNode>;
	var VisitSetterNode: Func<void,ZVisitor,ZSetterNode>;
	var VisitGetIndexNode: Func<void,ZVisitor,ZGetIndexNode>;
	var VisitSetIndexNode: Func<void,ZVisitor,ZSetIndexNode>;
	var VisitMethodCallNode: Func<void,ZVisitor,ZMethodCallNode>;
	var VisitFuncCallNode: Func<void,ZVisitor,ZFuncCallNode>;
	var VisitUnaryNode: Func<void,ZVisitor,ZUnaryNode>;
	var VisitNotNode: Func<void,ZVisitor,ZNotNode>;
	var VisitCastNode: Func<void,ZVisitor,ZCastNode>;
	var VisitInstanceOfNode: Func<void,ZVisitor,ZInstanceOfNode>;
	var VisitBinaryNode: Func<void,ZVisitor,ZBinaryNode>;
	var VisitComparatorNode: Func<void,ZVisitor,ZComparatorNode>;
	var VisitAndNode: Func<void,ZVisitor,ZAndNode>;
	var VisitOrNode: Func<void,ZVisitor,ZOrNode>;
	var VisitBlockNode: Func<void,ZVisitor,ZBlockNode>;
	var VisitVarDeclNode: Func<void,ZVisitor,ZVarDeclNode>;
	var VisitIfNode: Func<void,ZVisitor,ZIfNode>;
	var VisitReturnNode: Func<void,ZVisitor,ZReturnNode>;
	var VisitWhileNode: Func<void,ZVisitor,ZWhileNode>;
	var VisitBreakNode: Func<void,ZVisitor,ZBreakNode>;
	var VisitThrowNode: Func<void,ZVisitor,ZThrowNode>;
	var VisitTryNode: Func<void,ZVisitor,ZTryNode>;
	var VisitCatchNode: Func<void,ZVisitor,ZCatchNode>;
	var VisitLetNode: Func<void,ZVisitor,ZLetNode>;
	var VisitFunctionNode: Func<void,ZVisitor,ZFunctionNode>;
	var VisitClassDeclNode: Func<void,ZVisitor,ZClassDeclNode>;
	var VisitErrorNode: Func<void,ZVisitor,ZErrorNode>;
	var VisitExtendedNode: Func<void,ZVisitor,ZNode>;
	var EnableVisitor: Func<void,ZVisitor>;
	var StopVisitor: Func<void,ZVisitor>;
	var IsVisitable: Func<boolean,ZVisitor>;
}
class ZAnnotationNode extends ZNode {
	var Annotation: Map<any>;
	var AnnotatedNode: ZNode = null;
}
class ZAssertNode extends ZNode {

}
class ZBinaryNode extends ZNode {
	var Pattern: ZSyntax;

}
class ZBreakNode extends ZNode {
}
class ZCastNode extends ZNode {

}
class ZCatchNode extends ZNode {
	var ExceptionType: ZType = ZType.VarType;
	var ExceptionName: String = null;
}
class ZComparatorNode extends ZBinaryNode {

}
class ZConstNode extends ZNode {

	var GetValue: Func<any,ZConstNode>;
}
class ZEmptyNode extends ZNode {
}
class ZErrorNode extends ZConstNode {
}
class ZFieldNode extends ZNode {
	var ClassType: ZClassType;
	var DeclType: ZType = ZType.VarType;
	var FieldName: String = null;
}
class ZFloatNode extends ZConstNode {
	var FloatValue: float;
}
class ZGetIndexNode extends ZNode {
}
class ZGetNameNode extends ZNode {
	var IsCaptured: boolean = false;
	var VarName: String;
	var VarIndex: int = 0;

}
class ZGetterNode extends ZNode {
	var FieldName: String;
}
class ZGroupNode extends ZNode {
}
class ZIfNode extends ZNode {
	var int: static _Cond = 0;
	var int: static _Then = 1;
	var int: static _Else = 2;
}
class ZImportNode extends ZNode {
	var ResourcePath: String = null;
	var Alias: String = null;

	var Import: Func<ZNode,ZImportNode>;
}
class ZInstanceOfNode extends ZNode {
	var TargetType: ZType;
}
class ZIntNode extends ZConstNode {
	var IntValue: int;
}
class ZLetNode extends ZNode {
	var Symbol: String = null;
	var SymbolType: ZType = ZType.VarType;
	var GlobalName: String = null;

}
class ZListNode extends ZNode {
	var ListStartIndex: int;

}
class ZMapEntryNode extends ZNode {
	var Name: String = null;

}
class ZMapLiteralNode extends ZListNode {
}
class ZMethodCallNode extends ZListNode {
	var MethodName: String = null;
}
class ZNewArrayNode extends ZListNode {
}
class ZNewObjectNode extends ZListNode {
}
class ZNotNode extends ZUnaryNode {

}
class ZNullNode extends ZConstNode {
}
class ZOrNode extends ZBinaryNode {
}
class ZStringNode extends ZConstNode {
	var StringValue: String;
}
class ZTypeNode extends ZConstNode {
}
class ZGenerator extends ZVisitor {
	var GrammarInfo: String;
	var TargetCode: String;
	var TargetVersion: String;
	var RootNameSpace: ZNameSpace;
	var UniqueNumber: int = 0;
	var OutputFile: String;
	var Logger: ZLogger;
	var DefinedFuncMap: Map<ZFunc> = {};
	var StoppedVisitor: boolean;

	var GetEngine: Func<ZenEngine,ZGenerator>;
	var ImportLocalGrammar: Func<void,ZGenerator,ZNameSpace>;
	var GetGrammarInfo: Func<String,ZGenerator>;
	var AppendGrammarInfo: Func<void,ZGenerator,String>;
	var GetTargetLangInfo: Func<String,ZGenerator>;
	var StartCodeGeneration: Func<boolean,ZGenerator,ZNode,boolean,boolean>;
	var CreateImportNode: Func<ZImportNode,ZGenerator,ZNode>;
	var GetFieldType: Func<ZType,ZGenerator,ZType,String>;
	var GetSetterType: Func<ZType,ZGenerator,ZType,String>;
	var GetConstructorFuncType: Func<ZFuncType,ZGenerator,ZType,ZListNode>;
	var GetMethodFuncType: Func<ZFuncType,ZGenerator,ZType,String,ZListNode>;
	var GetUniqueNumber: Func<int,ZGenerator>;
	var NameGlobalSymbol: Func<String,ZGenerator,String>;
	var SetGlobalValue: Func<ZNode,ZGenerator,String,any>;
	var GetGlobalValue: Func<any,ZGenerator,String>;
	var NameConverterFunc: Func<String,ZGenerator,ZType,ZType>;
	var SetConverterFunc: Func<void,ZGenerator,ZType,ZType,ZFunc>;
	var GetConverterFunc: Func<ZFunc,ZGenerator,ZType,ZType>;
	var GetCoercionFunc: Func<ZFunc,ZGenerator,ZType,ZType>;
}
class ZIndentToken extends ZToken {
}
class ZPatternToken extends ZToken {
	var PresetPattern: ZSyntax;

}
class ZSourceGenerator extends ZGenerator {
	var NativeTypeMap: Map<String>;
	var BuilderList: ZSourceBuilder[];
	var HeaderBuilder: ZSourceBuilder;
	var CurrentBuilder: ZSourceBuilder;
	var Tab: String;
	var LineFeed: String;
	var LineComment: String;
	var BeginComment: String;
	var EndComment: String;
	var SemiColon: String;
	var Camma: String;
	var TrueLiteral: String;
	var FalseLiteral: String;
	var NullLiteral: String;
	var NotOperator: String;
	var AndOperator: String;
	var OrOperator: String;
	var TopType: String;

	var NewSourceBuilder: Func<ZSourceBuilder,ZSourceGenerator>;
	var SetNativeType: Func<void,ZSourceGenerator,ZType,String>;
	var GetNativeType: Func<String,ZSourceGenerator,ZType>;
	var IsNeededSurroud: Func<boolean,ZSourceGenerator,ZNode>;
	var GenerateSurroundCode: Func<void,ZSourceGenerator,ZNode>;
	var AppendCode: Func<void,ZSourceGenerator,String>;
	var VisitStmtList: Func<void,ZSourceGenerator,ZBlockNode>;
	var VisitTypeAnnotation: Func<void,ZSourceGenerator,ZType>;
	var VisitParamNode: Func<void,ZSourceGenerator,ZParamNode>;
	var VisitType: Func<void,ZSourceGenerator,ZType>;
	var VisitListNode: Func<void,ZSourceGenerator,String,ZListNode,String,String>;
	var VisitListNode: Func<void,ZSourceGenerator,String,ZListNode,String>;
}
class ZAndNode extends ZBinaryNode {
}
class ZArrayLiteralNode extends ZListNode {
}
class ZBlockNode extends ZListNode {
	var NameSpace: ZNameSpace;


}
class ZBooleanNode extends ZConstNode {
	var BooleanValue: boolean;
}
class ZClassDeclNode extends ZListNode {
	var ClassName: String = null;
	var ClassType: ZClassType = null;
	var SuperType: ZType = null;
}
class ZFuncCallNode extends ZListNode {
	var ResolvedFuncName: String = null;
	var ResolvedFunc: ZFunc = null;
}
class ZFunctionNode extends ZListNode {
	var ReturnType: ZType = ZType.VarType;
	var FuncName: String = null;
	var ParentFunctionNode: ZFunctionNode = null;
	var ResolvedFuncType: ZFuncType = null;
	var GlobalName: String = null;
	var VarIndex: int = 0;

}
class ZVarDeclNode extends ZBlockNode {
	var DeclType: ZType = ZType.VarType;
	var NativeName: String = null;
}
let Nop = -1;
let NameInfo = -2;
let TypeInfo = -3;
let AppendIndex = -4;
let NestedAppendIndex = -5;
let ZReturnNode_Expr = 0;
let ZSetIndexNode_Recv = 0;
let ZSetIndexNode_Index = 1;
let ZSetIndexNode_Expr = 2;
//let ZSetNameNode.@Field int _Expr = 0;
let ZSetterNode_Recv = 0;
let ZSetterNode_Expr = 1;
let ZThrowNode_Expr = 0;
let ZTryNode_Try = 0;
let ZTryNode_Catch = 1;
let ZTryNode_Finally = 2;
let ZUnaryNode_Recv = 0;
let ZWhileNode_Cond = 0;
let ZWhileNode_Block = 1;
let ZLogger_ErrorLevel = 0;
let ZLogger_TypeErrorLevel = 1;
let ZLogger_WarningLevel = 2;
let ZLogger_InfoLevel = 3;
let ZLogger_DebugLevel = 4;
function ParseVerboseOption(): void {
}
let SerialNumber = 0;
function RightPatternSymbol(PatternName: String): String {
	return "\t" + PatternName;
}
let ProgName = "LibZen";
let CodeName = "Reference Implementation of D-Script";
let MajorVersion = 0;
let MinerVersion = 1;
let PatchLevel = 0;
let Version = "0.1";
let Copyright = "Copyright (c) 2013-2014, Konoha project authors";
let License = "BSD-Style Open Source";
let ZSyntax_LeftJoin = 1 << 1;
let ZSyntax_BinaryOperator = 1;
function MergeSyntaxPattern(Pattern: ZSyntax, Parent: ZSyntax): ZSyntax {
	if(Parent == null) {
		return Pattern;
	}
	var MergedPattern: ZSyntax = new ZSyntax(Pattern.PackageNameSpace, Pattern.PatternName, Pattern.MatchFunc);
	MergedPattern.ParentPattern = Parent;
	return MergedPattern;
}
let NullToken = new ZToken(null, 0, 0);
let Required = true;
let Optional = false;
let AllowSkipIndent = true;
let NotAllowSkipIndent = false;
let AllowNewLine = true;
let MoveNext = true;
let ZAssertNode_Expr = 0;
let ZBinaryNode_Left = 0;
let ZBinaryNode_Right = 1;
let ZCastNode_Expr = 0;
let ZCatchNode_Block = 0;
let ZFieldNode_InitValue = 0;
let ZGetIndexNode_Recv = 0;
let ZGetIndexNode_Index = 1;
let ZGetterNode_Recv = 0;
let ZGroupNode_Expr = 0;
//let ZIfNode.@Field int _Cond = 0;
//let ZIfNode.@Field int _Then = 1;
//let ZIfNode.@Field int _Else = 2;
let ZInstanceOfNode_Left = 0;
let ZLetNode_InitValue = 0;
let ZMapEntryNode_Key = 0;
let ZMapEntryNode_Value = 1;
let ZMethodCallNode_Recv = 0;
let ZFuncCallNode_Func = 0;
let ZFunctionNode_Block = 0;
let ZVarDeclNode_InitValue = 0;
function ZNode(this: ZNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZNode;
function SetChild(this: ZNode, Node: ZNode): ZNode;
function SetNameInfo(this: ZNode, Name: String): void;
function SetTypeInfo(this: ZNode, Type: ZType): void;
function Set(this: ZNode, Index: int, Node: ZNode): void;
function GetAstSize(this: ZNode): int;
function HasAst(this: ZNode, Index: int): boolean;
function GetAstType(this: ZNode, Index: int): ZType;
function toString(this: ZNode): String;
function GetScopeBlockNode(this: ZNode): ZBlockNode;
function GetNameSpace(this: ZNode): ZNameSpace;
function IsErrorNode(this: ZNode): boolean;
function IsBreakingBlock(this: ZNode): boolean;
function GetVisitName(this: ZNode): String;
function DeSugar(this: ZNode, Generator: ZGenerator): ZNode;
function Accept(this: ZNode, Visitor: ZVisitor): void;
function IsUntyped(this: ZNode): boolean;
function HasUntypedNode(this: ZNode): boolean;
function VisitTypeChecker(this: ZNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode;
function ToReturnNode(this: ZNode): ZReturnNode;
function GetPrevNode(this: ZNode): ZNode;
function GetNextNode(this: ZNode): ZNode;
function ZParamNode(this: ZParamNode, ParentNode: ZNode): ZParamNode;
function GetVisitName(this: ZParamNode): String;
function SetNameInfo(this: ZParamNode, Name: String): void;
function ZReturnNode(this: ZReturnNode, ParentNode: ZNode): ZReturnNode;
function Accept(this: ZReturnNode, Visitor: ZVisitor): void;
function ToReturnNode(this: ZReturnNode): ZReturnNode;
function ZSetIndexNode(this: ZSetIndexNode, ParentNode: ZNode, LeftNode: ZNode): ZSetIndexNode;
function Accept(this: ZSetIndexNode, Visitor: ZVisitor): void;
function ZSetNameNode(this: ZSetNameNode, ParentNode: ZNode, Token: ZToken, VarName: String): ZSetNameNode;
function Accept(this: ZSetNameNode, Visitor: ZVisitor): void;
function ZSetterNode(this: ZSetterNode, ParentNode: ZNode, RecvNode: ZNode): ZSetterNode;
function SetNameInfo(this: ZSetterNode, Name: String): void;
function Accept(this: ZSetterNode, Visitor: ZVisitor): void;
function IsStaticField(this: ZSetterNode): boolean;
function ZThrowNode(this: ZThrowNode, ParentNode: ZNode): ZThrowNode;
function Accept(this: ZThrowNode, Visitor: ZVisitor): void;
function ZTryNode(this: ZTryNode, ParentNode: ZNode): ZTryNode;
function Accept(this: ZTryNode, Visitor: ZVisitor): void;
function ZUnaryNode(this: ZUnaryNode, ParentNode: ZNode, Token: ZToken): ZUnaryNode;
function Accept(this: ZUnaryNode, Visitor: ZVisitor): void;
function ZWhileNode(this: ZWhileNode, ParentNode: ZNode): ZWhileNode;
function Accept(this: ZWhileNode, Visitor: ZVisitor): void;
function ZLogger(this: ZLogger): ZLogger;
function Report(this: ZLogger, Message: String): void;
function Report(this: ZLogger, Level: int, Token: ZToken, Message: String): String;
function ReportError(this: ZLogger, Token: ZToken, Message: String): String;
function ReportWarning(this: ZLogger, Token: ZToken, Message: String): String;
function ReportInfo(this: ZLogger, Token: ZToken, Message: String): String;
function ReportDebug(this: ZLogger, Token: ZToken, Message: String): String;
function GetReportedErrors(this: ZLogger): String[];
function ShowErrors(this: ZLogger): void;
function Count(this: ZLogger, EventName: String): void;
function CountCreation(this: ZLogger, CreatedObject: any): void;
function ZCounter(this: ZCounter): ZCounter;
function ZNameSpace(this: ZNameSpace, Generator: ZGenerator, ParentNameSpace: ZNameSpace): ZNameSpace;
function toString(this: ZNameSpace): String;
function CreateSubNameSpace(this: ZNameSpace): ZNameSpace;
function GetRootNameSpace(this: ZNameSpace): ZNameSpace;
function GetTokenFunc(this: ZNameSpace, ZenChar: int): ZTokenFunc;
function JoinParentFunc(this: ZNameSpace, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc;
function AppendTokenFunc(this: ZNameSpace, keys: String, TokenFunc: ZTokenFunction): void;
function GetSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax;
function SetSyntaxPattern(this: ZNameSpace, PatternName: String, Syntax: ZSyntax): void;
function GetRightSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax;
function AppendSyntaxPattern(this: ZNameSpace, PatternName: String, NewPattern: ZSyntax): void;
function DefineStatement(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void;
function DefineExpression(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void;
function DefineRightExpression(this: ZNameSpace, PatternName: String, SyntaxFlag: int, MatchFunc: ZMatchFunction): void;
function GetSymbol(this: ZNameSpace, Symbol: String): ZSymbolEntry;
function GetSymbolNode(this: ZNameSpace, Symbol: String): ZNode;
function SetLocalSymbolEntry(this: ZNameSpace, Symbol: String, Entry: ZSymbolEntry): void;
function SetLocalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry;
function SetGlobalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry;
function GetLocalVariable(this: ZNameSpace, VarName: String): ZVariable;
function SetLocalVariable(this: ZNameSpace, FunctionNode: ZFunctionNode, VarType: ZType, VarName: String, SourceToken: ZToken): void;
function SetTypeName(this: ZNameSpace, Name: String, Type: ZType, SourceToken: ZToken): void;
function SetTypeName(this: ZNameSpace, Type: ZType, SourceToken: ZToken): void;
function GetTypeNode(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZTypeNode;
function GetType(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZType;
function ZSource(this: ZSource, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSource;
function GetLineNumber(this: ZSource, Position: int): int;
function GetLineHeadPosition(this: ZSource, Position: int): int;
function CountIndentSize(this: ZSource, Position: int): int;
function GetLineText(this: ZSource, Position: int): String;
function GetLineMarker(this: ZSource, Position: int): String;
function MakeHeader(this: ZSource, Error: String, Position: int, Message: String): String;
function MakeBody(this: ZSource, Error: String, Position: int, Message: String): String;
function Panic(this: ZSource, Position: int, Message: String): void;
function Warning(this: ZSource, Position: int, Message: String): void;
function SourceAt(this: ZSource, n: int): String;
function ZSourceBuilder(this: ZSourceBuilder, Template: ZSourceGenerator): ZSourceBuilder;
function Clear(this: ZSourceBuilder): void;
function Append(this: ZSourceBuilder, Text: String): void;
function AppendLineFeed(this: ZSourceBuilder): void;
function AppendWhiteSpace(this: ZSourceBuilder): void;
function AppendToken(this: ZSourceBuilder, Text: String): void;
function AppendBlockComment(this: ZSourceBuilder, Text: String): void;
function AppendCommentLine(this: ZSourceBuilder, Text: String): void;
function Indent(this: ZSourceBuilder): void;
function UnIndent(this: ZSourceBuilder): void;
function GetIndentString(this: ZSourceBuilder): String;
function AppendIndent(this: ZSourceBuilder): void;
function IndentAndAppend(this: ZSourceBuilder, Text: String): void;
function AppendParamList(this: ZSourceBuilder, ParamList: ZListNode, BeginIdx: int, EndIdx: int): void;
function toString(this: ZSourceBuilder): String;
function AppendLine(this: ZSourceBuilder, Text: String): void;
function ZSourceContext(this: ZSourceContext, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSourceContext;
function GetCharCode(this: ZSourceContext): int;
function GetPosition(this: ZSourceContext): int;
function HasChar(this: ZSourceContext): boolean;
function ParseChar(this: ZSourceContext): String;
function ParseChar(this: ZSourceContext, n: int): String;
function MoveNext(this: ZSourceContext): void;
function SkipWhiteSpace(this: ZSourceContext): void;
function FoundIndent(this: ZSourceContext, StartIndex: int, EndIndex: int): void;
function Tokenize(this: ZSourceContext, StartIndex: int, EndIndex: int): void;
function Tokenize(this: ZSourceContext, PatternName: String, StartIndex: int, EndIndex: int): void;
function IsDefinedSyntax(this: ZSourceContext, StartIndex: int, EndIndex: int): boolean;
function TokenizeDefinedSymbol(this: ZSourceContext, StartIndex: int): void;
function ApplyTokenFunc(this: ZSourceContext, TokenFunc: ZTokenFunc): void;
function DoTokenize(this: ZSourceContext): boolean;
function ZSymbolEntry(this: ZSymbolEntry, Parent: ZSymbolEntry, Node: ZNode): ZSymbolEntry;
function ZSyntax(this: ZSyntax, NameSpace: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): ZSyntax;
function toString(this: ZSyntax): String;
function IsBinaryOperator(this: ZSyntax): boolean;
function IsRightJoin(this: ZSyntax, Right: ZSyntax): boolean;
function EqualsName(this: ZSyntax, Name: String): boolean;
function ZToken(this: ZToken, Source: ZSource, StartIndex: int, EndIndex: int): ZToken;
function GetFileName(this: ZToken): String;
function GetLineNumber(this: ZToken): int;
function GetChar(this: ZToken): String;
function GetText(this: ZToken): String;
function toString(this: ZToken): String;
function EqualsText(this: ZToken, ch: String): boolean;
function EqualsText(this: ZToken, Text: String): boolean;
function StartsWith(this: ZToken, Text: String): boolean;
function IsNull(this: ZToken): boolean;
function IsIndent(this: ZToken): boolean;
function IsNextWhiteSpace(this: ZToken): boolean;
function IsNameSymbol(this: ZToken): boolean;
function GetIndentSize(this: ZToken): int;
function ZTokenContext(this: ZTokenContext, Generator: ZGenerator, NameSpace: ZNameSpace, FileName: String, LineNumber: int, SourceText: String): ZTokenContext;
function SetParseFlag(this: ZTokenContext, AllowSkipIndent: boolean): boolean;
function GetBeforeToken(this: ZTokenContext): ZToken;
function CreateExpectedErrorNode(this: ZTokenContext, SourceToken: ZToken, ExpectedTokenText: String): ZNode;
function Vacume(this: ZTokenContext): void;
function MoveNext(this: ZTokenContext): void;
function GetToken(this: ZTokenContext, EnforceMoveNext: boolean): ZToken;
function GetToken(this: ZTokenContext): ZToken;
function HasNext(this: ZTokenContext): boolean;
function SkipIndent(this: ZTokenContext): void;
function SkipError(this: ZTokenContext, ErrorToken: ZToken): void;
function IsToken(this: ZTokenContext, TokenText: String): boolean;
function IsNewLineToken(this: ZTokenContext, TokenText: String): boolean;
function MatchToken(this: ZTokenContext, TokenText: String): boolean;
function MatchNewLineToken(this: ZTokenContext, TokenText: String): boolean;
function ParseLargeToken(this: ZTokenContext): ZToken;
function MatchToken(this: ZTokenContext, ParentNode: ZNode, TokenText: String, IsRequired: boolean): ZNode;
function GetApplyingSyntax(this: ZTokenContext): ZSyntax;
function ApplyMatchPattern(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, Pattern: ZSyntax, IsRequired: boolean): ZNode;
function ParsePatternAfter(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, PatternName: String, IsRequired: boolean): ZNode;
function ParsePattern(this: ZTokenContext, ParentNode: ZNode, PatternName: String, IsRequired: boolean): ZNode;
function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean, AllowSkipIndent: boolean): ZNode;
function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean): ZNode;
function MatchOptionaPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, AllowNewLine: boolean, TokenText: String, PatternName: String): ZNode;
function MatchNtimes(this: ZTokenContext, ParentNode: ZNode, StartToken: String, PatternName: String, DelimToken: String, StopToken: String): ZNode;
function StartsWithToken(this: ZTokenContext, TokenText: String): boolean;
function SkipEmptyStatement(this: ZTokenContext): void;
function Dump(this: ZTokenContext): void;
function ZTokenFunc(this: ZTokenFunc, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc;
function toString(this: ZTokenFunc): String;
function ZVariable(this: ZVariable, Parent: ZSymbolEntry, FuncNode: ZFunctionNode, VarFlag: int, VarType: ZType, VarName: String, SourceToken: ZToken): ZVariable;
function IsCaptured(this: ZVariable, CurrentFunctionNode: ZFunctionNode): boolean;
function Defined(this: ZVariable): void;
function Used(this: ZVariable): void;
function ZAnnotationNode(this: ZAnnotationNode, ParentNode: ZNode, Token: ZToken, Anno: Map<any>): ZAnnotationNode;
function IsBreakingBlock(this: ZAnnotationNode): boolean;
function IsErrorNode(this: ZAnnotationNode): boolean;
function Accept(this: ZAnnotationNode, Visitor: ZVisitor): void;
function ZAssertNode(this: ZAssertNode, ParentNode: ZNode): ZAssertNode;
function GetVisitName(this: ZAssertNode): String;
function VisitTypeChecker(this: ZAssertNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode;
function DeSugar(this: ZAssertNode, Generator: ZGenerator): ZNode;
function ZBinaryNode(this: ZBinaryNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZBinaryNode;
function IsRightJoin(this: ZBinaryNode, Node: ZNode): boolean;
function RightJoin(this: ZBinaryNode, ParentNode: ZNode, RightNode: ZBinaryNode): ZNode;
function AppendParsedRightNode(this: ZBinaryNode, ParentNode: ZNode, TokenContext: ZTokenContext): ZNode;
function Accept(this: ZBinaryNode, Visitor: ZVisitor): void;
function ZBreakNode(this: ZBreakNode, ParentNode: ZNode): ZBreakNode;
function Accept(this: ZBreakNode, Visitor: ZVisitor): void;
function ZCastNode(this: ZCastNode, ParentNode: ZNode, CastType: ZType, Node: ZNode): ZCastNode;
function Accept(this: ZCastNode, Visitor: ZVisitor): void;
function ToStaticFuncCall(this: ZCastNode, Func: ZFunc): ZFuncCallNode;
function ZCatchNode(this: ZCatchNode, ParentNode: ZNode): ZCatchNode;
function SetTypeInfo(this: ZCatchNode, Type: ZType): void;
function SetNameInfo(this: ZCatchNode, Name: String): void;
function GetVisitName(this: ZCatchNode): String;
function ZComparatorNode(this: ZComparatorNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZComparatorNode;
function Accept(this: ZComparatorNode, Visitor: ZVisitor): void;
function ZConstNode(this: ZConstNode, ParentNode: ZNode, SourceToken: ZToken): ZConstNode;
function ZEmptyNode(this: ZEmptyNode, ParentNode: ZNode, Token: ZToken): ZEmptyNode;
function GetVisitName(this: ZEmptyNode): String;
function ZErrorNode(this: ZErrorNode, ParentNode: ZNode, SourceToken: ZToken, ErrorMessage: String): ZErrorNode;
function ZErrorNode(this: ZErrorNode, Node: ZNode, ErrorMessage: String): ZErrorNode;
function GetValue(this: ZErrorNode): any;
function Accept(this: ZErrorNode, Visitor: ZVisitor): void;
function toString(this: ZErrorNode): String;
function ZFieldNode(this: ZFieldNode, ParentNode: ZNode): ZFieldNode;
function SetTypeInfo(this: ZFieldNode, Type: ZType): void;
function SetNameInfo(this: ZFieldNode, Name: String): void;
function GetVisitName(this: ZFieldNode): String;
function ZFloatNode(this: ZFloatNode, ParentNode: ZNode, Token: ZToken, Value: float): ZFloatNode;
function GetValue(this: ZFloatNode): any;
function Accept(this: ZFloatNode, Visitor: ZVisitor): void;
function ZGetIndexNode(this: ZGetIndexNode, ParentNode: ZNode, RecvNode: ZNode): ZGetIndexNode;
function Accept(this: ZGetIndexNode, Visitor: ZVisitor): void;
function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, Token: ZToken, NativeName: String): ZGetNameNode;
function Accept(this: ZGetNameNode, Visitor: ZVisitor): void;
function ZGetterNode(this: ZGetterNode, ParentNode: ZNode, RecvNode: ZNode): ZGetterNode;
function SetNameInfo(this: ZGetterNode, Name: String): void;
function Accept(this: ZGetterNode, Visitor: ZVisitor): void;
function IsStaticField(this: ZGetterNode): boolean;
function ZGroupNode(this: ZGroupNode, ParentNode: ZNode): ZGroupNode;
function Accept(this: ZGroupNode, Visitor: ZVisitor): void;
function ZIfNode(this: ZIfNode, ParentNode: ZNode): ZIfNode;
function Accept(this: ZIfNode, Visitor: ZVisitor): void;
function ZImportNode(this: ZImportNode, ParentNode: ZNode): ZImportNode;
function SetNameInfo(this: ZImportNode, Name: String): void;
function GetVisitName(this: ZImportNode): String;
function Import(this: ZImportNode): ZNode;
function ZInstanceOfNode(this: ZInstanceOfNode, ParentNode: ZNode, Token: ZToken, LeftNode: ZNode): ZInstanceOfNode;
function SetTypeInfo(this: ZInstanceOfNode, Type: ZType): void;
function Accept(this: ZInstanceOfNode, Visitor: ZVisitor): void;
function ZIntNode(this: ZIntNode, ParentNode: ZNode, Token: ZToken, Value: int): ZIntNode;
function GetValue(this: ZIntNode): any;
function Accept(this: ZIntNode, Visitor: ZVisitor): void;
function ZLetNode(this: ZLetNode, ParentNode: ZNode): ZLetNode;
function SetNameInfo(this: ZLetNode, Name: String): void;
function SetTypeInfo(this: ZLetNode, Type: ZType): void;
function Accept(this: ZLetNode, Visitor: ZVisitor): void;
function ZListNode(this: ZListNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZListNode;
function Append(this: ZListNode, Node: ZNode): void;
function GetListSize(this: ZListNode): int;
function GetListAt(this: ZListNode, Index: int): ZNode;
function SetListAt(this: ZListNode, Index: int, Node: ZNode): void;
function InsertAt(this: ZListNode, Index: int, Node: ZNode): void;
function RemoveAt(this: ZListNode, Index: int): ZNode;
function ClearList(this: ZListNode, Size: int): void;
function ZMapEntryNode(this: ZMapEntryNode, ParentNode: ZNode): ZMapEntryNode;
function GetVisitName(this: ZMapEntryNode): String;
function ZMapLiteralNode(this: ZMapLiteralNode, ParentNode: ZNode): ZMapLiteralNode;
function GetMapEntryNode(this: ZMapLiteralNode, Index: int): ZMapEntryNode;
function Accept(this: ZMapLiteralNode, Visitor: ZVisitor): void;
function ZMethodCallNode(this: ZMethodCallNode, ParentNode: ZNode, RecvNode: ZNode): ZMethodCallNode;
function SetNameInfo(this: ZMethodCallNode, Name: String): void;
function Accept(this: ZMethodCallNode, Visitor: ZVisitor): void;
function ToGetterFuncCall(this: ZMethodCallNode): ZFuncCallNode;
function ToStaticFuncCall(this: ZMethodCallNode, Func: ZFunc): ZFuncCallNode;
function ZNewArrayNode(this: ZNewArrayNode, ParentNode: ZNode, Type: ZType, Token: ZToken): ZNewArrayNode;
function ZNewObjectNode(this: ZNewanyNode, ParentNode: ZNode): ZNewanyNode;
function Accept(this: ZNewanyNode, Visitor: ZVisitor): void;
function ToStaticFuncCall(this: ZNewanyNode, Func: ZFunc): ZFuncCallNode;
function ZNotNode(this: ZNotNode, ParentNode: ZNode, Token: ZToken): ZNotNode;
function Accept(this: ZNotNode, Visitor: ZVisitor): void;
function ZNullNode(this: ZNullNode, ParentNode: ZNode, SourceToken: ZToken): ZNullNode;
function GetValue(this: ZNullNode): any;
function Accept(this: ZNullNode, Visitor: ZVisitor): void;
function ZOrNode(this: ZOrNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZOrNode;
function Accept(this: ZOrNode, Visitor: ZVisitor): void;
function ZStringNode(this: ZStringNode, ParentNode: ZNode, Token: ZToken, Value: String): ZStringNode;
function GetValue(this: ZStringNode): any;
function Accept(this: ZStringNode, Visitor: ZVisitor): void;
function ZTypeNode(this: ZTypeNode, ParentNode: ZNode, SourceToken: ZToken, ParsedType: ZType): ZTypeNode;
function GetValue(this: ZTypeNode): any;
function GetVisitName(this: ZTypeNode): String;
function ZGenerator(this: ZGenerator, TargetCode: String, TargetVersion: String): ZGenerator;
function ImportLocalGrammar(this: ZGenerator, NameSpace: ZNameSpace): void;
function EnableVisitor(this: ZGenerator): void;
function StopVisitor(this: ZGenerator): void;
function IsVisitable(this: ZGenerator): boolean;
function GetGrammarInfo(this: ZGenerator): String;
function AppendGrammarInfo(this: ZGenerator, GrammarInfo: String): void;
function GetTargetLangInfo(this: ZGenerator): String;
function CreateImportNode(this: ZGenerator, ParentNode: ZNode): ZImportNode;
function GetFieldType(this: ZGenerator, BaseType: ZType, Name: String): ZType;
function GetSetterType(this: ZGenerator, BaseType: ZType, Name: String): ZType;
function GetConstructorFuncType(this: ZGenerator, ClassType: ZType, List: ZListNode): ZFuncType;
function GetMethodFuncType(this: ZGenerator, RecvType: ZType, MethodName: String, List: ZListNode): ZFuncType;
function GetUniqueNumber(this: ZGenerator): int;
function NameGlobalSymbol(this: ZGenerator, Symbol: String): String;
function SetGlobalValue(this: ZGenerator, GlobalName: String, Value: any): ZNode;
function GetGlobalValue(this: ZGenerator, GlobalName: String): any;
function SetDefinedFunc(this: ZGenerator, Func: ZFunc): void;
function GetDefinedFunc(this: ZGenerator, GlobalName: String): ZFunc;
function GetDefinedFunc(this: ZGenerator, FuncName: String, FuncType: ZFuncType): ZFunc;
function GetDefinedFunc(this: ZGenerator, FuncName: String, RecvType: ZType, FuncParamSize: int): ZFunc;
function NameConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): String;
function SetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType, Func: ZFunc): void;
function GetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc;
function GetCoercionFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc;
function ZIndentToken(this: ZIndentToken, Source: ZSource, StartIndex: int, EndIndex: int): ZIndentToken;
function GetIndentSize(this: ZIndentToken): int;
function ZPatternToken(this: ZPatternToken, Source: ZSource, StartIndex: int, EndIndex: int, PresetPattern: ZSyntax): ZPatternToken;
function ZSourceGenerator(this: ZSourceGenerator, TargetCode: String, TargetVersion: String): ZSourceGenerator;
function GetEngine(this: ZSourceGenerator): ZenEngine;
function NewSourceBuilder(this: ZSourceGenerator): ZSourceBuilder;
function SetNativeType(this: ZSourceGenerator, Type: ZType, TypeName: String): void;
function GetNativeType(this: ZSourceGenerator, Type: ZType): String;
function StartCodeGeneration(this: ZSourceGenerator, Node: ZNode, AllowLazy: boolean, IsInteractive: boolean): boolean;
function GenerateCode(this: ZSourceGenerator, Node: ZNode): void;
function IsNeededSurroud(this: ZSourceGenerator, Node: ZNode): boolean;
function GenerateSurroundCode(this: ZSourceGenerator, Node: ZNode): void;
function AppendCode(this: ZSourceGenerator, RawSource: String): void;
function VisitStmtList(this: ZSourceGenerator, BlockNode: ZBlockNode): void;
function VisitBlockNode(this: ZSourceGenerator, Node: ZBlockNode): void;
function VisitNullNode(this: ZSourceGenerator, Node: ZNullNode): void;
function VisitBooleanNode(this: ZSourceGenerator, Node: ZBooleanNode): void;
function VisitIntNode(this: ZSourceGenerator, Node: ZIntNode): void;
function VisitFloatNode(this: ZSourceGenerator, Node: ZFloatNode): void;
function VisitStringNode(this: ZSourceGenerator, Node: ZStringNode): void;
function VisitArrayLiteralNode(this: ZSourceGenerator, Node: ZArrayLiteralNode): void;
function VisitMapLiteralNode(this: ZSourceGenerator, Node: ZMapLiteralNode): void;
function VisitNewArrayNode(this: ZSourceGenerator, Node: ZNewArrayNode): void;
function VisitNewObjectNode(this: ZSourceGenerator, Node: ZNewanyNode): void;
function VisitGroupNode(this: ZSourceGenerator, Node: ZGroupNode): void;
function VisitGetIndexNode(this: ZSourceGenerator, Node: ZGetIndexNode): void;
function VisitSetIndexNode(this: ZSourceGenerator, Node: ZSetIndexNode): void;
function VisitGetNameNode(this: ZSourceGenerator, Node: ZGetNameNode): void;
function VisitSetNameNode(this: ZSourceGenerator, Node: ZSetNameNode): void;
function VisitGetterNode(this: ZSourceGenerator, Node: ZGetterNode): void;
function VisitSetterNode(this: ZSourceGenerator, Node: ZSetterNode): void;
function VisitMethodCallNode(this: ZSourceGenerator, Node: ZMethodCallNode): void;
function VisitFuncCallNode(this: ZSourceGenerator, Node: ZFuncCallNode): void;
function VisitUnaryNode(this: ZSourceGenerator, Node: ZUnaryNode): void;
function VisitNotNode(this: ZSourceGenerator, Node: ZNotNode): void;
function VisitCastNode(this: ZSourceGenerator, Node: ZCastNode): void;
function VisitInstanceOfNode(this: ZSourceGenerator, Node: ZInstanceOfNode): void;
function VisitBinaryNode(this: ZSourceGenerator, Node: ZBinaryNode): void;
function VisitComparatorNode(this: ZSourceGenerator, Node: ZComparatorNode): void;
function VisitAndNode(this: ZSourceGenerator, Node: ZAndNode): void;
function VisitOrNode(this: ZSourceGenerator, Node: ZOrNode): void;
function VisitIfNode(this: ZSourceGenerator, Node: ZIfNode): void;
function VisitReturnNode(this: ZSourceGenerator, Node: ZReturnNode): void;
function VisitWhileNode(this: ZSourceGenerator, Node: ZWhileNode): void;
function VisitBreakNode(this: ZSourceGenerator, Node: ZBreakNode): void;
function VisitThrowNode(this: ZSourceGenerator, Node: ZThrowNode): void;
function VisitTryNode(this: ZSourceGenerator, Node: ZTryNode): void;
function VisitCatchNode(this: ZSourceGenerator, Node: ZCatchNode): void;
function VisitVarDeclNode(this: ZSourceGenerator, Node: ZVarDeclNode): void;
function VisitTypeAnnotation(this: ZSourceGenerator, Type: ZType): void;
function VisitLetNode(this: ZSourceGenerator, Node: ZLetNode): void;
function VisitParamNode(this: ZSourceGenerator, Node: ZParamNode): void;
function VisitFunctionNode(this: ZSourceGenerator, Node: ZFunctionNode): void;
function VisitClassDeclNode(this: ZSourceGenerator, Node: ZClassDeclNode): void;
function VisitErrorNode(this: ZSourceGenerator, Node: ZErrorNode): void;
function VisitExtendedNode(this: ZSourceGenerator, Node: ZNode): void;
function VisitType(this: ZSourceGenerator, Type: ZType): void;
function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, DelimToken: String, CloseToken: String): void;
function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, CloseToken: String): void;
function ZAndNode(this: ZAndNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZAndNode;
function Accept(this: ZAndNode, Visitor: ZVisitor): void;
function ZArrayLiteralNode(this: ZArrayLiteralNode, ParentNode: ZNode): ZArrayLiteralNode;
function Accept(this: ZArrayLiteralNode, Visitor: ZVisitor): void;
function ZBlockNode(this: ZBlockNode, NameSpace: ZNameSpace): ZBlockNode;
function ZBlockNode(this: ZBlockNode, ParentNode: ZNode, Init: int): ZBlockNode;
function Accept(this: ZBlockNode, Visitor: ZVisitor): void;
function ToReturnNode(this: ZBlockNode): ZReturnNode;
function ZBooleanNode(this: ZBooleanNode, ParentNode: ZNode, Token: ZToken, Value: boolean): ZBooleanNode;
function Accept(this: ZBooleanNode, Visitor: ZVisitor): void;
function GetValue(this: ZBooleanNode): any;
function ZClassDeclNode(this: ZClassDeclNode, ParentNode: ZNode): ZClassDeclNode;
function SetTypeInfo(this: ZClassDeclNode, Type: ZType): void;
function SetNameInfo(this: ZClassDeclNode, Name: String): void;
function GetFieldNode(this: ZClassDeclNode, Index: int): ZFieldNode;
function Accept(this: ZClassDeclNode, Visitor: ZVisitor): void;
function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncNode: ZNode): ZFuncCallNode;
function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, SourceToken: ZToken, ResolvedFunc: ZFunc): ZFuncCallNode;
function GetRecvType(this: ZFuncCallNode): ZType;
function Accept(this: ZFuncCallNode, Visitor: ZVisitor): void;
function ZFunctionNode(this: ZFunctionNode, ParentNode: ZNode): ZFunctionNode;
function SetTypeInfo(this: ZFunctionNode, Type: ZType): void;
function SetNameInfo(this: ZFunctionNode, Name: String): void;
function Accept(this: ZFunctionNode, Visitor: ZVisitor): void;
function GetParamNode(this: ZFunctionNode, Index: int): ZParamNode;
function GetFuncType(this: ZFunctionNode, ContextType: ZType): ZFuncType;
function Push(this: ZFunctionNode, Parent: ZFunctionNode): ZFunctionNode;
function Pop(this: ZFunctionNode): ZFunctionNode;
function GetVarIndex(this: ZFunctionNode): int;
function ZVarDeclNode(this: ZVarDeclNode, ParentNode: ZNode): ZVarDeclNode;
function SetNameInfo(this: ZVarDeclNode, Name: String): void;
function SetTypeInfo(this: ZVarDeclNode, Type: ZType): void;
function Accept(this: ZVarDeclNode, Visitor: ZVisitor): void;
function ZNode(this: ZNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZNode {
	assert(this != ParentNode);
	this.ParentNode = ParentNode;
	this.SourceToken = SourceToken;
	if(Size > 0) {
		this.AST = new ZNode[Size];
	}
	else {
		this.AST = null;
	}
}

function SetChild(this: ZNode, Node: ZNode): ZNode {
	assert(Node != null);
	if(Node != null) {
		assert(this != Node);
		Node.ParentNode = this;
	}
	return Node;
}

function SetNameInfo(this: ZNode, Name: String): void {
	assert(Name == null);  // Set SetName in a sub class property
}

function SetTypeInfo(this: ZNode, Type: ZType): void {
	this.Type = Type;  // default behavior
}

function Set(this: ZNode, Index: int, Node: ZNode): void {
	if(Index >= 0) {
		this.AST[Index] = Node;
	}
	else if(Index == ZNode.AppendIndex) {
		var ListNode: ZNode = this;
		if(ListNode instanceof ZListNode) {
			((ZListNode)ListNode).Append(Node);
		}
		else {
			System.out.println("parent=" + ListNode + ", node=" + Node);
			assert(ListNode instanceof ZListNode);
		}
	}
	else if(Index == ZNode.NameInfo) {
		this.SetNameInfo(Node.SourceToken.GetText());
		this.SourceToken = Node.SourceToken;
	}
	else if(Index == ZNode.TypeInfo) {
		this.SetTypeInfo(Node.Type);
	}
}

function GetAstSize(this: ZNode): int {
	if(this.AST == null) {
		return 0;
	}
	return this.AST.length;
}

function HasAst(this: ZNode, Index: int): boolean {
	if(this.AST != null && Index < this.AST.length) {
		return this.AST[Index] != null;
	}
	return false;
}

function GetAstType(this: ZNode, Index: int): ZType {
	return this.AST[Index].Type;
}

function toString(this: ZNode): String {
	var Self: String = "#" + this.getClass().getSimpleName();
	if(!this.Type.IsVarType()) {
		Self = Self + ":" + this.Type;
	}
	if(this.AST != null) {
		var i: int = 0;
		Self = Self + "[";
		while(i < this.AST.length) {
			if(i > 0) {
				Self = Self + ",";
			}
			if(this.AST[i] == null) {
				Self = Self + "null";
			}
			else {
				Self = Self + this.AST[i].toString();
			}
			i = i + 1;
		}
		Self = Self + "]";
	}
	return Self;
}

function GetScopeBlockNode(this: ZNode): ZBlockNode {
	ZNode Node = this;
	while(Node != null) {
		if(Node instanceof ZBlockNode) {
			return (ZBlockNode)Node;
		}
		if(Node == Node.ParentNode) {
			throw new RuntimeException("serious error: parent node is same: " + Node);
		}
		Node = Node.ParentNode;
	}
	return null;
}

function GetNameSpace(this: ZNode): ZNameSpace {
	ZBlockNode BlockNode = this.GetScopeBlockNode();
	return BlockNode.NameSpace;
}

function IsErrorNode(this: ZNode): boolean {
	return (this instanceof ZErrorNode);
}

function IsBreakingBlock(this: ZNode): boolean {
	return false;
}

function GetVisitName(this: ZNode): String {
	return "VisitExtendedNode"; // override this if you want to use additional node
}

function DeSugar(this: ZNode, Generator: ZGenerator): ZNode {
	return this;
}

function Accept(this: ZNode, Visitor: ZVisitor): void {
	LibZen.DispatchVisitNode(Visitor, this);
}

function IsUntyped(this: ZNode): boolean {
	return this.Type.IsVarType();
}

function HasUntypedNode(this: ZNode): boolean {
	if(this.HasUntypedNode) {
		if(!this.IsUntyped()) {
			var i: int = 0;
			while(i < this.GetAstSize()) {
				if(this.AST[i] != null && this.AST[i].HasUntypedNode()) {
					return true;
				}
				i = i + 1;
			}
			this.HasUntypedNode = false;
			return false;
		}
	}
	return this.HasUntypedNode;
}

function VisitTypeChecker(this: ZNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode {
	return TypeChecker.VisitTypeChecker(this, ContextType);
}

function ToReturnNode(this: ZNode): ZReturnNode {
	return null;
}

function GetPrevNode(this: ZNode): ZNode {
	if(this.ParentNode == null) {
		return null;
	}
	if(this.ParentNode instanceof ZBlockNode) {
		ZBlockNode Block = (ZBlockNode) this.ParentNode;
		for (int i = 1; i < Block.GetListSize(); i++) {
			if(Block.GetListAt(i) == this) {
				return Block.GetListAt(i-1);
			}
		}
	}
	return null;
}

function GetNextNode(this: ZNode): ZNode {
	if(this.ParentNode == null) {
		return null;
	}
	if(this.ParentNode instanceof ZBlockNode) {
		ZBlockNode Block = (ZBlockNode) this.ParentNode;
		for (int i = 0; i < Block.GetListSize() - 1; i++) {
			if(Block.GetListAt(i) == this) {
				return Block.GetListAt(i+1);
			}
		}
	}
	return null;
}

function ZParamNode(this: ZParamNode, ParentNode: ZNode): ZParamNode {
	super(ParentNode, null, 0);
}

function GetVisitName(this: ZParamNode): String {
	return "VisitParamNode"; // override this if you want to use additional node
}

function SetNameInfo(this: ZParamNode, Name: String): void {
	this.Name = Name;
}

function ZReturnNode(this: ZReturnNode, ParentNode: ZNode): ZReturnNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZReturnNode, Visitor: ZVisitor): void {
	Visitor.VisitReturnNode(this);
}

function ToReturnNode(this: ZReturnNode): ZReturnNode {
	return this;
}

function ZSetIndexNode(this: ZSetIndexNode, ParentNode: ZNode, LeftNode: ZNode): ZSetIndexNode {
	super(ParentNode, null, 3);
	this.Set(ZSetIndexNode_Recv, LeftNode);
}

function Accept(this: ZSetIndexNode, Visitor: ZVisitor): void {
	Visitor.VisitSetIndexNode(this);
}

function ZSetNameNode(this: ZSetNameNode, ParentNode: ZNode, Token: ZToken, VarName: String): ZSetNameNode {
	super(ParentNode, Token, 1);
	this.VarName = VarName;
}

function Accept(this: ZSetNameNode, Visitor: ZVisitor): void {
	Visitor.VisitSetNameNode(this);
}

function ZSetterNode(this: ZSetterNode, ParentNode: ZNode, RecvNode: ZNode): ZSetterNode {
	super(ParentNode, null, 2);
	this.Set(ZSetterNode_Recv, RecvNode);
}

function SetNameInfo(this: ZSetterNode, Name: String): void {
	this.FieldName = Name;
}

function Accept(this: ZSetterNode, Visitor: ZVisitor): void {
	Visitor.VisitSetterNode(this);
}

function IsStaticField(this: ZSetterNode): boolean {
	return this.AST[ZSetterNode_Recv] instanceof ZTypeNode;
}

function ZThrowNode(this: ZThrowNode, ParentNode: ZNode): ZThrowNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZThrowNode, Visitor: ZVisitor): void {
	Visitor.VisitThrowNode(this);
}

function ZTryNode(this: ZTryNode, ParentNode: ZNode): ZTryNode {
	super(ParentNode, null, 3);
}

function Accept(this: ZTryNode, Visitor: ZVisitor): void {
	Visitor.VisitTryNode(this);
}

function ZUnaryNode(this: ZUnaryNode, ParentNode: ZNode, Token: ZToken): ZUnaryNode {
	super(ParentNode, Token, 1);
}

function Accept(this: ZUnaryNode, Visitor: ZVisitor): void {
	Visitor.VisitUnaryNode(this);
}

function ZWhileNode(this: ZWhileNode, ParentNode: ZNode): ZWhileNode {
	super(ParentNode, null, 2);
}

function Accept(this: ZWhileNode, Visitor: ZVisitor): void {
	Visitor.VisitWhileNode(this);
}

function ZLogger(this: ZLogger): ZLogger {
	if(LibZen_GetEnv("ZENSTAT") != null) {
		this.StatMap = {};
	}
	else {
		this.StatMap = null;
	}
}

function Report(this: ZLogger, Message: String): void {
	this.ReportedErrorList.add(Message);
}

function Report(this: ZLogger, Level: int, Token: ZToken, Message: String): String {
	if(Token != null && !Token.IsNull()) {
		if(Level == ZLogger_ErrorLevel) {
			Message = Token.Source.MakeBody("error", Token.StartIndex, Message);
		}
		else if(Level == ZLogger_TypeErrorLevel) {
			Message = Token.Source.MakeBody("error", Token.StartIndex, Message);
		}
		else if(Level == ZLogger_WarningLevel) {
			Message = Token.Source.MakeBody("warning", Token.StartIndex, Message);
		}
		else if(Level == ZLogger_InfoLevel) {
			Message = Token.Source.MakeBody("info", Token.StartIndex, Message);
		}
		else {
			Message = Token.Source.MakeBody("debug", Token.StartIndex, Message);
		}
		this.ReportedErrorList.add(Message);
	}
	else {
		LibZen.DebugP("unknown source error:" + Message);
	}
	return Message;
}

function ReportError(this: ZLogger, Token: ZToken, Message: String): String {
	return this.Report(ZLogger_ErrorLevel, Token, Message);
}

function ReportWarning(this: ZLogger, Token: ZToken, Message: String): String {
	return this.Report(ZLogger_WarningLevel, Token, Message);
}

function ReportInfo(this: ZLogger, Token: ZToken, Message: String): String {
	return this.Report(ZLogger_InfoLevel, Token, Message);
}

function ReportDebug(this: ZLogger, Token: ZToken, Message: String): String {
	return this.Report(ZLogger_DebugLevel, Token, Message);
}

function GetReportedErrors(this: ZLogger): String[] {
	var List: String[] = this.ReportedErrorList;
	this.ReportedErrorList = [];
	return LibZen.CompactStringList(List);
}

function ShowErrors(this: ZLogger): void {
	var Messages: String[] = this.GetReportedErrors();
	for(var i: int = 0; i < Messages.length; i = i + 1) {
		LibZen_PrintLine(Messages[i]);
	}
}

function Count(this: ZLogger, EventName: String): void {
	if(this.StatMap != null) {
		ZCounter Counter = this.StatMap.GetOrNull(EventName);
		if(Counter == null) {
			Counter = new ZCounter();
			this.StatMap.put(EventName, Counter);
		}
		else {
			Counter.count = Counter.count + 1;
		}
	}
}

function CountCreation(this: ZLogger, CreatedObject: any): void {
	if(this.StatMap != null) {
		var EventName: String = "CreationOf" + LibZen.GetClassName(CreatedObject);
		var Counter: ZCounter = this.StatMap.GetOrNull(EventName);
		if(Counter == null) {
			Counter = new ZCounter();
			this.StatMap.put(EventName, Counter);
		}
		else {
			Counter.count = Counter.count + 1;
		}
	}
}

function ZCounter(this: ZCounter): ZCounter {
}

function ZNameSpace(this: ZNameSpace, Generator: ZGenerator, ParentNameSpace: ZNameSpace): ZNameSpace {
	this.ParentNameSpace = ParentNameSpace;
	if(ParentNameSpace == null) {
		this.Generator = Generator;
	}
	else {
		this.Generator = ParentNameSpace.Generator;
	}
	this.SerialId = SerialNumber;
	SerialNumber = SerialNumber + 1;
}

function toString(this: ZNameSpace): String {
	return "NS["+this.SerialId+"]";
}

function CreateSubNameSpace(this: ZNameSpace): ZNameSpace {
	return new ZNameSpace(null, this);
}

function GetRootNameSpace(this: ZNameSpace): ZNameSpace {
	return this.Generator.RootNameSpace;
}

function GetTokenFunc(this: ZNameSpace, ZenChar: int): ZTokenFunc {
	if(this.TokenMatrix == null) {
		return this.ParentNameSpace.GetTokenFunc(ZenChar);
	}
	return this.TokenMatrix[ZenChar];
}

function JoinParentFunc(this: ZNameSpace, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc {
	if(Parent != null && Parent.Func == Func) {
		return Parent;
	}
	return new ZTokenFunc(Func, Parent);
}

function AppendTokenFunc(this: ZNameSpace, keys: String, TokenFunc: ZTokenFunction): void {
	if(this.TokenMatrix == null) {
		this.TokenMatrix = LibZen_NewTokenMatrix();
		if(this.ParentNameSpace != null) {
			for(var i: int = 0; i < this.TokenMatrix.length; i += 1) {
				this.TokenMatrix[i] = this.ParentNameSpace.GetTokenFunc(i);
			}
		}
	}
	for(var i: int = 0; i < keys.length(); i += 1) {
		var kchar: int = LibZen_GetTokenMatrixIndex(LibZen_GetChar(keys, i));
		this.TokenMatrix[kchar] = this.JoinParentFunc(TokenFunc, this.TokenMatrix[kchar]);
	}
}

function GetSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax {
	var NameSpace: ZNameSpace = this;
	while(NameSpace != null) {
		if(NameSpace.SyntaxTable != null) {
			return NameSpace.SyntaxTable.GetOrNull(PatternName);
		}
		NameSpace = NameSpace.ParentNameSpace;
	}
	return null;
}

function SetSyntaxPattern(this: ZNameSpace, PatternName: String, Syntax: ZSyntax): void {
	if(this.SyntaxTable == null) {
		this.SyntaxTable = {};
	}
	this.SyntaxTable.put(PatternName, Syntax);
}

function GetRightSyntaxPattern(this: ZNameSpace, PatternName: String): ZSyntax {
	return this.GetSyntaxPattern(ZNameSpace.RightPatternSymbol(PatternName));
}

function AppendSyntaxPattern(this: ZNameSpace, PatternName: String, NewPattern: ZSyntax): void {
	LibZen_Assert(NewPattern.ParentPattern == null);
	var ParentPattern: ZSyntax = this.GetSyntaxPattern(PatternName);
	NewPattern.ParentPattern = ParentPattern;
	this.SetSyntaxPattern(PatternName, NewPattern);
}

function DefineStatement(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void {
	var Alias: int = PatternName.indexOf(" ");
	var Name: String = (Alias == -1) ? PatternName : PatternName.substring(0, Alias);
	var Pattern: ZSyntax = new ZSyntax(this, Name, MatchFunc);
	Pattern.IsStatement = true;
	this.AppendSyntaxPattern(Name, Pattern);
	if(Alias != -1) {
		this.DefineStatement(PatternName.substring(Alias+1), MatchFunc);
	}
}

function DefineExpression(this: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): void {
	var Alias: int = PatternName.indexOf(" ");
	var Name: String = (Alias == -1) ? PatternName : PatternName.substring(0, Alias);
	var Pattern: ZSyntax = new ZSyntax(this, Name, MatchFunc);
	this.AppendSyntaxPattern(Name, Pattern);
	if(Alias != -1) {
		this.DefineExpression(PatternName.substring(Alias+1), MatchFunc);
	}
}

function DefineRightExpression(this: ZNameSpace, PatternName: String, SyntaxFlag: int, MatchFunc: ZMatchFunction): void {
	var Alias: int = PatternName.indexOf(" ");
	var Name: String = (Alias == -1) ? PatternName : PatternName.substring(0, Alias);
	var Pattern: ZSyntax = new ZSyntax(this, Name, MatchFunc);
	Pattern.SyntaxFlag = SyntaxFlag;
	this.AppendSyntaxPattern(ZNameSpace.RightPatternSymbol(Name), Pattern);
	if(Alias != -1) {
		this.DefineRightExpression(PatternName.substring(Alias+1), SyntaxFlag, MatchFunc);
	}
}

function GetSymbol(this: ZNameSpace, Symbol: String): ZSymbolEntry {
	var NameSpace: ZNameSpace = this;
	while(NameSpace != null) {
		if(NameSpace.SymbolTable != null) {
			var Entry: ZSymbolEntry = NameSpace.SymbolTable.GetOrNull(Symbol);
			if(Entry != null) {
				if(Entry.IsDisabled) {
					return null;
				}
				return Entry;
			}
		}
		NameSpace = NameSpace.ParentNameSpace;
	}
	return null;
}

function GetSymbolNode(this: ZNameSpace, Symbol: String): ZNode {
	ZSymbolEntry Entry = this.GetSymbol(Symbol);
	if(Entry != null) {
		return Entry.Node;
	}
	return null;
}

function SetLocalSymbolEntry(this: ZNameSpace, Symbol: String, Entry: ZSymbolEntry): void {
	if(this.SymbolTable == null) {
		this.SymbolTable = {};
	}
	this.SymbolTable.put(Symbol, Entry);
}

function SetLocalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry {
	var Parent: ZSymbolEntry = this.GetSymbol(Symbol);
	Node.ParentNode = null; // kill links
	this.SetLocalSymbolEntry(Symbol, new ZSymbolEntry(Parent, Node));
	return Parent;
}

function SetGlobalSymbol(this: ZNameSpace, Symbol: String, Node: ZNode): ZSymbolEntry {
	return this.GetRootNameSpace().SetLocalSymbol(Symbol, Node);
}

function GetLocalVariable(this: ZNameSpace, VarName: String): ZVariable {
	ZSymbolEntry Entry = this.GetSymbol(VarName);
	if(Entry instanceof ZVariable) {
		return (ZVariable)Entry;
	}
	return null;
}

function SetLocalVariable(this: ZNameSpace, FunctionNode: ZFunctionNode, VarType: ZType, VarName: String, SourceToken: ZToken): void {
	var Parent: ZSymbolEntry = this.GetSymbol(VarName);
	var VarInfo: ZVariable = new ZVariable(Parent, FunctionNode, 0, VarType, VarName, SourceToken);
	this.SetLocalSymbolEntry(VarName, VarInfo);
}

function SetTypeName(this: ZNameSpace, Name: String, Type: ZType, SourceToken: ZToken): void {
	ZTypeNode Node = new ZTypeNode(null, SourceToken, Type);
	this.SetLocalSymbol(Name, Node);
}

function SetTypeName(this: ZNameSpace, Type: ZType, SourceToken: ZToken): void {
	this.SetTypeName(Type.ShortName, Type, SourceToken);
}

function GetTypeNode(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZTypeNode {
	var Node: ZNode = this.GetSymbolNode(TypeName);
	if(Node instanceof ZTypeNode) {
		return (ZTypeNode)Node;
	}
	if(Node == null && SourceToken != null) {
		var Type: ZType = new ZClassType(TypeName, ZType.VarType);
		this.GetRootNameSpace().SetTypeName(TypeName, Type, SourceToken);
		return this.GetTypeNode(TypeName, null/*don"t create again*/);
	}
	return null;
}

function GetType(this: ZNameSpace, TypeName: String, SourceToken: ZToken): ZType {
	var TypeNode: ZTypeNode = this.GetTypeNode(TypeName, SourceToken);
	if(TypeNode != null) {
		return TypeNode.Type;
	}
	return null;
}

function ZSource(this: ZSource, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSource {
	this.FileName = FileName;
	this.LineNumber = LineNumber;
	this.TokenContext = TokenContext;
	this.SourceText = Source;
	this.Logger = TokenContext.Generator.Logger;
}

function GetLineNumber(this: ZSource, Position: int): int {
	var LineNumber: int = this.LineNumber;
	var i: int = 0;
	while(i < Position) {
		char ch = this.SourceText.charAt(i);
		if(ch == "\n") {
			LineNumber = LineNumber + 1;
		}
		i = i + 1;
	}
	return LineNumber;
}

function GetLineHeadPosition(this: ZSource, Position: int): int {
	var s: String = this.SourceText;
	var StartIndex: int = 0;
	var i: int = Position;
	if(!(i < s.length())) {
		i = s.length() - 1;
	}
	while(i >= 0) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			StartIndex = i + 1;
			break;
		}
		i = i - 1;
	}
	return StartIndex;
}

function CountIndentSize(this: ZSource, Position: int): int {
	var s: String = this.SourceText;
	var length: int = 0;
	var i: int = Position;
	while(i < s.length()) {
		var ch: String = s.charAt(i);
		if(ch == "\t") {
			length = length + 8;
		}
		else if(ch == " ") {
			length = length + 1;
		}
		else {
			break;
		}
		i = i + 1;
	}
	return length;
}

function GetLineText(this: ZSource, Position: int): String {
	var s: String = this.SourceText;
	var StartIndex: int = 0;
	var EndIndex: int = s.length();
	var i: int = Position;
	if(!(i < s.length())) {
		i = s.length() - 1;
	}
	while(i >= 0) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			StartIndex = i + 1;
			break;
		}
		i = i - 1;
	}
	i = Position;
	while(i < s.length()) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			EndIndex = i;
			break;
		}
		i = i + 1;
	}
	return s.substring(StartIndex, EndIndex);
}

function GetLineMarker(this: ZSource, Position: int): String {
	var s: String = this.SourceText;
	var StartIndex: int = 0;
	var i: int = Position;
	if(!(i < s.length())) {
		i = s.length() - 1;
	}
	while(i >= 0) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			StartIndex = i + 1;
			break;
		}
		i = i - 1;
	}
	var Line: String = "";
	i = StartIndex;
	while(i < Position) {
		char ch = s.charAt(i);
		if(ch == "\n") {
			break;
		}
		if(ch == "\t") {
			Line = Line + "\t";
		}
		else {
			Line = Line + " ";
		}
		i = i + 1;
	}
	return Line + "^";
}

function MakeHeader(this: ZSource, Error: String, Position: int, Message: String): String {
	return "(" + this.FileName + ":" + this.GetLineNumber(Position) + ") [" + Error +"] " + Message;
}

function MakeBody(this: ZSource, Error: String, Position: int, Message: String): String {
	var Line: String = this.GetLineText(Position);
	var Delim: String = "\n\t";
	if(Line.startsWith("\t") || Line.startsWith(" ")) {
		Delim = "\n";
	}
	return this.MakeHeader(Error, Position, Message) + Delim + Line + Delim + this.GetLineMarker(Position);
}

function Panic(this: ZSource, Position: int, Message: String): void {
	this.Logger.Report(this.MakeBody("panic", Position, Message));
}

function Warning(this: ZSource, Position: int, Message: String): void {
	this.Logger.Report(this.MakeBody("warning", Position, Message));
}

function SourceAt(this: ZSource, n: int): String {
	if(0 <= n && n < this.SourceText.length()) {
		return this.SourceText.charAt(n);
	}
	return "\0";
}

function ZSourceBuilder(this: ZSourceBuilder, Template: ZSourceGenerator): ZSourceBuilder {
	this.Template = Template;
}

function Clear(this: ZSourceBuilder): void {
	this.SourceList.clear();
}

function Append(this: ZSourceBuilder, Text: String): void {
	this.SourceList.add(Text);
}

function AppendLineFeed(this: ZSourceBuilder): void {
	if (this.BufferedLineComment.length() > 0) {
		this.SourceList.add(this.BufferedLineComment);
		this.BufferedLineComment = "";
	}
	this.SourceList.add(this.Template.LineFeed);
}

function AppendWhiteSpace(this: ZSourceBuilder): void {
	if(this.SourceList.size() > 0) {
		var Last: String = this.SourceList.get(this.SourceList.size()-1);
		if(Last.endsWith(" ") || Last.endsWith("\n") || Last.endsWith("\t")) {
			return;
		}
	}
	this.SourceList.add(" ");
}

function AppendToken(this: ZSourceBuilder, Text: String): void {
	this.AppendWhiteSpace();
	this.SourceList.add(Text);
	this.AppendWhiteSpace();
}

function AppendBlockComment(this: ZSourceBuilder, Text: String): void {
	if (this.Template.BeginComment != null) {
		this.SourceList.add(this.Template.BeginComment);
		this.SourceList.add(Text);
		this.SourceList.add(this.Template.EndComment);
	} else if (this.Template.LineComment != null) {
		this.BufferedLineComment = this.BufferedLineComment + this.Template.LineComment + Text;
	}
}

function AppendCommentLine(this: ZSourceBuilder, Text: String): void {
	if (this.Template.LineComment == null) {
		this.SourceList.add(this.Template.BeginComment);
		this.SourceList.add(Text);
		this.SourceList.add(this.Template.EndComment);
	} else {
		this.SourceList.add(this.Template.LineComment);
		this.SourceList.add(Text);
	}
	this.SourceList.add(this.Template.LineFeed);
}

function Indent(this: ZSourceBuilder): void {
	this.IndentLevel = this.IndentLevel + 1;
	this.CurrentIndentString = null;
}

function UnIndent(this: ZSourceBuilder): void {
	this.IndentLevel = this.IndentLevel - 1;
	this.CurrentIndentString = null;
	LibZen_Assert(this.IndentLevel >= 0);
}

function GetIndentString(this: ZSourceBuilder): String {
	if (this.CurrentIndentString == null) {
		this.CurrentIndentString = LibZen_JoinStrings(this.Template.Tab, this.IndentLevel);
	}
	return this.CurrentIndentString;
}

function AppendIndent(this: ZSourceBuilder): void {
	this.SourceList.add(this.GetIndentString());
}

function IndentAndAppend(this: ZSourceBuilder, Text: String): void {
	this.SourceList.add(this.GetIndentString());
	this.SourceList.add(Text);
}

function AppendParamList(this: ZSourceBuilder, ParamList: ZListNode, BeginIdx: int, EndIdx: int): void {
	var i: int = BeginIdx;
	while(i < EndIdx) {
		if (i > BeginIdx) {
			this.Append(this.Template.Camma);
		}
		ParamList.GetListAt(i).Accept(this.Template);
		i = i + 1;
	}
}

function toString(this: ZSourceBuilder): String {
	return LibZen_SourceBuilderToString(this);
}

function AppendLine(this: ZSourceBuilder, Text: String): void {
	this.Append(Text);
	this.AppendLineFeed();
}

function ZSourceContext(this: ZSourceContext, FileName: String, LineNumber: int, Source: String, TokenContext: ZTokenContext): ZSourceContext {
	super(FileName, LineNumber, Source, TokenContext);
}

function GetCharCode(this: ZSourceContext): int {
	return LibZen_GetTokenMatrixIndex(LibZen_GetChar(this.SourceText, this.SourcePosition));
}

function GetPosition(this: ZSourceContext): int {
	return this.SourcePosition;
}

function HasChar(this: ZSourceContext): boolean {
	return this.SourceText.length() - this.SourcePosition > 0;
}

function ParseChar(this: ZSourceContext): String {
	return this.SourceText.charAt(this.SourcePosition);
}

function ParseChar(this: ZSourceContext, n: int): String {
	if(this.SourcePosition+n < this.SourceText.length()) {
		return this.SourceText.charAt(this.SourcePosition+n);
	}
	return "\0";
}

function MoveNext(this: ZSourceContext): void {
	this.SourcePosition = this.SourcePosition + 1;
}

function SkipWhiteSpace(this: ZSourceContext): void {
	while(this.HasChar()) {
		var ch: String = this.ParseChar();
		if(ch != " " && ch != "\t") {
			break;
		}
		this.MoveNext();
	}
}

function FoundIndent(this: ZSourceContext, StartIndex: int, EndIndex: int): void {
	var Token: ZToken = new ZIndentToken(this, StartIndex, EndIndex);
	this.SourcePosition = EndIndex;
	this.TokenContext.TokenList.add(Token);
}

function Tokenize(this: ZSourceContext, StartIndex: int, EndIndex: int): void {
	this.SourcePosition = EndIndex;
	if(StartIndex < EndIndex && EndIndex <= this.SourceText.length()) {
		var Token: ZToken = new ZToken(this, StartIndex, EndIndex);
		this.TokenContext.TokenList.add(Token);
	}
}

function Tokenize(this: ZSourceContext, PatternName: String, StartIndex: int, EndIndex: int): void {
	this.SourcePosition = EndIndex;
	if(StartIndex <= EndIndex && EndIndex <= this.SourceText.length()) {
		ZSyntax Pattern = this.TokenContext.NameSpace.GetSyntaxPattern(PatternName);
		if(Pattern == null) {
			this.Panic(StartIndex, "unregistered token pattern: " + PatternName);
			var Token: ZToken = new ZToken(this, StartIndex, EndIndex);
			this.TokenContext.TokenList.add(Token);
		}
		else {
			var Token: ZToken = new ZPatternToken(this, StartIndex, EndIndex, Pattern);
			this.TokenContext.TokenList.add(Token);
		}
	}
}

function IsDefinedSyntax(this: ZSourceContext, StartIndex: int, EndIndex: int): boolean {
	if(EndIndex < this.SourceText.length()) {
		var NameSpace: ZNameSpace = this.TokenContext.NameSpace;
		var Token: String = this.SourceText.substring(StartIndex, EndIndex);
		var Pattern: ZSyntax = NameSpace.GetRightSyntaxPattern(Token);
		if(Pattern != null) {
			return true;
		}
	}
	return false;
}

function TokenizeDefinedSymbol(this: ZSourceContext, StartIndex: int): void {
	var EndIndex: int = StartIndex + 2;
	while(this.IsDefinedSyntax(StartIndex, EndIndex)) {
		EndIndex = EndIndex + 1;
	}
	this.Tokenize(StartIndex, EndIndex-1);
}

function ApplyTokenFunc(this: ZSourceContext, TokenFunc: ZTokenFunc): void {
	var RollbackPosition: int = this.SourcePosition;
	while(TokenFunc != null) {
		this.SourcePosition = RollbackPosition;
		if(LibZen.ApplyTokenFunc(TokenFunc.Func, this)) {
			return;
		}
		TokenFunc = TokenFunc.ParentFunc;
	}
	this.TokenizeDefinedSymbol(RollbackPosition);
}

function DoTokenize(this: ZSourceContext): boolean {
	var TokenSize: int = this.TokenContext.TokenList.size();
	var CheckPosition: int = this.SourcePosition;
	while(this.HasChar()) {
		var CharCode: int = this.GetCharCode();
		var TokenFunc: ZTokenFunc = this.TokenContext.NameSpace.GetTokenFunc(CharCode);
		this.ApplyTokenFunc(TokenFunc);
		if(this.TokenContext.TokenList.size() > TokenSize) {
			break;
		}
		if(this.SourcePosition == CheckPosition) {
			LibZen_PrintLine("Buggy TokenFunc: " + TokenFunc);
			this.MoveNext();
		}
	}
	if(this.TokenContext.TokenList.size() > TokenSize) {
		return true;
	}
	return false;
}

function ZSymbolEntry(this: ZSymbolEntry, Parent: ZSymbolEntry, Node: ZNode): ZSymbolEntry {
	this.Parent = Parent;
	this.Node = Node;
}

function ZSyntax(this: ZSyntax, NameSpace: ZNameSpace, PatternName: String, MatchFunc: ZMatchFunction): ZSyntax {
	this.PackageNameSpace = NameSpace;
	this.PatternName = PatternName;
	this.MatchFunc = MatchFunc;
}

function toString(this: ZSyntax): String {
	return this.PatternName + "{" + this.MatchFunc + "}";
}

function IsBinaryOperator(this: ZSyntax): boolean {
	return LibZen_IsFlag(this.SyntaxFlag, ZSyntax_BinaryOperator);
}

function IsRightJoin(this: ZSyntax, Right: ZSyntax): boolean {
	var left: int = this.SyntaxFlag;
	var right: int = Right.SyntaxFlag;
	return (left < right || (left == right && !LibZen_IsFlag(left, ZSyntax_LeftJoin) && !LibZen_IsFlag(right, ZSyntax_LeftJoin)));
}

function EqualsName(this: ZSyntax, Name: String): boolean {
	return LibZen_EqualsString(this.PatternName, Name);
}

function ZToken(this: ZToken, Source: ZSource, StartIndex: int, EndIndex: int): ZToken {
	this.Source = Source;
	this.StartIndex = StartIndex;
	this.EndIndex = EndIndex;
}

function GetFileName(this: ZToken): String {
	return this.Source.FileName;
}

function GetLineNumber(this: ZToken): int {
	return this.Source.GetLineNumber(this.StartIndex);
}

function GetChar(this: ZToken): String {
	if(this.Source != null) {
		return this.Source.SourceText.charAt(this.StartIndex);
	}
	return "\0";
}

function GetText(this: ZToken): String {
	if(this.Source != null) {
		return this.Source.SourceText.substring(this.StartIndex, this.EndIndex);
	}
	return "";
}

function toString(this: ZToken): String {
	char ch = this.Source.SourceAt(this.StartIndex-1);
	if(ch == "\"") {
		return "\"" + this.GetText() + "\"";
	}
	return this.GetText();
}

function EqualsText(this: ZToken, ch: String): boolean {
	if(this.EndIndex - this.StartIndex == 1) {
		if(this.Source.SourceText.charAt(this.StartIndex) == ch) {
			return true;
		}
	}
	return false;
}

function EqualsText(this: ZToken, Text: String): boolean {
	if(Text.length() == this.EndIndex - this.StartIndex) {
		var s: String = this.Source.SourceText;
		var i: int = 0;
		while(i < Text.length()) {
			if(s.charAt(this.StartIndex+i) != Text.charAt(i)) {
				return false;
			}
			i = i + 1;
		}
		return true;
	}
	return false;
}

function StartsWith(this: ZToken, Text: String): boolean {
	if(Text.length() <= this.EndIndex - this.StartIndex) {
		var s: String = this.Source.SourceText;
		var i: int = 0;
		while(i < Text.length()) {
			if(s.charAt(this.StartIndex+i) != Text.charAt(i)) {
				return false;
			}
			i = i + 1;
		}
		return true;
	}
	return false;
}

function IsNull(this: ZToken): boolean {
	return (this == ZToken.NullToken);
}

function IsIndent(this: ZToken): boolean {
	return this instanceof ZIndentToken;
}

function IsNextWhiteSpace(this: ZToken): boolean {
	char ch = this.Source.SourceAt(this.EndIndex+1);
	if(ch == " " || ch == "\t" || ch == "\n") {
		return true;
	}
	return false;
}

function IsNameSymbol(this: ZToken): boolean {
	char ch = this.Source.SourceAt(this.StartIndex);
	return LibZen_IsSymbol(ch);
}

function GetIndentSize(this: ZToken): int {
	if(this.Source != null) {
		return this.Source.CountIndentSize(this.Source.GetLineHeadPosition(this.StartIndex));
	}
	return 0;
}

function ZTokenContext(this: ZTokenContext, Generator: ZGenerator, NameSpace: ZNameSpace, FileName: String, LineNumber: int, SourceText: String): ZTokenContext {
	this.Generator = Generator;
	this.NameSpace = NameSpace;
	this.Source = new ZSourceContext(FileName, LineNumber, SourceText, this);
}

function SetParseFlag(this: ZTokenContext, AllowSkipIndent: boolean): boolean {
	boolean OldFlag = this.IsAllowSkipIndent;
	this.IsAllowSkipIndent = AllowSkipIndent;
	return OldFlag;
}

function GetBeforeToken(this: ZTokenContext): ZToken {
	var MovingPos: int = this.CurrentPosition - 1;
	while(MovingPos >= 0 && MovingPos < this.TokenList.size()) {
		var Token: ZToken = this.TokenList.get(MovingPos);
		if(!Token.IsIndent()) {
			return Token;
		}
		MovingPos = MovingPos - 1;
	}
	return this.LatestToken;
}

function CreateExpectedErrorNode(this: ZTokenContext, SourceToken: ZToken, ExpectedTokenText: String): ZNode {
	if(SourceToken == null || SourceToken.IsNull()) {
		SourceToken = this.GetBeforeToken();
		SourceToken = new ZToken(SourceToken.Source, SourceToken.EndIndex, SourceToken.EndIndex);
		return new ZErrorNode(null, SourceToken, ExpectedTokenText + " is expected");
	}
	return new ZErrorNode(null, SourceToken, ExpectedTokenText + " is expected");
}

function Vacume(this: ZTokenContext): void {
}

function MoveNext(this: ZTokenContext): void {
	this.CurrentPosition = this.CurrentPosition + 1;
}

function GetToken(this: ZTokenContext, EnforceMoveNext: boolean): ZToken {
	while(true) {
		if(!(this.CurrentPosition < this.TokenList.size())) {
			if(!this.Source.DoTokenize()) {
				break;
			}
		}
		var Token: ZToken = this.TokenList.get(this.CurrentPosition);
		if((this.IsAllowSkipIndent) && Token.IsIndent()) {
			this.CurrentPosition = this.CurrentPosition + 1;
		}
		else {
			this.LatestToken = Token;
			if(EnforceMoveNext) {
				this.CurrentPosition = this.CurrentPosition + 1;
			}
			return Token;
		}
	}
	return ZToken.NullToken;
}

function GetToken(this: ZTokenContext): ZToken {
	return this.GetToken(false);
}

function HasNext(this: ZTokenContext): boolean {
	return (this.GetToken() != ZToken.NullToken);
}

function SkipIndent(this: ZTokenContext): void {
	var Token: ZToken = this.GetToken();
	while(Token.IsIndent()) {
		this.CurrentPosition = this.CurrentPosition + 1;
		Token = this.GetToken();
	}
}

function SkipError(this: ZTokenContext, ErrorToken: ZToken): void {
	var StartIndex: int = ErrorToken.StartIndex;
	var EndIndex: int = ErrorToken.EndIndex;
	var length: int = ErrorToken.GetIndentSize();
	while(this.HasNext()) {
		var Token: ZToken = this.GetToken();
		EndIndex = Token.EndIndex;
		this.CurrentPosition = this.CurrentPosition + 1;
		if(Token instanceof ZIndentToken) {
			var ilength: int = Token.GetIndentSize();
			if(ilength <= length) {
				break;
			}
		}
	}
	if(StartIndex < EndIndex) {
		LibZen.DebugP("StartIdx="+StartIndex+", EndIndex="+EndIndex);
		LibZen.DebugP("skipped: \t" + ErrorToken.Source.SourceText.subSequence(StartIndex, EndIndex));
	}
}

function IsToken(this: ZTokenContext, TokenText: String): boolean {
	var Token: ZToken = this.GetToken();
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	return false;
}

function IsNewLineToken(this: ZTokenContext, TokenText: String): boolean {
	var RollbackPos: int = this.CurrentPosition;
	this.SkipIndent();
	var Token: ZToken = this.GetToken();
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	this.CurrentPosition = RollbackPos;
	return false;
}

function MatchToken(this: ZTokenContext, TokenText: String): boolean {
	var RollbackPos: int = this.CurrentPosition;
	var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	this.CurrentPosition = RollbackPos;
	return false;
}

function MatchNewLineToken(this: ZTokenContext, TokenText: String): boolean {
	var RollbackPos: int = this.CurrentPosition;
	this.SkipIndent();
	var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
	if(Token.EqualsText(TokenText)) {
		return true;
	}
	this.CurrentPosition = RollbackPos;
	return false;
}

function ParseLargeToken(this: ZTokenContext): ZToken {
	var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
	if(Token.IsNextWhiteSpace()) {
		return Token;
	}
	var StartIndex: int = Token.StartIndex;
	var EndIndex: int = Token.EndIndex;
	while(this.HasNext() && !Token.IsNextWhiteSpace()) {
		var RollbackPosition: int = this.CurrentPosition;
		Token = this.GetToken(ZTokenContext.MoveNext);
		if(Token.IsIndent() || Token.EqualsText(";") || Token.EqualsText(",")) {
			this.CurrentPosition = RollbackPosition;
			break;
		}
		EndIndex = Token.EndIndex;
	}
	return new ZToken(Token.Source, StartIndex, EndIndex);
}

function MatchToken(this: ZTokenContext, ParentNode: ZNode, TokenText: String, IsRequired: boolean): ZNode {
	if(!ParentNode.IsErrorNode()) {
		var RollbackPosition: int = this.CurrentPosition;
		var Token: ZToken = this.GetToken(ZTokenContext.MoveNext);
		if(Token.EqualsText(TokenText)) {
			if(ParentNode.SourceToken == null) {
				ParentNode.SourceToken = Token;
			}
		}
		else {
			if(IsRequired) {
				return this.CreateExpectedErrorNode(Token, TokenText);
			}
			else {
				this.CurrentPosition = RollbackPosition;
			}
		}
	}
	return ParentNode;
}

function GetApplyingSyntax(this: ZTokenContext): ZSyntax {
	return this.ApplyingPattern;
}

function ApplyMatchPattern(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, Pattern: ZSyntax, IsRequired: boolean): ZNode {
	var RollbackPosition: int = this.CurrentPosition;
	var CurrentPattern: ZSyntax = Pattern;
	var TopToken: ZToken = this.GetToken();
	var ParsedNode: ZNode = null;
	while(CurrentPattern != null) {
		var Remembered: boolean = this.IsAllowSkipIndent;
		this.CurrentPosition = RollbackPosition;
		this.ApplyingPattern  = CurrentPattern;
		ParsedNode = LibZen.ApplyMatchFunc(CurrentPattern.MatchFunc, ParentNode, this, LeftNode);
		assert(ParsedNode != ParentNode);
		this.ApplyingPattern  = null;
		this.IsAllowSkipIndent = Remembered;
		if(ParsedNode != null && !ParsedNode.IsErrorNode()) {
			return ParsedNode;
		}
		CurrentPattern = CurrentPattern.ParentPattern;
	}
	if(!IsRequired) {
		this.CurrentPosition = RollbackPosition;
		return null;
	}
	if(ParsedNode == null) {
		ParsedNode = this.CreateExpectedErrorNode(TopToken, Pattern.PatternName);
	}
	return ParsedNode;
}

function ParsePatternAfter(this: ZTokenContext, ParentNode: ZNode, LeftNode: ZNode, PatternName: String, IsRequired: boolean): ZNode {
	var Pattern: ZSyntax = this.NameSpace.GetSyntaxPattern(PatternName);
	var ParsedNode: ZNode = this.ApplyMatchPattern(ParentNode, LeftNode, Pattern, IsRequired);
	return ParsedNode;
}

function ParsePattern(this: ZTokenContext, ParentNode: ZNode, PatternName: String, IsRequired: boolean): ZNode {
	return this.ParsePatternAfter(ParentNode, null, PatternName, IsRequired);
}

function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean, AllowSkipIndent: boolean): ZNode {
	if(!ParentNode.IsErrorNode()) {
		var Rememberd: boolean = this.SetParseFlag(AllowSkipIndent);
		var ParsedNode: ZNode = this.ParsePattern(ParentNode, PatternName, IsRequired);
		this.SetParseFlag(Rememberd);
		if(ParsedNode != null) {
			if(Index == ZNode.NestedAppendIndex) {
				if(!(ParsedNode instanceof ZEmptyNode)) {
					ParentNode.Set(ZNode.AppendIndex, ParsedNode);
				}
				if(ParsedNode instanceof ZBlockNode || ParsedNode.IsErrorNode()) {
					return ParsedNode;
				}
			}
			if(ParsedNode.IsErrorNode()) {
				return ParsedNode;
			}
			else {
				if(!(ParsedNode instanceof ZEmptyNode)) {
					ParentNode.Set(Index, ParsedNode);
				}
			}
		}
	}
	return ParentNode;
}

function MatchPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, PatternName: String, IsRequired: boolean): ZNode {
	return this.MatchPattern(ParentNode, Index, PatternName, IsRequired, ZTokenContext.NotAllowSkipIndent);
}

function MatchOptionaPattern(this: ZTokenContext, ParentNode: ZNode, Index: int, AllowNewLine: boolean, TokenText: String, PatternName: String): ZNode {
	if(!ParentNode.IsErrorNode()) {
		if(this.MatchToken(TokenText)) {
			return this.MatchPattern(ParentNode, Index, PatternName, ZTokenContext.Optional, ZTokenContext.NotAllowSkipIndent);
		}
	}
	return ParentNode;
}

function MatchNtimes(this: ZTokenContext, ParentNode: ZNode, StartToken: String, PatternName: String, DelimToken: String, StopToken: String): ZNode {
	var Rememberd: boolean = this.SetParseFlag(true);
	var IsRequired: boolean =   ZTokenContext.Optional;
	if(StartToken != null) {
		ParentNode = this.MatchToken(ParentNode, StartToken, ZTokenContext.Required);
	}
	while(!ParentNode.IsErrorNode()) {
		if(StopToken != null) {
			var Token: ZToken = this.GetToken();
			if(Token.EqualsText(StopToken)) {
				break;
			}
			IsRequired = ZTokenContext.Required;
		}
		var ParsedNode: ZNode = this.ParsePattern(ParentNode, PatternName, IsRequired);
		if(ParsedNode == null) {
			break;
		}
		if(ParsedNode.IsErrorNode()) {
			return ParsedNode;
		}
		if(!(ParsedNode instanceof ZEmptyNode)) {
			ParentNode.Set(ZNode.AppendIndex, ParsedNode);
		}
		if(DelimToken != null) {
			if(!this.MatchToken(DelimToken)) {
				break;
			}
		}
	}
	if(StopToken != null) {
		ParentNode = this.MatchToken(ParentNode, StopToken, ZTokenContext.Required);
	}
	this.SetParseFlag(Rememberd);
	return ParentNode;
}

function StartsWithToken(this: ZTokenContext, TokenText: String): boolean {
	var Token: ZToken = this.GetToken();
	if(Token.EqualsText(TokenText)) {
		this.CurrentPosition += 1;
		return true;
	}
	if(Token.StartsWith(TokenText)) {
		Token = new ZToken(Token.Source, Token.StartIndex + TokenText.length(), Token.EndIndex);
		this.CurrentPosition += 1;
		this.TokenList.add(this.CurrentPosition, Token);
		return true;
	}
	return false;
}

function SkipEmptyStatement(this: ZTokenContext): void {
	while(this.HasNext()) {
		var Token: ZToken = this.GetToken();
		if(Token.IsIndent() || Token.EqualsText(";")) {
			this.CurrentPosition += 1;
			continue;
		}
		break;
	}
}

function Dump(this: ZTokenContext): void {
	for(var Position: int = this.CurrentPosition; Position < this.TokenList.size(); Position += 1) {
		var Token: ZToken = this.TokenList.get(Position);
		var DumpedToken: String = this.CurrentPosition == Position ? "*[" : "[";
		DumpedToken = DumpedToken + Position+"] " + Token.toString();
		LibZen.DebugP(DumpedToken);
	}
}

function ZTokenFunc(this: ZTokenFunc, Func: ZTokenFunction, Parent: ZTokenFunc): ZTokenFunc {
	this.Func = Func;
	this.ParentFunc = Parent;
}

function toString(this: ZTokenFunc): String {
	return this.Func.toString();
}

function ZVariable(this: ZVariable, Parent: ZSymbolEntry, FuncNode: ZFunctionNode, VarFlag: int, VarType: ZType, VarName: String, SourceToken: ZToken): ZVariable {
	super(Parent, FuncNode);
	this.VarFlag = VarFlag;
	this.VarType = VarType;
	this.VarName = VarName;
	this.SourceToken = SourceToken;
	this.VarUniqueIndex = FuncNode.GetVarIndex();
	this.UsedCount = 0;
	this.DefCount  = 1;
}

function IsCaptured(this: ZVariable, CurrentFunctionNode: ZFunctionNode): boolean {
	if(CurrentFunctionNode == this.Node) {
		return false;
	}
	return true;
}

function Defined(this: ZVariable): void {
	this.DefCount = this.DefCount + 1;
}

function Used(this: ZVariable): void {
	this.UsedCount = this.UsedCount + 1;
}

function ZAnnotationNode(this: ZAnnotationNode, ParentNode: ZNode, Token: ZToken, Anno: Map<any>): ZAnnotationNode {
	super(ParentNode, Token, 0);
	this.Annotation = Anno;
}

function IsBreakingBlock(this: ZAnnotationNode): boolean {
	return this.AnnotatedNode.IsBreakingBlock();
}

function IsErrorNode(this: ZAnnotationNode): boolean {
	return this.AnnotatedNode.IsErrorNode();
}

function Accept(this: ZAnnotationNode, Visitor: ZVisitor): void {
	this.AnnotatedNode.Accept(Visitor);
}

function ZAssertNode(this: ZAssertNode, ParentNode: ZNode): ZAssertNode {
	super(ParentNode, null, 1);
}

function GetVisitName(this: ZAssertNode): String {
	return "VisitAssertNode";
}

function VisitTypeChecker(this: ZAssertNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode {
	TypeChecker.CheckTypeAt(this, ZAssertNode_Expr, ZType.BooleanType);
	this.Type = ZType.VoidType;
	return this;
}

function DeSugar(this: ZAssertNode, Generator: ZGenerator): ZNode {
	ZFunc Func = Generator.GetDefinedFunc("Assert", ZType.BooleanType, 1);
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, this.SourceToken, Func);
	FuncNode.Append(this.AST[ZAssertNode_Expr]);
	return FuncNode;
}

function ZBinaryNode(this: ZBinaryNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZBinaryNode {
	super(ParentNode, SourceToken, 2);
	this.Set(ZBinaryNode_Left, Left);
	assert(Pattern != null);
	this.Pattern = Pattern;
}

function IsRightJoin(this: ZBinaryNode, Node: ZNode): boolean {
	if(Node instanceof ZBinaryNode) {
		return this.Pattern.IsRightJoin(((ZBinaryNode)Node).Pattern);
	}
	return false;
}

function RightJoin(this: ZBinaryNode, ParentNode: ZNode, RightNode: ZBinaryNode): ZNode {
	var RightLeftNode: ZNode = RightNode.AST[ZBinaryNode_Left];
	if(this.IsRightJoin(RightLeftNode)) {
		RightNode.Set(ZBinaryNode_Left, this.RightJoin(ParentNode, (ZBinaryNode) RightLeftNode));
	}
	else {
		RightNode.Set(ZBinaryNode_Left, this);
		this.Set(ZBinaryNode_Right, RightLeftNode);
	}
	return RightNode;
}

function AppendParsedRightNode(this: ZBinaryNode, ParentNode: ZNode, TokenContext: ZTokenContext): ZNode {
	var RightNode: ZNode = TokenContext.ParsePattern(ParentNode, "$Expression$", ZTokenContext.Required);
	if(RightNode.IsErrorNode()) {
		return RightNode;
	}
	if(this.IsRightJoin(RightNode)) {
		return this.RightJoin(ParentNode, (ZBinaryNode) RightNode);
	}
	this.Set(ZBinaryNode_Right, RightNode);
	return this;
}

function Accept(this: ZBinaryNode, Visitor: ZVisitor): void {
	Visitor.VisitBinaryNode(this);
}

function ZBreakNode(this: ZBreakNode, ParentNode: ZNode): ZBreakNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZBreakNode, Visitor: ZVisitor): void {
	Visitor.VisitBreakNode(this);
}

function ZCastNode(this: ZCastNode, ParentNode: ZNode, CastType: ZType, Node: ZNode): ZCastNode {
	super(ParentNode, null, 1);
	this.Type = CastType;
	if(Node != null) {
		this.Set(ZCastNode_Expr, Node);
	}
}

function Accept(this: ZCastNode, Visitor: ZVisitor): void {
	Visitor.VisitCastNode(this);
}

function ToStaticFuncCall(this: ZCastNode, Func: ZFunc): ZFuncCallNode {
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, this.SourceToken, Func);
	FuncNode.Append(this.AST[ZCastNode_Expr]);
	return FuncNode;
}

function ZCatchNode(this: ZCatchNode, ParentNode: ZNode): ZCatchNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZCatchNode, Type: ZType): void {
	this.ExceptionType = Type;
}

function SetNameInfo(this: ZCatchNode, Name: String): void {
	this.ExceptionName = Name;
}

function GetVisitName(this: ZCatchNode): String {
	return "VisitCatchNode"; // override this if you want to use additional node
}

function ZComparatorNode(this: ZComparatorNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZComparatorNode {
	super(ParentNode, SourceToken, Left, Pattern);
}

function Accept(this: ZComparatorNode, Visitor: ZVisitor): void {
	Visitor.VisitComparatorNode(this);
}

function ZConstNode(this: ZConstNode, ParentNode: ZNode, SourceToken: ZToken): ZConstNode {
	super(ParentNode, SourceToken, 0);
}

function ZEmptyNode(this: ZEmptyNode, ParentNode: ZNode, Token: ZToken): ZEmptyNode {
	super(ParentNode, Token, 0);
}

function GetVisitName(this: ZEmptyNode): String {
	return "VisitEmptyNode";
}

function ZErrorNode(this: ZErrorNode, ParentNode: ZNode, SourceToken: ZToken, ErrorMessage: String): ZErrorNode {
	super(ParentNode, SourceToken);
	this.ErrorMessage = ErrorMessage;
}

function ZErrorNode(this: ZErrorNode, Node: ZNode, ErrorMessage: String): ZErrorNode {
	super(Node.ParentNode, Node.SourceToken);
	this.ErrorMessage = ErrorMessage;
}

function GetValue(this: ZErrorNode): any {
	return this.ErrorMessage;
}

function Accept(this: ZErrorNode, Visitor: ZVisitor): void {
	Visitor.VisitErrorNode(this);
}

function toString(this: ZErrorNode): String {
	return "ErrorNode "" + this.ErrorMessage + """;
}

function ZFieldNode(this: ZFieldNode, ParentNode: ZNode): ZFieldNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZFieldNode, Type: ZType): void {
	this.DeclType = Type;
}

function SetNameInfo(this: ZFieldNode, Name: String): void {
	this.FieldName = Name;
}

function GetVisitName(this: ZFieldNode): String {
	return "VisitFieldNode";
}

function ZFloatNode(this: ZFloatNode, ParentNode: ZNode, Token: ZToken, Value: float): ZFloatNode {
	super(ParentNode, Token);
	this.Type = ZType.FloatType;
	this.FloatValue = Value;
}

function GetValue(this: ZFloatNode): any {
	return this.FloatValue;
}

function Accept(this: ZFloatNode, Visitor: ZVisitor): void {
	Visitor.VisitFloatNode(this);
}

function ZGetIndexNode(this: ZGetIndexNode, ParentNode: ZNode, RecvNode: ZNode): ZGetIndexNode {
	super(ParentNode, null, 2);
	this.AST[ZGetIndexNode_Recv] = this.SetChild(RecvNode);
}

function Accept(this: ZGetIndexNode, Visitor: ZVisitor): void {
	Visitor.VisitGetIndexNode(this);
}

function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, Token: ZToken, NativeName: String): ZGetNameNode {
	super(ParentNode, Token, 0);
	this.VarName = NativeName;
}

function Accept(this: ZGetNameNode, Visitor: ZVisitor): void {
	Visitor.VisitGetNameNode(this);
}

function ZGetterNode(this: ZGetterNode, ParentNode: ZNode, RecvNode: ZNode): ZGetterNode {
	super(ParentNode, null, 1);
	this.Set(ZGetterNode_Recv, RecvNode);
}

function SetNameInfo(this: ZGetterNode, Name: String): void {
	this.FieldName = Name;
}

function Accept(this: ZGetterNode, Visitor: ZVisitor): void {
	Visitor.VisitGetterNode(this);
}

function IsStaticField(this: ZGetterNode): boolean {
	return this.AST[ZGetterNode_Recv] instanceof ZTypeNode;
}

function ZGroupNode(this: ZGroupNode, ParentNode: ZNode): ZGroupNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZGroupNode, Visitor: ZVisitor): void {
	Visitor.VisitGroupNode(this);
}

function ZIfNode(this: ZIfNode, ParentNode: ZNode): ZIfNode {
	super(ParentNode, null, 3);
}

function Accept(this: ZIfNode, Visitor: ZVisitor): void {
	Visitor.VisitIfNode(this);
}

function ZImportNode(this: ZImportNode, ParentNode: ZNode): ZImportNode {
	super(ParentNode, null, 0);
}

function SetNameInfo(this: ZImportNode, Name: String): void {
	if(this.ResourcePath == null) {
		this.ResourcePath = Name;
	}
	else {
		this.Alias = Name;
	}
}

function GetVisitName(this: ZImportNode): String {
	return "VisitImportNode"; // override this if you want to use additional node
}

function Import(this: ZImportNode): ZNode {
	return ZenError.UnfoundResource(this, this.ResourcePath);
}

function ZInstanceOfNode(this: ZInstanceOfNode, ParentNode: ZNode, Token: ZToken, LeftNode: ZNode): ZInstanceOfNode {
	super(ParentNode, Token, 1);
	this.Set(ZInstanceOfNode_Left, LeftNode);
}

function SetTypeInfo(this: ZInstanceOfNode, Type: ZType): void {
	this.TargetType = Type;
}

function Accept(this: ZInstanceOfNode, Visitor: ZVisitor): void {
	Visitor.VisitInstanceOfNode(this);
}

function ZIntNode(this: ZIntNode, ParentNode: ZNode, Token: ZToken, Value: int): ZIntNode {
	super(ParentNode, Token);
	this.Type = ZType.IntType;
	this.IntValue = Value;
}

function GetValue(this: ZIntNode): any {
	return this.IntValue;
}

function Accept(this: ZIntNode, Visitor: ZVisitor): void {
	Visitor.VisitIntNode(this);
}

function ZLetNode(this: ZLetNode, ParentNode: ZNode): ZLetNode {
	super(ParentNode, null, 1);
}

function SetNameInfo(this: ZLetNode, Name: String): void {
	this.Symbol = Name;
}

function SetTypeInfo(this: ZLetNode, Type: ZType): void {
	this.SymbolType = Type;
}

function Accept(this: ZLetNode, Visitor: ZVisitor): void {
	Visitor.VisitLetNode(this);
}

function ZListNode(this: ZListNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZListNode {
	super(ParentNode, SourceToken, Size);
	this.ListStartIndex = Size;
}

function Append(this: ZListNode, Node: ZNode): void {
	if(this.AST == null) {
		this.AST = new ZNode[1];
		this.Set(0, Node);
	}
	else {
		var newAST: ZNode[] = new ZNode[this.AST.length+1];
		System.arraycopy(this.AST, 0, newAST, 0, this.AST.length);
		this.AST = newAST;
		this.Set(this.AST.length - 1, Node);
	}
}

function GetListSize(this: ZListNode): int {
	return this.GetAstSize() - this.ListStartIndex;
}

function GetListAt(this: ZListNode, Index: int): ZNode {
	return this.AST[this.ListStartIndex + Index];
}

function SetListAt(this: ZListNode, Index: int, Node: ZNode): void {
	this.Set(Index + this.ListStartIndex, Node);
}

function InsertAt(this: ZListNode, Index: int, Node: ZNode): void {
	if(this.AST == null || Index < 0 || this.AST.length == Index) {
		this.Append(Node);
	} else {
		var newAST: ZNode[] = new ZNode[this.AST.length + 1];
		Index = this.ListStartIndex + Index;
		System.arraycopy(this.AST, 0, newAST, 0, Index);
		this.Set(Index, Node);
		System.arraycopy(this.AST, Index, newAST, Index + 1, this.AST.length - Index);
		this.AST = newAST;
	}
}

function RemoveAt(this: ZListNode, Index: int): ZNode {
	var Removed: ZNode = this.GetListAt(Index);
	var newAST: ZNode[] = new ZNode[this.AST.length - 1];
	int RemovedIndex = this.ListStartIndex + Index;
	System.arraycopy(this.AST, 0, newAST, 0, RemovedIndex);
	System.arraycopy(this.AST, RemovedIndex + 1, newAST, RemovedIndex, this.AST.length - (RemovedIndex + 1));
	this.AST = newAST;
	return Removed;
}

function ClearList(this: ZListNode, Size: int): void {
	if(Size < this.GetListSize()) {
		var newsize: int = this.ListStartIndex + Size;
		if(newsize == 0) {
			this.AST = null;
		}
		else {
			var newAST: ZNode[] = new ZNode[newsize];
			System.arraycopy(this.AST, 0, newAST, 0, newsize);
			this.AST = newAST;
		}
	}
}

function ZMapEntryNode(this: ZMapEntryNode, ParentNode: ZNode): ZMapEntryNode {
	super(ParentNode, null, 2);
}

function GetVisitName(this: ZMapEntryNode): String {
	return "VisitMapEntryNode"; // override this if you want to use additional node
}

function ZMapLiteralNode(this: ZMapLiteralNode, ParentNode: ZNode): ZMapLiteralNode {
	super(ParentNode, null, 0);
}

function GetMapEntryNode(this: ZMapLiteralNode, Index: int): ZMapEntryNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZMapEntryNode) {
		return (ZMapEntryNode)Node;
	}
	return null;
}

function Accept(this: ZMapLiteralNode, Visitor: ZVisitor): void {
	Visitor.VisitMapLiteralNode(this);
}

function ZMethodCallNode(this: ZMethodCallNode, ParentNode: ZNode, RecvNode: ZNode): ZMethodCallNode {
	super(ParentNode, null, 1);
	this.Set(ZMethodCallNode_Recv, RecvNode);
}

function SetNameInfo(this: ZMethodCallNode, Name: String): void {
	this.MethodName = Name;
}

function Accept(this: ZMethodCallNode, Visitor: ZVisitor): void {
	Visitor.VisitMethodCallNode(this);
}

function ToGetterFuncCall(this: ZMethodCallNode): ZFuncCallNode {
	ZGetterNode Getter = new ZGetterNode(null, this.AST[ZMethodCallNode_Recv]);
	Getter.SetNameInfo(this.MethodName);
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, Getter);
	FuncNode.SourceToken = this.SourceToken;
	FuncNode.Append(this.AST[ZMethodCallNode_Recv]);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	return FuncNode;
}

function ToStaticFuncCall(this: ZMethodCallNode, Func: ZFunc): ZFuncCallNode {
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, this.SourceToken, Func);
	FuncNode.Append(this.AST[ZMethodCallNode_Recv]);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	return FuncNode;
}

function ZNewArrayNode(this: ZNewArrayNode, ParentNode: ZNode, Type: ZType, Token: ZToken): ZNewArrayNode {
	super(ParentNode, null, 0);
}

function ZNewObjectNode(this: ZNewanyNode, ParentNode: ZNode): ZNewanyNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZNewanyNode, Visitor: ZVisitor): void {
	Visitor.VisitNewObjectNode(this);
}

function ToStaticFuncCall(this: ZNewanyNode, Func: ZFunc): ZFuncCallNode {
	ZGetNameNode Dummy = new ZGetNameNode(null, this.SourceToken, Func.FuncName);
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, Dummy);
	FuncNode.SourceToken = this.SourceToken;
	FuncNode.Append(this);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	FuncNode.ResolvedFunc = Func;
	return FuncNode;
}

function ZNotNode(this: ZNotNode, ParentNode: ZNode, Token: ZToken): ZNotNode {
	super(ParentNode, Token);
}

function Accept(this: ZNotNode, Visitor: ZVisitor): void {
	Visitor.VisitNotNode(this);
}

function ZNullNode(this: ZNullNode, ParentNode: ZNode, SourceToken: ZToken): ZNullNode {
	super(ParentNode, SourceToken);
}

function GetValue(this: ZNullNode): any {
	return null;
}

function Accept(this: ZNullNode, Visitor: ZVisitor): void {
	Visitor.VisitNullNode(this);
}

function ZOrNode(this: ZOrNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZOrNode {
	super(ParentNode, Token, Left, Pattern);
}

function Accept(this: ZOrNode, Visitor: ZVisitor): void {
	Visitor.VisitOrNode(this);
}

function ZStringNode(this: ZStringNode, ParentNode: ZNode, Token: ZToken, Value: String): ZStringNode {
	super(ParentNode, Token);
	this.Type = ZType.StringType;
	this.StringValue = Value;
}

function GetValue(this: ZStringNode): any {
	return this.StringValue;
}

function Accept(this: ZStringNode, Visitor: ZVisitor): void {
	Visitor.VisitStringNode(this);
}

function ZTypeNode(this: ZTypeNode, ParentNode: ZNode, SourceToken: ZToken, ParsedType: ZType): ZTypeNode {
	super(ParentNode, SourceToken);
	this.Type = ParsedType;
}

function GetValue(this: ZTypeNode): any {
	return this.Type;
}

function GetVisitName(this: ZTypeNode): String {
	return "VisitTypeNode";
}

function ZGenerator(this: ZGenerator, TargetCode: String, TargetVersion: String): ZGenerator {
	super();
	this.RootNameSpace = new ZNameSpace(this, null);
	this.GrammarInfo = "";
	this.TargetCode = TargetCode;
	this.TargetVersion = TargetVersion;
	this.OutputFile = null;
	this.Logger = new ZLogger();
	this.StoppedVisitor = false;
}

function ImportLocalGrammar(this: ZGenerator, NameSpace: ZNameSpace): void {
}

function EnableVisitor(this: ZGenerator): void {
	this.StoppedVisitor = false;
}

function StopVisitor(this: ZGenerator): void {
	this.StoppedVisitor = true;
}

function IsVisitable(this: ZGenerator): boolean {
	return !this.StoppedVisitor;
}

function GetGrammarInfo(this: ZGenerator): String {
	return this.GrammarInfo.trim();
}

function AppendGrammarInfo(this: ZGenerator, GrammarInfo: String): void {
	this.GrammarInfo = this.GrammarInfo + GrammarInfo + " ";
}

function GetTargetLangInfo(this: ZGenerator): String {
	return this.TargetCode + this.TargetVersion;
}

function CreateImportNode(this: ZGenerator, ParentNode: ZNode): ZImportNode {
	return new ZImportNode(ParentNode);
}

function GetFieldType(this: ZGenerator, BaseType: ZType, Name: String): ZType {
	return ZType.VarType;     // undefined
}

function GetSetterType(this: ZGenerator, BaseType: ZType, Name: String): ZType {
	return ZType.VarType;     // undefined
}

function GetConstructorFuncType(this: ZGenerator, ClassType: ZType, List: ZListNode): ZFuncType {
	return null;     // undefined
}

function GetMethodFuncType(this: ZGenerator, RecvType: ZType, MethodName: String, List: ZListNode): ZFuncType {
	return null;     // undefined
}

function GetUniqueNumber(this: ZGenerator): int {
	var UniqueNumber: int = this.UniqueNumber;
	this.UniqueNumber = this.UniqueNumber + 1;
	return UniqueNumber;
}

function NameGlobalSymbol(this: ZGenerator, Symbol: String): String {
	return Symbol + "_Z" + this.GetUniqueNumber();
}

function SetGlobalValue(this: ZGenerator, GlobalName: String, Value: any): ZNode {
	return null;
}

function GetGlobalValue(this: ZGenerator, GlobalName: String): any {
	return null;
}

function SetDefinedFunc(this: ZGenerator, Func: ZFunc): void {
	this.DefinedFuncMap.put(Func.GetSignature(), Func);
}

function GetDefinedFunc(this: ZGenerator, GlobalName: String): ZFunc {
	return this.DefinedFuncMap.GetOrNull(GlobalName);
}

function GetDefinedFunc(this: ZGenerator, FuncName: String, FuncType: ZFuncType): ZFunc {
	return this.GetDefinedFunc(FuncType.StringfySignature(FuncName));
}

function GetDefinedFunc(this: ZGenerator, FuncName: String, RecvType: ZType, FuncParamSize: int): ZFunc {
	return this.GetDefinedFunc(ZFunc_StringfySignature(FuncName, FuncParamSize, RecvType));
}

function NameConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): String {
	return FromType.GetUniqueName() + "T" + ToType.GetUniqueName();
}

function SetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType, Func: ZFunc): void {
	this.DefinedFuncMap.put(this.NameConverterFunc(FromType, ToType), Func);
}

function GetConverterFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc {
	while(FromType != null) {
		ZFunc Func = this.DefinedFuncMap.GetOrNull(this.NameConverterFunc(FromType, ToType));
		if(Func != null) {
			return Func;
		}
		FromType = FromType.GetSuperType();
	}
	return null;
}

function GetCoercionFunc(this: ZGenerator, FromType: ZType, ToType: ZType): ZFunc {
	while(FromType != null) {
		ZFunc Func = this.DefinedFuncMap.GetOrNull(this.NameConverterFunc(FromType, ToType));
		if(Func != null && Func.IsCoercionFunc()) {
			return Func;
		}
		FromType = FromType.GetSuperType();
	}
	return null;
}

function ZIndentToken(this: ZIndentToken, Source: ZSource, StartIndex: int, EndIndex: int): ZIndentToken {
	super(Source, StartIndex, EndIndex);
}

function GetIndentSize(this: ZIndentToken): int {
	return this.Source.CountIndentSize(this.StartIndex);
}

function ZPatternToken(this: ZPatternToken, Source: ZSource, StartIndex: int, EndIndex: int, PresetPattern: ZSyntax): ZPatternToken {
	super(Source, StartIndex, EndIndex);
	this.PresetPattern = PresetPattern;
}

function ZSourceGenerator(this: ZSourceGenerator, TargetCode: String, TargetVersion: String): ZSourceGenerator {
	super(TargetCode, TargetVersion);
	this.NativeTypeMap = {};
	this.BuilderList = [];
	this.HeaderBuilder = this.NewSourceBuilder();
	this.CurrentBuilder = this.HeaderBuilder;
	this.LineFeed = "\n";
	this.Tab = "   ";
	this.LineComment = "//"; // if not, set null
	this.BeginComment = "/*";
	this.EndComment = "*/";
	this.Camma = ", ";
	this.SemiColon = ";";
	this.TrueLiteral = "true";
	this.FalseLiteral = "false";
	this.NullLiteral = "null";
	this.AndOperator = "&&";
	this.OrOperator = "||";
	this.NotOperator = "!";
	this.TopType = "var";
}

function GetEngine(this: ZSourceGenerator): ZenEngine {
	return new ZenEngine(new ZenTypeSafer(this), this);
}

function NewSourceBuilder(this: ZSourceGenerator): ZSourceBuilder {
	var Builder: ZSourceBuilder = new ZSourceBuilder(this);
	this.BuilderList.add(Builder);
	return Builder;
}

function SetNativeType(this: ZSourceGenerator, Type: ZType, TypeName: String): void {
	String Key = "" + Type.TypeId;
	this.NativeTypeMap.put(Key, TypeName);
}

function GetNativeType(this: ZSourceGenerator, Type: ZType): String {
	if (Type == null) {
		return this.TopType;
	}
	String Key = "" + Type.TypeId;
	String TypeName = this.NativeTypeMap.GetOrNull(Key);
	if (TypeName == null) {
		return Type.ShortName;
	}
	return TypeName;
}

function StartCodeGeneration(this: ZSourceGenerator, Node: ZNode, AllowLazy: boolean, IsInteractive: boolean): boolean {
	if (AllowLazy && Node.HasUntypedNode()) {
		if(IsInteractive) {
			Node.Accept(this);
			LibZen_PrintLine("---");
			LibZen_PrintLine(this.CurrentBuilder.toString());
			this.CurrentBuilder.Clear();
			LibZen_PrintLine("---");
		}
		return false;
	}
	Node.Accept(this);
	if(IsInteractive) {
		LibZen_PrintLine("---");
		LibZen_PrintLine(this.CurrentBuilder.toString());
		this.CurrentBuilder.Clear();
		LibZen_PrintLine("---");
	}
	return true;
}

function GenerateCode(this: ZSourceGenerator, Node: ZNode): void {
	Node.Accept(this);
}

function IsNeededSurroud(this: ZSourceGenerator, Node: ZNode): boolean {
	if(Node instanceof ZBinaryNode) {
		return true;
	}
	return false;
}

function GenerateSurroundCode(this: ZSourceGenerator, Node: ZNode): void {
	if(this.IsNeededSurroud(Node)) {
		this.CurrentBuilder.Append("(");
		this.GenerateCode(Node);
		this.CurrentBuilder.Append(")");
	}
	else {
		this.GenerateCode(Node);
	}
}

function AppendCode(this: ZSourceGenerator, RawSource: String): void {
	this.CurrentBuilder.Append(RawSource);
}

function VisitStmtList(this: ZSourceGenerator, BlockNode: ZBlockNode): void {
	var i: int = 0;
	while (i < BlockNode.GetListSize()) {
		var SubNode: ZNode = BlockNode.GetListAt(i);
		this.CurrentBuilder.AppendLineFeed();
		this.CurrentBuilder.AppendIndent();
		this.GenerateCode(SubNode);
		i = i + 1;
		if(i  < BlockNode.GetListSize()) {
			this.CurrentBuilder.Append(this.SemiColon);
		}
	}
}

function VisitBlockNode(this: ZSourceGenerator, Node: ZBlockNode): void {
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append("{");
	this.CurrentBuilder.Indent();
	this.VisitStmtList(Node);
	if(Node.GetListSize()>0) {
		this.CurrentBuilder.Append(this.SemiColon);
	}
	this.CurrentBuilder.UnIndent();
	this.CurrentBuilder.AppendLineFeed();
	this.CurrentBuilder.AppendIndent();
	this.CurrentBuilder.Append("}");
}

function VisitNullNode(this: ZSourceGenerator, Node: ZNullNode): void {
	this.CurrentBuilder.Append(this.NullLiteral);
}

function VisitBooleanNode(this: ZSourceGenerator, Node: ZBooleanNode): void {
	if (Node.BooleanValue) {
		this.CurrentBuilder.Append(this.TrueLiteral);
	} else {
		this.CurrentBuilder.Append(this.FalseLiteral);
	}
}

function VisitIntNode(this: ZSourceGenerator, Node: ZIntNode): void {
	this.CurrentBuilder.Append(String.valueOf(Node.IntValue));
}

function VisitFloatNode(this: ZSourceGenerator, Node: ZFloatNode): void {
	this.CurrentBuilder.Append(String.valueOf(Node.FloatValue));
}

function VisitStringNode(this: ZSourceGenerator, Node: ZStringNode): void {
	this.CurrentBuilder.Append(LibZen_QuoteString(Node.StringValue));
}

function VisitArrayLiteralNode(this: ZSourceGenerator, Node: ZArrayLiteralNode): void {
	this.VisitListNode("[", Node, "]");
}

function VisitMapLiteralNode(this: ZSourceGenerator, Node: ZMapLiteralNode): void {
}

function VisitNewArrayNode(this: ZSourceGenerator, Node: ZNewArrayNode): void {
}

function VisitNewObjectNode(this: ZSourceGenerator, Node: ZNewanyNode): void {
	this.CurrentBuilder.Append("new");
	this.CurrentBuilder.AppendWhiteSpace();
	this.VisitType(Node.Type);
	this.VisitListNode("(", Node, ")");
}

function VisitGroupNode(this: ZSourceGenerator, Node: ZGroupNode): void {
	this.CurrentBuilder.Append("(");
	this.GenerateCode(Node.AST[ZGroupNode_Expr]);
	this.CurrentBuilder.Append(")");
}

function VisitGetIndexNode(this: ZSourceGenerator, Node: ZGetIndexNode): void {
	this.GenerateCode(Node.AST[ZGetIndexNode_Recv]);
	this.CurrentBuilder.Append("[");
	this.GenerateCode(Node.AST[ZGetIndexNode_Index]);
	this.CurrentBuilder.Append("]");
}

function VisitSetIndexNode(this: ZSourceGenerator, Node: ZSetIndexNode): void {
	this.GenerateCode(Node.AST[ZSetIndexNode_Recv]);
	this.CurrentBuilder.Append("[");
	this.GenerateCode(Node.AST[ZSetIndexNode_Index]);
	this.CurrentBuilder.Append("]");
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(Node.AST[ZSetIndexNode_Expr]);
}

function VisitGetNameNode(this: ZSourceGenerator, Node: ZGetNameNode): void {
	this.CurrentBuilder.Append(Node.VarName);
}

function VisitSetNameNode(this: ZSourceGenerator, Node: ZSetNameNode): void {
	this.CurrentBuilder.Append(Node.VarName);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(Node.AST[ZSetNameNode_Expr]);
}

function VisitGetterNode(this: ZSourceGenerator, Node: ZGetterNode): void {
	this.GenerateSurroundCode(Node.AST[ZGetterNode_Recv]);
	this.CurrentBuilder.Append(".");
	this.CurrentBuilder.Append(Node.FieldName);
}

function VisitSetterNode(this: ZSourceGenerator, Node: ZSetterNode): void {
	this.GenerateSurroundCode(Node.AST[ZSetterNode_Recv]);
	this.CurrentBuilder.Append(".");
	this.CurrentBuilder.Append(Node.FieldName);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(Node.AST[ZSetterNode_Expr]);
}

function VisitMethodCallNode(this: ZSourceGenerator, Node: ZMethodCallNode): void {
	this.GenerateSurroundCode(Node.AST[ZMethodCallNode_Recv]);
	this.CurrentBuilder.Append(".");
	this.CurrentBuilder.Append(Node.MethodName);
	this.VisitListNode("(", Node, ")");
}

function VisitFuncCallNode(this: ZSourceGenerator, Node: ZFuncCallNode): void {
	this.GenerateCode(Node.AST[ZFuncCallNode_Func]);
	this.VisitListNode("(", Node, ")");
}

function VisitUnaryNode(this: ZSourceGenerator, Node: ZUnaryNode): void {
	this.CurrentBuilder.Append(Node.SourceToken.GetText());
	this.GenerateCode(Node.AST[ZUnaryNode_Recv]);
}

function VisitNotNode(this: ZSourceGenerator, Node: ZNotNode): void {
	this.CurrentBuilder.Append(this.NotOperator);
	this.GenerateSurroundCode(Node.AST[ZUnaryNode_Recv]);
}

function VisitCastNode(this: ZSourceGenerator, Node: ZCastNode): void {
	this.CurrentBuilder.Append("(");
	this.VisitType(Node.Type);
	this.CurrentBuilder.Append(")");
	this.GenerateSurroundCode(Node.AST[ZCastNode_Expr]);
}

function VisitInstanceOfNode(this: ZSourceGenerator, Node: ZInstanceOfNode): void {
	this.GenerateCode(Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken("instanceof");
	this.VisitType(Node.AST[ZBinaryNode_Right].Type);
}

function VisitBinaryNode(this: ZSourceGenerator, Node: ZBinaryNode): void {
	if (Node.ParentNode instanceof ZBinaryNode) {
		this.CurrentBuilder.Append("(");
	}
	this.GenerateCode(Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(Node.SourceToken.GetText());
	this.GenerateCode(Node.AST[ZBinaryNode_Right]);
	if (Node.ParentNode instanceof ZBinaryNode) {
		this.CurrentBuilder.Append(")");
	}
}

function VisitComparatorNode(this: ZSourceGenerator, Node: ZComparatorNode): void {
	this.GenerateCode(Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(Node.SourceToken.GetText());
	this.GenerateCode(Node.AST[ZBinaryNode_Right]);
}

function VisitAndNode(this: ZSourceGenerator, Node: ZAndNode): void {
	this.GenerateCode(Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(this.AndOperator);
	this.GenerateCode(Node.AST[ZBinaryNode_Right]);
}

function VisitOrNode(this: ZSourceGenerator, Node: ZOrNode): void {
	this.GenerateCode(Node.AST[ZBinaryNode_Left]);
	this.CurrentBuilder.AppendToken(this.OrOperator);
	this.GenerateCode(Node.AST[ZBinaryNode_Right]);
}

function VisitIfNode(this: ZSourceGenerator, Node: ZIfNode): void {
	this.CurrentBuilder.Append("if (");
	this.GenerateCode(Node.AST[ZIfNode_Cond]);
	this.CurrentBuilder.Append(")");
	this.GenerateCode(Node.AST[ZIfNode_Then]);
	if (Node.AST[ZIfNode_Else] != null) {
		this.CurrentBuilder.AppendToken("else");
		this.GenerateCode(Node.AST[ZIfNode_Else]);
	}
}

function VisitReturnNode(this: ZSourceGenerator, Node: ZReturnNode): void {
	this.CurrentBuilder.Append("return");
	if (Node.AST[ZReturnNode_Expr] != null) {
		this.CurrentBuilder.AppendWhiteSpace();
		this.GenerateCode(Node.AST[ZReturnNode_Expr]);
	}
}

function VisitWhileNode(this: ZSourceGenerator, Node: ZWhileNode): void {
	this.CurrentBuilder.Append("while (");
	this.GenerateCode(Node.AST[ZWhileNode_Cond]);
	this.CurrentBuilder.Append(")");
	this.GenerateCode(Node.AST[ZWhileNode_Block]);
}

function VisitBreakNode(this: ZSourceGenerator, Node: ZBreakNode): void {
	this.CurrentBuilder.Append("break");
}

function VisitThrowNode(this: ZSourceGenerator, Node: ZThrowNode): void {
	this.CurrentBuilder.Append("throw");
	this.CurrentBuilder.AppendWhiteSpace();
	this.GenerateCode(Node.AST[ZThrowNode_Expr]);
}

function VisitTryNode(this: ZSourceGenerator, Node: ZTryNode): void {
	this.CurrentBuilder.Append("try");
	this.GenerateCode(Node.AST[ZTryNode_Try]);
	if(Node.AST[ZTryNode_Catch] != null) {
		this.GenerateCode(Node.AST[ZTryNode_Catch]);
	}
	if (Node.AST[ZTryNode_Finally] != null) {
		this.CurrentBuilder.Append("finally");
		this.GenerateCode(Node.AST[ZTryNode_Finally]);
	}
}

function VisitCatchNode(this: ZSourceGenerator, Node: ZCatchNode): void {
	this.CurrentBuilder.Append("catch (");
	this.CurrentBuilder.Append(Node.ExceptionName);
	this.VisitTypeAnnotation(Node.ExceptionType);
	this.CurrentBuilder.Append(")");
	this.GenerateCode(Node.AST[ZCatchNode_Block]);
}

function VisitVarDeclNode(this: ZSourceGenerator, Node: ZVarDeclNode): void {
	this.CurrentBuilder.Append("var");
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append(Node.NativeName);
	this.VisitTypeAnnotation(Node.DeclType);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(Node.AST[ZVarDeclNode_InitValue]);
	this.CurrentBuilder.Append(this.SemiColon);
	this.VisitStmtList(Node);
}

function VisitTypeAnnotation(this: ZSourceGenerator, Type: ZType): void {
	this.CurrentBuilder.Append(": ");
	this.VisitType(Type);
}

function VisitLetNode(this: ZSourceGenerator, Node: ZLetNode): void {
	this.CurrentBuilder.Append("let");
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append(Node.GlobalName);
	this.CurrentBuilder.AppendToken("=");
	this.GenerateCode(Node.AST[ZLetNode_InitValue]);
}

function VisitParamNode(this: ZSourceGenerator, Node: ZParamNode): void {
	this.CurrentBuilder.Append(Node.Name);
	this.VisitTypeAnnotation(Node.Type);
}

function VisitFunctionNode(this: ZSourceGenerator, Node: ZFunctionNode): void {
	this.CurrentBuilder.Append("function");
	this.CurrentBuilder.AppendWhiteSpace();
	if(Node.FuncName != null) {
		this.CurrentBuilder.Append(Node.FuncName);
	}
	this.VisitListNode("(", Node, ")");
	this.VisitTypeAnnotation(Node.ReturnType);
	this.GenerateCode(Node.AST[ZFunctionNode_Block]);
}

function VisitClassDeclNode(this: ZSourceGenerator, Node: ZClassDeclNode): void {
	this.CurrentBuilder.Append("class");
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append(Node.ClassName);
	if(Node.SuperType != null) {
		this.CurrentBuilder.AppendToken("extends");
		this.VisitType(Node.SuperType);
	}
	this.CurrentBuilder.AppendWhiteSpace();
	this.CurrentBuilder.Append("{");
	this.CurrentBuilder.Indent();
	var i: int = 0;
	while (i < Node.GetListSize()) {
		var FieldNode: ZFieldNode = Node.GetFieldNode(i);
		this.CurrentBuilder.AppendLineFeed();
		this.CurrentBuilder.AppendIndent();
		this.CurrentBuilder.Append("field");
		this.CurrentBuilder.AppendWhiteSpace();
		this.CurrentBuilder.Append(FieldNode.FieldName);
		this.VisitTypeAnnotation(FieldNode.DeclType);
		this.CurrentBuilder.AppendToken("=");
		this.GenerateCode(FieldNode.AST[ZFieldNode_InitValue]);
		this.CurrentBuilder.Append(this.SemiColon);
		i = i + 1;
	}
	this.CurrentBuilder.UnIndent();
	this.CurrentBuilder.AppendLineFeed();
	this.CurrentBuilder.AppendIndent();
	this.CurrentBuilder.Append("}");
}

function VisitErrorNode(this: ZSourceGenerator, Node: ZErrorNode): void {
	this.Logger.ReportError(Node.SourceToken, Node.ErrorMessage);
	this.CurrentBuilder.Append("ThrowError(");
	this.CurrentBuilder.Append(LibZen_QuoteString(Node.ErrorMessage));
	this.CurrentBuilder.Append(")");
}

function VisitExtendedNode(this: ZSourceGenerator, Node: ZNode): void {
}

function VisitType(this: ZSourceGenerator, Type: ZType): void {
	this.CurrentBuilder.Append(this.GetNativeType(Type.GetRealType()));
}

function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, DelimToken: String, CloseToken: String): void {
	this.CurrentBuilder.Append(OpenToken);
	var i: int = 0;
	while(i < VargNode.GetListSize()) {
		var ParamNode: ZNode = VargNode.GetListAt(i);
		if (i > 0) {
			this.CurrentBuilder.Append(DelimToken);
		}
		this.GenerateCode(ParamNode);
		i = i + 1;
	}
	this.CurrentBuilder.Append(CloseToken);
}

function VisitListNode(this: ZSourceGenerator, OpenToken: String, VargNode: ZListNode, CloseToken: String): void {
	this.VisitListNode(OpenToken, VargNode, ", ", CloseToken);
}

function ZAndNode(this: ZAndNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZAndNode {
	super(ParentNode, Token, Left, Pattern);
}

function Accept(this: ZAndNode, Visitor: ZVisitor): void {
	Visitor.VisitAndNode(this);
}

function ZArrayLiteralNode(this: ZArrayLiteralNode, ParentNode: ZNode): ZArrayLiteralNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZArrayLiteralNode, Visitor: ZVisitor): void {
	Visitor.VisitArrayLiteralNode(this);
}

function ZBlockNode(this: ZBlockNode, NameSpace: ZNameSpace): ZBlockNode {
	super(null, null, 0);
	this.NameSpace = NameSpace;
}

function ZBlockNode(this: ZBlockNode, ParentNode: ZNode, Init: int): ZBlockNode {
	super(ParentNode, null, Init);
	this.NameSpace = ParentNode.GetNameSpace().CreateSubNameSpace();
}

function Accept(this: ZBlockNode, Visitor: ZVisitor): void {
	Visitor.VisitBlockNode(this);
}

function ToReturnNode(this: ZBlockNode): ZReturnNode {
	if(this.GetListSize() == 1) {
		return this.GetListAt(0).ToReturnNode();
	}
	return null;
}

function ZBooleanNode(this: ZBooleanNode, ParentNode: ZNode, Token: ZToken, Value: boolean): ZBooleanNode {
	super(ParentNode, Token);
	this.Type = ZType.BooleanType;
	this.BooleanValue = Value;
}

function Accept(this: ZBooleanNode, Visitor: ZVisitor): void {
	Visitor.VisitBooleanNode(this);
}

function GetValue(this: ZBooleanNode): any {
	return this.BooleanValue;
}

function ZClassDeclNode(this: ZClassDeclNode, ParentNode: ZNode): ZClassDeclNode {
	super(ParentNode, null, 0);
}

function SetTypeInfo(this: ZClassDeclNode, Type: ZType): void {
	this.SuperType = Type;
}

function SetNameInfo(this: ZClassDeclNode, Name: String): void {
	this.ClassName = Name;
}

function GetFieldNode(this: ZClassDeclNode, Index: int): ZFieldNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZFieldNode) {
		return (ZFieldNode)Node;
	}
	return null;
}

function Accept(this: ZClassDeclNode, Visitor: ZVisitor): void {
	Visitor.VisitClassDeclNode(this);
}

function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncNode: ZNode): ZFuncCallNode {
	super(ParentNode, null, 1);
	this.Set(ZFuncCallNode_Func, FuncNode);
}

function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, SourceToken: ZToken, ResolvedFunc: ZFunc): ZFuncCallNode {
	super(ParentNode, SourceToken, 1);
	this.ResolvedFunc = ResolvedFunc;
}

function GetRecvType(this: ZFuncCallNode): ZType {
	if(this.GetListSize() > 0) {
		return this.GetListAt(0).Type.GetRealType();
	}
	return ZType.VoidType;
}

function Accept(this: ZFuncCallNode, Visitor: ZVisitor): void {
	Visitor.VisitFuncCallNode(this);
}

function ZFunctionNode(this: ZFunctionNode, ParentNode: ZNode): ZFunctionNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZFunctionNode, Type: ZType): void {
	this.ReturnType = Type;
}

function SetNameInfo(this: ZFunctionNode, Name: String): void {
	this.FuncName = Name;
}

function Accept(this: ZFunctionNode, Visitor: ZVisitor): void {
	Visitor.VisitFunctionNode(this);
}

function GetParamNode(this: ZFunctionNode, Index: int): ZParamNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZParamNode) {
		return (ZParamNode)Node;
	}
	return null;
}

function GetFuncType(this: ZFunctionNode, ContextType: ZType): ZFuncType {
	if(this.ResolvedFuncType == null) {
		var FuncType: ZFuncType = null;
		if(ContextType instanceof ZFuncType) {
			FuncType = (ZFuncType)ContextType;
		}
		var TypeList: ZType[] = [];
		if(this.ReturnType.IsVarType() && FuncType != null) {
			this.ReturnType = FuncType.GetParamType(0);
		}
		TypeList.add(this.ReturnType.GetRealType());
		var i: int = 0;
		while(i < this.GetListSize()) {
			var Node: ZParamNode = this.GetParamNode(i);
			var ParamType: ZType = Node.Type.GetRealType();
			if(ParamType.IsVarType() && FuncType != null) {
				ParamType = FuncType.GetParamType(i+1);
			}
			TypeList.add(ParamType);
			i = i + 1;
		}
		FuncType = ZTypePool.LookupFuncType(TypeList);
		if(!FuncType.IsVarType()) {
			this.ResolvedFuncType = FuncType;
		}
		return FuncType;
	}
	return this.ResolvedFuncType;
}

function Push(this: ZFunctionNode, Parent: ZFunctionNode): ZFunctionNode {
	this.ParentFunctionNode = Parent;
	return this;
}

function Pop(this: ZFunctionNode): ZFunctionNode {
	return this.ParentFunctionNode;
}

function GetVarIndex(this: ZFunctionNode): int {
	var Index: int = this.VarIndex;
	this.VarIndex = this.VarIndex + 1;
	return Index;
}

function ZVarDeclNode(this: ZVarDeclNode, ParentNode: ZNode): ZVarDeclNode {
	super(ParentNode, 1);
}

function SetNameInfo(this: ZVarDeclNode, Name: String): void {
	this.NativeName = Name;
}

function SetTypeInfo(this: ZVarDeclNode, Type: ZType): void {
	this.DeclType = Type;
}

function Accept(this: ZVarDeclNode, Visitor: ZVisitor): void {
	Visitor.VisitVarDeclNode(this);
}


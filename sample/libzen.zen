class ZNode {
	var ParentNode: ZNode;
	var SourceToken: ZToken;
	var AST: ZNode[];
	var Type: ZType = ZType.VarType;
	var HasUntypedNode: boolean = true;

	var SetNameInfo: Func<void,ZNode,String>;
	var SetTypeInfo: Func<void,ZNode,ZType>;
	var IsErrorNode: Func<boolean,ZNode>;
	var IsBreakingBlock: Func<boolean,ZNode>;
	var GetVisitName: Func<String,ZNode>;
	var DeSugar: Func<ZNode,ZNode,ZGenerator>;
	var Accept: Func<void,ZNode,ZVisitor>;
	var VisitTypeChecker: Func<ZNode,ZNode,ZTypeChecker,ZType>;
	var ToReturnNode: Func<ZReturnNode,ZNode>;
	var GetNextNode: Func<ZNode,ZNode>;
}
class ZParamNode extends ZNode {
	var Name: String;

}
class ZReturnNode extends ZNode {
}
class ZSetIndexNode extends ZNode {
}
class ZSetNameNode extends ZNode {
	var int: static _Expr = 0;
	var VarName: String;
	var VarIndex: int = 0;
	var IsCaptured: boolean = false;

}
class ZSetterNode extends ZNode {
	var FieldName: String = null;
}
class ZThrowNode extends ZNode {
}
class ZTryNode extends ZNode {
}
class ZUnaryNode extends ZNode {

}
class ZWhileNode extends ZNode {
}
class ZAnnotationNode extends ZNode {
	var Annotation: Map<any>;
	var AnnotatedNode: ZNode = null;
}
class ZAssertNode extends ZNode {

}
class ZBinaryNode extends ZNode {
	var Pattern: ZSyntax;

}
class ZBreakNode extends ZNode {
}
class ZCastNode extends ZNode {

}
class ZCatchNode extends ZNode {
	var ExceptionType: ZType = ZType.VarType;
	var ExceptionName: String = null;
}
class ZComparatorNode extends ZBinaryNode {

}
class ZConstNode extends ZNode {

}
class ZEmptyNode extends ZNode {
}
class ZErrorNode extends ZConstNode {
}
class ZFieldNode extends ZNode {
	var ClassType: ZClassType;
	var DeclType: ZType = ZType.VarType;
	var FieldName: String = null;
}
class ZFloatNode extends ZConstNode {
	var FloatValue: float;
}
class ZGetIndexNode extends ZNode {
}
class ZGetNameNode extends ZNode {
	var IsCaptured: boolean = false;
	var VarName: String;
	var VarIndex: int = 0;

}
class ZGetterNode extends ZNode {
	var FieldName: String;
}
class ZGroupNode extends ZNode {
}
class ZIfNode extends ZNode {
	var int: static _Cond = 0;
	var int: static _Then = 1;
	var int: static _Else = 2;
}
class ZImportNode extends ZNode {
	var ResourcePath: String = null;
	var Alias: String = null;

	var Import: Func<ZNode,ZImportNode>;
}
class ZInstanceOfNode extends ZNode {
	var TargetType: ZType;
}
class ZIntNode extends ZConstNode {
	var IntValue: int;
}
class ZLetNode extends ZNode {
	var Symbol: String = null;
	var SymbolType: ZType = ZType.VarType;
	var GlobalName: String = null;

}
class ZListNode extends ZNode {
	var ListStartIndex: int;

}
class ZMapEntryNode extends ZNode {
	var Name: String = null;

}
class ZMapLiteralNode extends ZListNode {
}
class ZMethodCallNode extends ZListNode {
	var MethodName: String = null;
}
class ZNewArrayNode extends ZListNode {
}
class ZNewObjectNode extends ZListNode {
}
class ZNotNode extends ZUnaryNode {

}
class ZNullNode extends ZConstNode {
}
class ZOrNode extends ZBinaryNode {
}
class ZStringNode extends ZConstNode {
	var StringValue: String;
}
class ZTypeNode extends ZConstNode {
}
class ZAndNode extends ZBinaryNode {
}
class ZArrayLiteralNode extends ZListNode {
}
class ZBlockNode extends ZListNode {
	var NameSpace: ZNameSpace;


}
class ZBooleanNode extends ZConstNode {
	var BooleanValue: boolean;
}
class ZClassDeclNode extends ZListNode {
	var ClassName: String = null;
	var ClassType: ZClassType = null;
	var SuperType: ZType = null;
}
class ZFuncCallNode extends ZListNode {
	var ResolvedFuncName: String = null;
	var ResolvedFunc: ZFunc = null;
}
class ZFunctionNode extends ZListNode {
	var ReturnType: ZType = ZType.VarType;
	var FuncName: String = null;
	var ParentFunctionNode: ZFunctionNode = null;
	var ResolvedFuncType: ZFuncType = null;
	var GlobalName: String = null;
	var VarIndex: int = 0;

}
class ZVarDeclNode extends ZBlockNode {
	var DeclType: ZType = ZType.VarType;
	var NativeName: String = null;
}
let ZNode_Nop = -1;
let ZNode_NameInfo = -2;
let ZNode_TypeInfo = -3;
let ZNode_AppendIndex = -4;
let ZNode_NestedAppendIndex = -5;
let ZReturnNode_Expr = 0;
let ZSetIndexNode_Recv = 0;
let ZSetIndexNode_Index = 1;
let ZSetIndexNode_Expr = 2;
//let ZSetNameNode.@Field int _Expr = 0;
let ZSetterNode_Recv = 0;
let ZSetterNode_Expr = 1;
let ZThrowNode_Expr = 0;
let ZTryNode_Try = 0;
let ZTryNode_Catch = 1;
let ZTryNode_Finally = 2;
let ZUnaryNode_Recv = 0;
let ZWhileNode_Cond = 0;
let ZWhileNode_Block = 1;
let ZAssertNode_Expr = 0;
let ZBinaryNode_Left = 0;
let ZBinaryNode_Right = 1;
let ZCastNode_Expr = 0;
let ZCatchNode_Block = 0;
let ZFieldNode_InitValue = 0;
let ZGetIndexNode_Recv = 0;
let ZGetIndexNode_Index = 1;
let ZGetterNode_Recv = 0;
let ZGroupNode_Expr = 0;
//let ZIfNode.@Field int _Cond = 0;
//let ZIfNode.@Field int _Then = 1;
//let ZIfNode.@Field int _Else = 2;
let ZInstanceOfNode_Left = 0;
let ZLetNode_InitValue = 0;
let ZMapEntryNode_Key = 0;
let ZMapEntryNode_Value = 1;
let ZMethodCallNode_Recv = 0;
let ZFuncCallNode_Func = 0;
let ZFunctionNode_Block = 0;
let ZVarDeclNode_InitValue = 0;
function ZNode(this: ZNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZNode;
function SetChild(this: ZNode, Node: ZNode): ZNode;
function SetNameInfo(this: ZNode, Name: String): void;
function SetTypeInfo(this: ZNode, Type: ZType): void;
function Set(this: ZNode, Index: int, Node: ZNode): void;
function GetAstSize(this: ZNode): int;
function HasAst(this: ZNode, Index: int): boolean;
function GetAstType(this: ZNode, Index: int): ZType;
function toString(this: ZNode): String;
function GetScopeBlockNode(this: ZNode): ZBlockNode;
function GetNameSpace(this: ZNode): ZNameSpace;
function IsErrorNode(this: ZNode): boolean;
function IsBreakingBlock(this: ZNode): boolean;
function GetVisitName(this: ZNode): String;
function DeSugar(this: ZNode, Generator: ZGenerator): ZNode;
function Accept(this: ZNode, Visitor: ZVisitor): void;
function IsUntyped(this: ZNode): boolean;
function HasUntypedNode(this: ZNode): boolean;
function VisitTypeChecker(this: ZNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode;
function ToReturnNode(this: ZNode): ZReturnNode;
function GetPrevNode(this: ZNode): ZNode;
function GetNextNode(this: ZNode): ZNode;
function ZParamNode(this: ZParamNode, ParentNode: ZNode): ZParamNode;
function GetVisitName(this: ZParamNode): String;
function SetNameInfo(this: ZParamNode, Name: String): void;
function ZReturnNode(this: ZReturnNode, ParentNode: ZNode): ZReturnNode;
function Accept(this: ZReturnNode, Visitor: ZVisitor): void;
function ToReturnNode(this: ZReturnNode): ZReturnNode;
function ZSetIndexNode(this: ZSetIndexNode, ParentNode: ZNode, LeftNode: ZNode): ZSetIndexNode;
function Accept(this: ZSetIndexNode, Visitor: ZVisitor): void;
function ZSetNameNode(this: ZSetNameNode, ParentNode: ZNode, Token: ZToken, VarName: String): ZSetNameNode;
function Accept(this: ZSetNameNode, Visitor: ZVisitor): void;
function ZSetterNode(this: ZSetterNode, ParentNode: ZNode, RecvNode: ZNode): ZSetterNode;
function SetNameInfo(this: ZSetterNode, Name: String): void;
function Accept(this: ZSetterNode, Visitor: ZVisitor): void;
function IsStaticField(this: ZSetterNode): boolean;
function ZThrowNode(this: ZThrowNode, ParentNode: ZNode): ZThrowNode;
function Accept(this: ZThrowNode, Visitor: ZVisitor): void;
function ZTryNode(this: ZTryNode, ParentNode: ZNode): ZTryNode;
function Accept(this: ZTryNode, Visitor: ZVisitor): void;
function ZUnaryNode(this: ZUnaryNode, ParentNode: ZNode, Token: ZToken): ZUnaryNode;
function Accept(this: ZUnaryNode, Visitor: ZVisitor): void;
function ZWhileNode(this: ZWhileNode, ParentNode: ZNode): ZWhileNode;
function Accept(this: ZWhileNode, Visitor: ZVisitor): void;
function ZAnnotationNode(this: ZAnnotationNode, ParentNode: ZNode, Token: ZToken, Anno: Map<any>): ZAnnotationNode;
function IsBreakingBlock(this: ZAnnotationNode): boolean;
function IsErrorNode(this: ZAnnotationNode): boolean;
function Accept(this: ZAnnotationNode, Visitor: ZVisitor): void;
function ZAssertNode(this: ZAssertNode, ParentNode: ZNode): ZAssertNode;
function GetVisitName(this: ZAssertNode): String;
function VisitTypeChecker(this: ZAssertNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode;
function DeSugar(this: ZAssertNode, Generator: ZGenerator): ZNode;
function ZBinaryNode(this: ZBinaryNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZBinaryNode;
function IsRightJoin(this: ZBinaryNode, Node: ZNode): boolean;
function RightJoin(this: ZBinaryNode, ParentNode: ZNode, RightNode: ZBinaryNode): ZNode;
function AppendParsedRightNode(this: ZBinaryNode, ParentNode: ZNode, TokenContext: ZTokenContext): ZNode;
function Accept(this: ZBinaryNode, Visitor: ZVisitor): void;
function ZBreakNode(this: ZBreakNode, ParentNode: ZNode): ZBreakNode;
function Accept(this: ZBreakNode, Visitor: ZVisitor): void;
function ZCastNode(this: ZCastNode, ParentNode: ZNode, CastType: ZType, Node: ZNode): ZCastNode;
function Accept(this: ZCastNode, Visitor: ZVisitor): void;
function ToStaticFuncCall(this: ZCastNode, Func: ZFunc): ZFuncCallNode;
function ZCatchNode(this: ZCatchNode, ParentNode: ZNode): ZCatchNode;
function SetTypeInfo(this: ZCatchNode, Type: ZType): void;
function SetNameInfo(this: ZCatchNode, Name: String): void;
function GetVisitName(this: ZCatchNode): String;
function ZComparatorNode(this: ZComparatorNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZComparatorNode;
function Accept(this: ZComparatorNode, Visitor: ZVisitor): void;
function ZConstNode(this: ZConstNode, ParentNode: ZNode, SourceToken: ZToken): ZConstNode;
function ZEmptyNode(this: ZEmptyNode, ParentNode: ZNode, Token: ZToken): ZEmptyNode;
function GetVisitName(this: ZEmptyNode): String;
function ZErrorNode(this: ZErrorNode, ParentNode: ZNode, SourceToken: ZToken, ErrorMessage: String): ZErrorNode;
function ZErrorNode(this: ZErrorNode, Node: ZNode, ErrorMessage: String): ZErrorNode;
function Accept(this: ZErrorNode, Visitor: ZVisitor): void;
function toString(this: ZErrorNode): String;
function ZFieldNode(this: ZFieldNode, ParentNode: ZNode): ZFieldNode;
function SetTypeInfo(this: ZFieldNode, Type: ZType): void;
function SetNameInfo(this: ZFieldNode, Name: String): void;
function GetVisitName(this: ZFieldNode): String;
function ZFloatNode(this: ZFloatNode, ParentNode: ZNode, Token: ZToken, Value: float): ZFloatNode;
function Accept(this: ZFloatNode, Visitor: ZVisitor): void;
function ZGetIndexNode(this: ZGetIndexNode, ParentNode: ZNode, RecvNode: ZNode): ZGetIndexNode;
function Accept(this: ZGetIndexNode, Visitor: ZVisitor): void;
function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, Token: ZToken, NativeName: String): ZGetNameNode;
function Accept(this: ZGetNameNode, Visitor: ZVisitor): void;
function ZGetterNode(this: ZGetterNode, ParentNode: ZNode, RecvNode: ZNode): ZGetterNode;
function SetNameInfo(this: ZGetterNode, Name: String): void;
function Accept(this: ZGetterNode, Visitor: ZVisitor): void;
function IsStaticField(this: ZGetterNode): boolean;
function ZGroupNode(this: ZGroupNode, ParentNode: ZNode): ZGroupNode;
function Accept(this: ZGroupNode, Visitor: ZVisitor): void;
function ZIfNode(this: ZIfNode, ParentNode: ZNode): ZIfNode;
function Accept(this: ZIfNode, Visitor: ZVisitor): void;
function ZImportNode(this: ZImportNode, ParentNode: ZNode): ZImportNode;
function SetNameInfo(this: ZImportNode, Name: String): void;
function GetVisitName(this: ZImportNode): String;
function Import(this: ZImportNode): ZNode;
function ZInstanceOfNode(this: ZInstanceOfNode, ParentNode: ZNode, Token: ZToken, LeftNode: ZNode): ZInstanceOfNode;
function SetTypeInfo(this: ZInstanceOfNode, Type: ZType): void;
function Accept(this: ZInstanceOfNode, Visitor: ZVisitor): void;
function ZIntNode(this: ZIntNode, ParentNode: ZNode, Token: ZToken, Value: int): ZIntNode;
function Accept(this: ZIntNode, Visitor: ZVisitor): void;
function ZLetNode(this: ZLetNode, ParentNode: ZNode): ZLetNode;
function SetNameInfo(this: ZLetNode, Name: String): void;
function SetTypeInfo(this: ZLetNode, Type: ZType): void;
function Accept(this: ZLetNode, Visitor: ZVisitor): void;
function ZListNode(this: ZListNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZListNode;
function Append(this: ZListNode, Node: ZNode): void;
function GetListSize(this: ZListNode): int;
function GetListAt(this: ZListNode, Index: int): ZNode;
function SetListAt(this: ZListNode, Index: int, Node: ZNode): void;
function InsertAt(this: ZListNode, Index: int, Node: ZNode): void;
function RemoveAt(this: ZListNode, Index: int): ZNode;
function ClearList(this: ZListNode, Size: int): void;
function ZMapEntryNode(this: ZMapEntryNode, ParentNode: ZNode): ZMapEntryNode;
function GetVisitName(this: ZMapEntryNode): String;
function ZMapLiteralNode(this: ZMapLiteralNode, ParentNode: ZNode): ZMapLiteralNode;
function GetMapEntryNode(this: ZMapLiteralNode, Index: int): ZMapEntryNode;
function Accept(this: ZMapLiteralNode, Visitor: ZVisitor): void;
function ZMethodCallNode(this: ZMethodCallNode, ParentNode: ZNode, RecvNode: ZNode): ZMethodCallNode;
function SetNameInfo(this: ZMethodCallNode, Name: String): void;
function Accept(this: ZMethodCallNode, Visitor: ZVisitor): void;
function ToGetterFuncCall(this: ZMethodCallNode): ZFuncCallNode;
function ToStaticFuncCall(this: ZMethodCallNode, Func: ZFunc): ZFuncCallNode;
function ZNewArrayNode(this: ZNewArrayNode, ParentNode: ZNode, Type: ZType, Token: ZToken): ZNewArrayNode;
function ZNewObjectNode(this: ZNewanyNode, ParentNode: ZNode): ZNewanyNode;
function Accept(this: ZNewanyNode, Visitor: ZVisitor): void;
function ToStaticFuncCall(this: ZNewanyNode, Func: ZFunc): ZFuncCallNode;
function ZNotNode(this: ZNotNode, ParentNode: ZNode, Token: ZToken): ZNotNode;
function Accept(this: ZNotNode, Visitor: ZVisitor): void;
function ZNullNode(this: ZNullNode, ParentNode: ZNode, SourceToken: ZToken): ZNullNode;
function Accept(this: ZNullNode, Visitor: ZVisitor): void;
function ZOrNode(this: ZOrNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZOrNode;
function Accept(this: ZOrNode, Visitor: ZVisitor): void;
function ZStringNode(this: ZStringNode, ParentNode: ZNode, Token: ZToken, Value: String): ZStringNode;
function Accept(this: ZStringNode, Visitor: ZVisitor): void;
function ZTypeNode(this: ZTypeNode, ParentNode: ZNode, SourceToken: ZToken, ParsedType: ZType): ZTypeNode;
function GetVisitName(this: ZTypeNode): String;
function ZAndNode(this: ZAndNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZAndNode;
function Accept(this: ZAndNode, Visitor: ZVisitor): void;
function ZArrayLiteralNode(this: ZArrayLiteralNode, ParentNode: ZNode): ZArrayLiteralNode;
function Accept(this: ZArrayLiteralNode, Visitor: ZVisitor): void;
function ZBlockNode(this: ZBlockNode, NameSpace: ZNameSpace): ZBlockNode;
function ZBlockNode(this: ZBlockNode, ParentNode: ZNode, Init: int): ZBlockNode;
function Accept(this: ZBlockNode, Visitor: ZVisitor): void;
function ToReturnNode(this: ZBlockNode): ZReturnNode;
function ZBooleanNode(this: ZBooleanNode, ParentNode: ZNode, Token: ZToken, Value: boolean): ZBooleanNode;
function Accept(this: ZBooleanNode, Visitor: ZVisitor): void;
function ZClassDeclNode(this: ZClassDeclNode, ParentNode: ZNode): ZClassDeclNode;
function SetTypeInfo(this: ZClassDeclNode, Type: ZType): void;
function SetNameInfo(this: ZClassDeclNode, Name: String): void;
function GetFieldNode(this: ZClassDeclNode, Index: int): ZFieldNode;
function Accept(this: ZClassDeclNode, Visitor: ZVisitor): void;
function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncNode: ZNode): ZFuncCallNode;
function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, SourceToken: ZToken, ResolvedFunc: ZFunc): ZFuncCallNode;
function GetRecvType(this: ZFuncCallNode): ZType;
function Accept(this: ZFuncCallNode, Visitor: ZVisitor): void;
function ZFunctionNode(this: ZFunctionNode, ParentNode: ZNode): ZFunctionNode;
function SetTypeInfo(this: ZFunctionNode, Type: ZType): void;
function SetNameInfo(this: ZFunctionNode, Name: String): void;
function Accept(this: ZFunctionNode, Visitor: ZVisitor): void;
function GetParamNode(this: ZFunctionNode, Index: int): ZParamNode;
function GetFuncType(this: ZFunctionNode, ContextType: ZType): ZFuncType;
function Push(this: ZFunctionNode, Parent: ZFunctionNode): ZFunctionNode;
function Pop(this: ZFunctionNode): ZFunctionNode;
function GetVarIndex(this: ZFunctionNode): int;
function ZVarDeclNode(this: ZVarDeclNode, ParentNode: ZNode): ZVarDeclNode;
function SetNameInfo(this: ZVarDeclNode, Name: String): void;
function SetTypeInfo(this: ZVarDeclNode, Type: ZType): void;
function Accept(this: ZVarDeclNode, Visitor: ZVisitor): void;
function ZNode(this: ZNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZNode {
	assert(this != ParentNode);
	this.ParentNode = ParentNode;
	this.SourceToken = SourceToken;
	if(Size > 0) {
		this.AST = new ZNode[Size];
	}
	else {
		this.AST = null;
	}
}

function SetChild(this: ZNode, Node: ZNode): ZNode {
	assert(Node != null);
	if(Node != null) {
		assert(this != Node);
		Node.ParentNode = this;
	}
	return Node;
}

function SetNameInfo(this: ZNode, Name: String): void {
	assert(Name == null);  // Set SetName in a sub class property
}

function SetTypeInfo(this: ZNode, Type: ZType): void {
	this.Type = Type;  // default behavior
}

function Set(this: ZNode, Index: int, Node: ZNode): void {
	if(Index >= 0) {
		this.AST[Index] = Node;
	}
	else if(Index == ZNode_AppendIndex) {
		var ListNode: ZNode = this;
		if(ListNode instanceof ZListNode) {
			((ZListNode)ListNode).Append(Node);
		}
		else {
			System.out.println("parent=" + ListNode + ", node=" + Node);
			assert(ListNode instanceof ZListNode);
		}
	}
	else if(Index == ZNode_NameInfo) {
		this.SetNameInfo(Node.SourceToken.GetText());
		this.SourceToken = Node.SourceToken;
	}
	else if(Index == ZNode_TypeInfo) {
		this.SetTypeInfo(Node.Type);
	}
}

function GetAstSize(this: ZNode): int {
	if(this.AST == null) {
		return 0;
	}
	return this.AST.length;
}

function HasAst(this: ZNode, Index: int): boolean {
	if(this.AST != null && Index < this.AST.length) {
		return this.AST[Index] != null;
	}
	return false;
}

function GetAstType(this: ZNode, Index: int): ZType {
	return this.AST[Index].Type;
}

function toString(this: ZNode): String {
	var Self: String = "#" + this.getClass().getSimpleName();
	if(!this.Type.IsVarType()) {
		Self = Self + ":" + this.Type;
	}
	if(this.AST != null) {
		var i: int = 0;
		Self = Self + "[";
		while(i < this.AST.length) {
			if(i > 0) {
				Self = Self + ",";
			}
			if(this.AST[i] == null) {
				Self = Self + "null";
			}
			else {
				Self = Self + this.AST[i].toString();
			}
			i = i + 1;
		}
		Self = Self + "]";
	}
	return Self;
}

function GetScopeBlockNode(this: ZNode): ZBlockNode {
	ZNode Node = this;
	while(Node != null) {
		if(Node instanceof ZBlockNode) {
			return (ZBlockNode)Node;
		}
		if(Node == Node.ParentNode) {
			throw new RuntimeException("serious error: parent node is same: " + Node);
		}
		Node = Node.ParentNode;
	}
	return null;
}

function GetNameSpace(this: ZNode): ZNameSpace {
	ZBlockNode BlockNode = this.GetScopeBlockNode();
	return BlockNode.NameSpace;
}

function IsErrorNode(this: ZNode): boolean {
	return (this instanceof ZErrorNode);
}

function IsBreakingBlock(this: ZNode): boolean {
	return false;
}

function GetVisitName(this: ZNode): String {
	return "VisitExtendedNode"; // override this if you want to use additional node
}

function DeSugar(this: ZNode, Generator: ZGenerator): ZNode {
	return this;
}

function Accept(this: ZNode, Visitor: ZVisitor): void {
	LibZen.DispatchVisitNode(Visitor, this);
}

function IsUntyped(this: ZNode): boolean {
	return this.Type.IsVarType();
}

function HasUntypedNode(this: ZNode): boolean {
	if(this.HasUntypedNode) {
		if(!this.IsUntyped()) {
			var i: int = 0;
			while(i < this.GetAstSize()) {
				if(this.AST[i] != null && this.AST[i].HasUntypedNode()) {
					return true;
				}
				i = i + 1;
			}
			this.HasUntypedNode = false;
			return false;
		}
	}
	return this.HasUntypedNode;
}

function VisitTypeChecker(this: ZNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode {
	return TypeChecker.VisitTypeChecker(this, ContextType);
}

function ToReturnNode(this: ZNode): ZReturnNode {
	return null;
}

function GetPrevNode(this: ZNode): ZNode {
	if(this.ParentNode == null) {
		return null;
	}
	if(this.ParentNode instanceof ZBlockNode) {
		ZBlockNode Block = (ZBlockNode) this.ParentNode;
		for (int i = 1; i < Block.GetListSize(); i++) {
			if(Block.GetListAt(i) == this) {
				return Block.GetListAt(i-1);
			}
		}
	}
	return null;
}

function GetNextNode(this: ZNode): ZNode {
	if(this.ParentNode == null) {
		return null;
	}
	if(this.ParentNode instanceof ZBlockNode) {
		ZBlockNode Block = (ZBlockNode) this.ParentNode;
		for (int i = 0; i < Block.GetListSize() - 1; i++) {
			if(Block.GetListAt(i) == this) {
				return Block.GetListAt(i+1);
			}
		}
	}
	return null;
}

function ZParamNode(this: ZParamNode, ParentNode: ZNode): ZParamNode {
	super(ParentNode, null, 0);
}

function GetVisitName(this: ZParamNode): String {
	return "VisitParamNode"; // override this if you want to use additional node
}

function SetNameInfo(this: ZParamNode, Name: String): void {
	this.Name = Name;
}

function ZReturnNode(this: ZReturnNode, ParentNode: ZNode): ZReturnNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZReturnNode, Visitor: ZVisitor): void {
	Visitor.VisitReturnNode(this);
}

function ToReturnNode(this: ZReturnNode): ZReturnNode {
	return this;
}

function ZSetIndexNode(this: ZSetIndexNode, ParentNode: ZNode, LeftNode: ZNode): ZSetIndexNode {
	super(ParentNode, null, 3);
	this.Set(ZSetIndexNode_Recv, LeftNode);
}

function Accept(this: ZSetIndexNode, Visitor: ZVisitor): void {
	Visitor.VisitSetIndexNode(this);
}

function ZSetNameNode(this: ZSetNameNode, ParentNode: ZNode, Token: ZToken, VarName: String): ZSetNameNode {
	super(ParentNode, Token, 1);
	this.VarName = VarName;
}

function Accept(this: ZSetNameNode, Visitor: ZVisitor): void {
	Visitor.VisitSetNameNode(this);
}

function ZSetterNode(this: ZSetterNode, ParentNode: ZNode, RecvNode: ZNode): ZSetterNode {
	super(ParentNode, null, 2);
	this.Set(ZSetterNode_Recv, RecvNode);
}

function SetNameInfo(this: ZSetterNode, Name: String): void {
	this.FieldName = Name;
}

function Accept(this: ZSetterNode, Visitor: ZVisitor): void {
	Visitor.VisitSetterNode(this);
}

function IsStaticField(this: ZSetterNode): boolean {
	return this.AST[ZSetterNode_Recv] instanceof ZTypeNode;
}

function ZThrowNode(this: ZThrowNode, ParentNode: ZNode): ZThrowNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZThrowNode, Visitor: ZVisitor): void {
	Visitor.VisitThrowNode(this);
}

function ZTryNode(this: ZTryNode, ParentNode: ZNode): ZTryNode {
	super(ParentNode, null, 3);
}

function Accept(this: ZTryNode, Visitor: ZVisitor): void {
	Visitor.VisitTryNode(this);
}

function ZUnaryNode(this: ZUnaryNode, ParentNode: ZNode, Token: ZToken): ZUnaryNode {
	super(ParentNode, Token, 1);
}

function Accept(this: ZUnaryNode, Visitor: ZVisitor): void {
	Visitor.VisitUnaryNode(this);
}

function ZWhileNode(this: ZWhileNode, ParentNode: ZNode): ZWhileNode {
	super(ParentNode, null, 2);
}

function Accept(this: ZWhileNode, Visitor: ZVisitor): void {
	Visitor.VisitWhileNode(this);
}

function ZAnnotationNode(this: ZAnnotationNode, ParentNode: ZNode, Token: ZToken, Anno: Map<any>): ZAnnotationNode {
	super(ParentNode, Token, 0);
	this.Annotation = Anno;
}

function IsBreakingBlock(this: ZAnnotationNode): boolean {
	return this.AnnotatedNode.IsBreakingBlock();
}

function IsErrorNode(this: ZAnnotationNode): boolean {
	return this.AnnotatedNode.IsErrorNode();
}

function Accept(this: ZAnnotationNode, Visitor: ZVisitor): void {
	this.AnnotatedNode.Accept(Visitor);
}

function ZAssertNode(this: ZAssertNode, ParentNode: ZNode): ZAssertNode {
	super(ParentNode, null, 1);
}

function GetVisitName(this: ZAssertNode): String {
	return "VisitAssertNode";
}

function VisitTypeChecker(this: ZAssertNode, TypeChecker: ZTypeChecker, ContextType: ZType): ZNode {
	TypeChecker.CheckTypeAt(this, ZAssertNode_Expr, ZType.BooleanType);
	this.Type = ZType.VoidType;
	return this;
}

function DeSugar(this: ZAssertNode, Generator: ZGenerator): ZNode {
	ZFunc Func = Generator.GetDefinedFunc("Assert", ZType.BooleanType, 1);
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, this.SourceToken, Func);
	FuncNode.Append(this.AST[ZAssertNode_Expr]);
	return FuncNode;
}

function ZBinaryNode(this: ZBinaryNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZBinaryNode {
	super(ParentNode, SourceToken, 2);
	this.Set(ZBinaryNode_Left, Left);
	assert(Pattern != null);
	this.Pattern = Pattern;
}

function IsRightJoin(this: ZBinaryNode, Node: ZNode): boolean {
	if(Node instanceof ZBinaryNode) {
		return this.Pattern.IsRightJoin(((ZBinaryNode)Node).Pattern);
	}
	return false;
}

function RightJoin(this: ZBinaryNode, ParentNode: ZNode, RightNode: ZBinaryNode): ZNode {
	var RightLeftNode: ZNode = RightNode.AST[ZBinaryNode_Left];
	if(this.IsRightJoin(RightLeftNode)) {
		RightNode.Set(ZBinaryNode_Left, this.RightJoin(ParentNode, (ZBinaryNode) RightLeftNode));
	}
	else {
		RightNode.Set(ZBinaryNode_Left, this);
		this.Set(ZBinaryNode_Right, RightLeftNode);
	}
	return RightNode;
}

function AppendParsedRightNode(this: ZBinaryNode, ParentNode: ZNode, TokenContext: ZTokenContext): ZNode {
	var RightNode: ZNode = TokenContext.ParsePattern(ParentNode, "$Expression$", ZTokenContext.Required);
	if(RightNode.IsErrorNode()) {
		return RightNode;
	}
	if(this.IsRightJoin(RightNode)) {
		return this.RightJoin(ParentNode, (ZBinaryNode) RightNode);
	}
	this.Set(ZBinaryNode_Right, RightNode);
	return this;
}

function Accept(this: ZBinaryNode, Visitor: ZVisitor): void {
	Visitor.VisitBinaryNode(this);
}

function ZBreakNode(this: ZBreakNode, ParentNode: ZNode): ZBreakNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZBreakNode, Visitor: ZVisitor): void {
	Visitor.VisitBreakNode(this);
}

function ZCastNode(this: ZCastNode, ParentNode: ZNode, CastType: ZType, Node: ZNode): ZCastNode {
	super(ParentNode, null, 1);
	this.Type = CastType;
	if(Node != null) {
		this.Set(ZCastNode_Expr, Node);
	}
}

function Accept(this: ZCastNode, Visitor: ZVisitor): void {
	Visitor.VisitCastNode(this);
}

function ToStaticFuncCall(this: ZCastNode, Func: ZFunc): ZFuncCallNode {
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, this.SourceToken, Func);
	FuncNode.Append(this.AST[ZCastNode_Expr]);
	return FuncNode;
}

function ZCatchNode(this: ZCatchNode, ParentNode: ZNode): ZCatchNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZCatchNode, Type: ZType): void {
	this.ExceptionType = Type;
}

function SetNameInfo(this: ZCatchNode, Name: String): void {
	this.ExceptionName = Name;
}

function GetVisitName(this: ZCatchNode): String {
	return "VisitCatchNode"; // override this if you want to use additional node
}

function ZComparatorNode(this: ZComparatorNode, ParentNode: ZNode, SourceToken: ZToken, Left: ZNode, Pattern: ZSyntax): ZComparatorNode {
	super(ParentNode, SourceToken, Left, Pattern);
}

function Accept(this: ZComparatorNode, Visitor: ZVisitor): void {
	Visitor.VisitComparatorNode(this);
}

function ZConstNode(this: ZConstNode, ParentNode: ZNode, SourceToken: ZToken): ZConstNode {
	super(ParentNode, SourceToken, 0);
}

function ZEmptyNode(this: ZEmptyNode, ParentNode: ZNode, Token: ZToken): ZEmptyNode {
	super(ParentNode, Token, 0);
}

function GetVisitName(this: ZEmptyNode): String {
	return "VisitEmptyNode";
}

function ZErrorNode(this: ZErrorNode, ParentNode: ZNode, SourceToken: ZToken, ErrorMessage: String): ZErrorNode {
	super(ParentNode, SourceToken);
	this.ErrorMessage = ErrorMessage;
}

function ZErrorNode(this: ZErrorNode, Node: ZNode, ErrorMessage: String): ZErrorNode {
	super(Node.ParentNode, Node.SourceToken);
	this.ErrorMessage = ErrorMessage;
}

function Accept(this: ZErrorNode, Visitor: ZVisitor): void {
	Visitor.VisitErrorNode(this);
}

function toString(this: ZErrorNode): String {
	return "ErrorNode "" + this.ErrorMessage + """;
}

function ZFieldNode(this: ZFieldNode, ParentNode: ZNode): ZFieldNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZFieldNode, Type: ZType): void {
	this.DeclType = Type;
}

function SetNameInfo(this: ZFieldNode, Name: String): void {
	this.FieldName = Name;
}

function GetVisitName(this: ZFieldNode): String {
	return "VisitFieldNode";
}

function ZFloatNode(this: ZFloatNode, ParentNode: ZNode, Token: ZToken, Value: float): ZFloatNode {
	super(ParentNode, Token);
	this.Type = ZType.FloatType;
	this.FloatValue = Value;
}

function Accept(this: ZFloatNode, Visitor: ZVisitor): void {
	Visitor.VisitFloatNode(this);
}

function ZGetIndexNode(this: ZGetIndexNode, ParentNode: ZNode, RecvNode: ZNode): ZGetIndexNode {
	super(ParentNode, null, 2);
	this.AST[ZGetIndexNode_Recv] = this.SetChild(RecvNode);
}

function Accept(this: ZGetIndexNode, Visitor: ZVisitor): void {
	Visitor.VisitGetIndexNode(this);
}

function ZGetNameNode(this: ZGetNameNode, ParentNode: ZNode, Token: ZToken, NativeName: String): ZGetNameNode {
	super(ParentNode, Token, 0);
	this.VarName = NativeName;
}

function Accept(this: ZGetNameNode, Visitor: ZVisitor): void {
	Visitor.VisitGetNameNode(this);
}

function ZGetterNode(this: ZGetterNode, ParentNode: ZNode, RecvNode: ZNode): ZGetterNode {
	super(ParentNode, null, 1);
	this.Set(ZGetterNode_Recv, RecvNode);
}

function SetNameInfo(this: ZGetterNode, Name: String): void {
	this.FieldName = Name;
}

function Accept(this: ZGetterNode, Visitor: ZVisitor): void {
	Visitor.VisitGetterNode(this);
}

function IsStaticField(this: ZGetterNode): boolean {
	return this.AST[ZGetterNode_Recv] instanceof ZTypeNode;
}

function ZGroupNode(this: ZGroupNode, ParentNode: ZNode): ZGroupNode {
	super(ParentNode, null, 1);
}

function Accept(this: ZGroupNode, Visitor: ZVisitor): void {
	Visitor.VisitGroupNode(this);
}

function ZIfNode(this: ZIfNode, ParentNode: ZNode): ZIfNode {
	super(ParentNode, null, 3);
}

function Accept(this: ZIfNode, Visitor: ZVisitor): void {
	Visitor.VisitIfNode(this);
}

function ZImportNode(this: ZImportNode, ParentNode: ZNode): ZImportNode {
	super(ParentNode, null, 0);
}

function SetNameInfo(this: ZImportNode, Name: String): void {
	if(this.ResourcePath == null) {
		this.ResourcePath = Name;
	}
	else {
		this.Alias = Name;
	}
}

function GetVisitName(this: ZImportNode): String {
	return "VisitImportNode"; // override this if you want to use additional node
}

function Import(this: ZImportNode): ZNode {
	return ZenError.UnfoundResource(this, this.ResourcePath);
}

function ZInstanceOfNode(this: ZInstanceOfNode, ParentNode: ZNode, Token: ZToken, LeftNode: ZNode): ZInstanceOfNode {
	super(ParentNode, Token, 1);
	this.Set(ZInstanceOfNode_Left, LeftNode);
}

function SetTypeInfo(this: ZInstanceOfNode, Type: ZType): void {
	this.TargetType = Type;
}

function Accept(this: ZInstanceOfNode, Visitor: ZVisitor): void {
	Visitor.VisitInstanceOfNode(this);
}

function ZIntNode(this: ZIntNode, ParentNode: ZNode, Token: ZToken, Value: int): ZIntNode {
	super(ParentNode, Token);
	this.Type = ZType.IntType;
	this.IntValue = Value;
}

function Accept(this: ZIntNode, Visitor: ZVisitor): void {
	Visitor.VisitIntNode(this);
}

function ZLetNode(this: ZLetNode, ParentNode: ZNode): ZLetNode {
	super(ParentNode, null, 1);
}

function SetNameInfo(this: ZLetNode, Name: String): void {
	this.Symbol = Name;
}

function SetTypeInfo(this: ZLetNode, Type: ZType): void {
	this.SymbolType = Type;
}

function Accept(this: ZLetNode, Visitor: ZVisitor): void {
	Visitor.VisitLetNode(this);
}

function ZListNode(this: ZListNode, ParentNode: ZNode, SourceToken: ZToken, Size: int): ZListNode {
	super(ParentNode, SourceToken, Size);
	this.ListStartIndex = Size;
}

function Append(this: ZListNode, Node: ZNode): void {
	if(this.AST == null) {
		this.AST = new ZNode[1];
		this.Set(0, Node);
	}
	else {
		var newAST: ZNode[] = new ZNode[this.AST.length+1];
		System.arraycopy(this.AST, 0, newAST, 0, this.AST.length);
		this.AST = newAST;
		this.Set(this.AST.length - 1, Node);
	}
}

function GetListSize(this: ZListNode): int {
	return this.GetAstSize() - this.ListStartIndex;
}

function GetListAt(this: ZListNode, Index: int): ZNode {
	return this.AST[this.ListStartIndex + Index];
}

function SetListAt(this: ZListNode, Index: int, Node: ZNode): void {
	this.Set(Index + this.ListStartIndex, Node);
}

function InsertAt(this: ZListNode, Index: int, Node: ZNode): void {
	if(this.AST == null || Index < 0 || this.AST.length == Index) {
		this.Append(Node);
	} else {
		var newAST: ZNode[] = new ZNode[this.AST.length + 1];
		Index = this.ListStartIndex + Index;
		System.arraycopy(this.AST, 0, newAST, 0, Index);
		this.Set(Index, Node);
		System.arraycopy(this.AST, Index, newAST, Index + 1, this.AST.length - Index);
		this.AST = newAST;
	}
}

function RemoveAt(this: ZListNode, Index: int): ZNode {
	var Removed: ZNode = this.GetListAt(Index);
	var newAST: ZNode[] = new ZNode[this.AST.length - 1];
	int RemovedIndex = this.ListStartIndex + Index;
	System.arraycopy(this.AST, 0, newAST, 0, RemovedIndex);
	System.arraycopy(this.AST, RemovedIndex + 1, newAST, RemovedIndex, this.AST.length - (RemovedIndex + 1));
	this.AST = newAST;
	return Removed;
}

function ClearList(this: ZListNode, Size: int): void {
	if(Size < this.GetListSize()) {
		var newsize: int = this.ListStartIndex + Size;
		if(newsize == 0) {
			this.AST = null;
		}
		else {
			var newAST: ZNode[] = new ZNode[newsize];
			System.arraycopy(this.AST, 0, newAST, 0, newsize);
			this.AST = newAST;
		}
	}
}

function ZMapEntryNode(this: ZMapEntryNode, ParentNode: ZNode): ZMapEntryNode {
	super(ParentNode, null, 2);
}

function GetVisitName(this: ZMapEntryNode): String {
	return "VisitMapEntryNode"; // override this if you want to use additional node
}

function ZMapLiteralNode(this: ZMapLiteralNode, ParentNode: ZNode): ZMapLiteralNode {
	super(ParentNode, null, 0);
}

function GetMapEntryNode(this: ZMapLiteralNode, Index: int): ZMapEntryNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZMapEntryNode) {
		return (ZMapEntryNode)Node;
	}
	return null;
}

function Accept(this: ZMapLiteralNode, Visitor: ZVisitor): void {
	Visitor.VisitMapLiteralNode(this);
}

function ZMethodCallNode(this: ZMethodCallNode, ParentNode: ZNode, RecvNode: ZNode): ZMethodCallNode {
	super(ParentNode, null, 1);
	this.Set(ZMethodCallNode_Recv, RecvNode);
}

function SetNameInfo(this: ZMethodCallNode, Name: String): void {
	this.MethodName = Name;
}

function Accept(this: ZMethodCallNode, Visitor: ZVisitor): void {
	Visitor.VisitMethodCallNode(this);
}

function ToGetterFuncCall(this: ZMethodCallNode): ZFuncCallNode {
	ZGetterNode Getter = new ZGetterNode(null, this.AST[ZMethodCallNode_Recv]);
	Getter.SetNameInfo(this.MethodName);
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, Getter);
	FuncNode.SourceToken = this.SourceToken;
	FuncNode.Append(this.AST[ZMethodCallNode_Recv]);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	return FuncNode;
}

function ToStaticFuncCall(this: ZMethodCallNode, Func: ZFunc): ZFuncCallNode {
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, this.SourceToken, Func);
	FuncNode.Append(this.AST[ZMethodCallNode_Recv]);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	return FuncNode;
}

function ZNewArrayNode(this: ZNewArrayNode, ParentNode: ZNode, Type: ZType, Token: ZToken): ZNewArrayNode {
	super(ParentNode, null, 0);
}

function ZNewObjectNode(this: ZNewanyNode, ParentNode: ZNode): ZNewanyNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZNewanyNode, Visitor: ZVisitor): void {
	Visitor.VisitNewObjectNode(this);
}

function ToStaticFuncCall(this: ZNewanyNode, Func: ZFunc): ZFuncCallNode {
	ZGetNameNode Dummy = new ZGetNameNode(null, this.SourceToken, Func.FuncName);
	ZFuncCallNode FuncNode = new ZFuncCallNode(this.ParentNode, Dummy);
	FuncNode.SourceToken = this.SourceToken;
	FuncNode.Append(this);
	var i: int = 0;
	while(i < this.GetListSize()) {
		FuncNode.Append(this.GetListAt(i));
		i = i + 1;
	}
	FuncNode.ResolvedFunc = Func;
	return FuncNode;
}

function ZNotNode(this: ZNotNode, ParentNode: ZNode, Token: ZToken): ZNotNode {
	super(ParentNode, Token);
}

function Accept(this: ZNotNode, Visitor: ZVisitor): void {
	Visitor.VisitNotNode(this);
}

function ZNullNode(this: ZNullNode, ParentNode: ZNode, SourceToken: ZToken): ZNullNode {
	super(ParentNode, SourceToken);
}

function Accept(this: ZNullNode, Visitor: ZVisitor): void {
	Visitor.VisitNullNode(this);
}

function ZOrNode(this: ZOrNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZOrNode {
	super(ParentNode, Token, Left, Pattern);
}

function Accept(this: ZOrNode, Visitor: ZVisitor): void {
	Visitor.VisitOrNode(this);
}

function ZStringNode(this: ZStringNode, ParentNode: ZNode, Token: ZToken, Value: String): ZStringNode {
	super(ParentNode, Token);
	this.Type = ZType.StringType;
	this.StringValue = Value;
}

function Accept(this: ZStringNode, Visitor: ZVisitor): void {
	Visitor.VisitStringNode(this);
}

function ZTypeNode(this: ZTypeNode, ParentNode: ZNode, SourceToken: ZToken, ParsedType: ZType): ZTypeNode {
	super(ParentNode, SourceToken);
	this.Type = ParsedType;
}

function GetVisitName(this: ZTypeNode): String {
	return "VisitTypeNode";
}

function ZAndNode(this: ZAndNode, ParentNode: ZNode, Token: ZToken, Left: ZNode, Pattern: ZSyntax): ZAndNode {
	super(ParentNode, Token, Left, Pattern);
}

function Accept(this: ZAndNode, Visitor: ZVisitor): void {
	Visitor.VisitAndNode(this);
}

function ZArrayLiteralNode(this: ZArrayLiteralNode, ParentNode: ZNode): ZArrayLiteralNode {
	super(ParentNode, null, 0);
}

function Accept(this: ZArrayLiteralNode, Visitor: ZVisitor): void {
	Visitor.VisitArrayLiteralNode(this);
}

function ZBlockNode(this: ZBlockNode, NameSpace: ZNameSpace): ZBlockNode {
	super(null, null, 0);
	this.NameSpace = NameSpace;
}

function ZBlockNode(this: ZBlockNode, ParentNode: ZNode, Init: int): ZBlockNode {
	super(ParentNode, null, Init);
	this.NameSpace = ParentNode.GetNameSpace().CreateSubNameSpace();
}

function Accept(this: ZBlockNode, Visitor: ZVisitor): void {
	Visitor.VisitBlockNode(this);
}

function ToReturnNode(this: ZBlockNode): ZReturnNode {
	if(this.GetListSize() == 1) {
		return this.GetListAt(0).ToReturnNode();
	}
	return null;
}

function ZBooleanNode(this: ZBooleanNode, ParentNode: ZNode, Token: ZToken, Value: boolean): ZBooleanNode {
	super(ParentNode, Token);
	this.Type = ZType.BooleanType;
	this.BooleanValue = Value;
}

function Accept(this: ZBooleanNode, Visitor: ZVisitor): void {
	Visitor.VisitBooleanNode(this);
}

function ZClassDeclNode(this: ZClassDeclNode, ParentNode: ZNode): ZClassDeclNode {
	super(ParentNode, null, 0);
}

function SetTypeInfo(this: ZClassDeclNode, Type: ZType): void {
	this.SuperType = Type;
}

function SetNameInfo(this: ZClassDeclNode, Name: String): void {
	this.ClassName = Name;
}

function GetFieldNode(this: ZClassDeclNode, Index: int): ZFieldNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZFieldNode) {
		return (ZFieldNode)Node;
	}
	return null;
}

function Accept(this: ZClassDeclNode, Visitor: ZVisitor): void {
	Visitor.VisitClassDeclNode(this);
}

function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, FuncNode: ZNode): ZFuncCallNode {
	super(ParentNode, null, 1);
	this.Set(ZFuncCallNode_Func, FuncNode);
}

function ZFuncCallNode(this: ZFuncCallNode, ParentNode: ZNode, SourceToken: ZToken, ResolvedFunc: ZFunc): ZFuncCallNode {
	super(ParentNode, SourceToken, 1);
	this.ResolvedFunc = ResolvedFunc;
}

function GetRecvType(this: ZFuncCallNode): ZType {
	if(this.GetListSize() > 0) {
		return this.GetListAt(0).Type.GetRealType();
	}
	return ZType.VoidType;
}

function Accept(this: ZFuncCallNode, Visitor: ZVisitor): void {
	Visitor.VisitFuncCallNode(this);
}

function ZFunctionNode(this: ZFunctionNode, ParentNode: ZNode): ZFunctionNode {
	super(ParentNode, null, 1);
}

function SetTypeInfo(this: ZFunctionNode, Type: ZType): void {
	this.ReturnType = Type;
}

function SetNameInfo(this: ZFunctionNode, Name: String): void {
	this.FuncName = Name;
}

function Accept(this: ZFunctionNode, Visitor: ZVisitor): void {
	Visitor.VisitFunctionNode(this);
}

function GetParamNode(this: ZFunctionNode, Index: int): ZParamNode {
	var Node: ZNode = this.GetListAt(Index);
	if(Node instanceof ZParamNode) {
		return (ZParamNode)Node;
	}
	return null;
}

function GetFuncType(this: ZFunctionNode, ContextType: ZType): ZFuncType {
	if(this.ResolvedFuncType == null) {
		var FuncType: ZFuncType = null;
		if(ContextType instanceof ZFuncType) {
			FuncType = (ZFuncType)ContextType;
		}
		var TypeList: ZType[] = [];
		if(this.ReturnType.IsVarType() && FuncType != null) {
			this.ReturnType = FuncType.GetParamType(0);
		}
		TypeList.add(this.ReturnType.GetRealType());
		var i: int = 0;
		while(i < this.GetListSize()) {
			var Node: ZParamNode = this.GetParamNode(i);
			var ParamType: ZType = Node.Type.GetRealType();
			if(ParamType.IsVarType() && FuncType != null) {
				ParamType = FuncType.GetParamType(i+1);
			}
			TypeList.add(ParamType);
			i = i + 1;
		}
		FuncType = ZTypePool.LookupFuncType(TypeList);
		if(!FuncType.IsVarType()) {
			this.ResolvedFuncType = FuncType;
		}
		return FuncType;
	}
	return this.ResolvedFuncType;
}

function Push(this: ZFunctionNode, Parent: ZFunctionNode): ZFunctionNode {
	this.ParentFunctionNode = Parent;
	return this;
}

function Pop(this: ZFunctionNode): ZFunctionNode {
	return this.ParentFunctionNode;
}

function GetVarIndex(this: ZFunctionNode): int {
	var Index: int = this.VarIndex;
	this.VarIndex = this.VarIndex + 1;
	return Index;
}

function ZVarDeclNode(this: ZVarDeclNode, ParentNode: ZNode): ZVarDeclNode {
	super(ParentNode, 1);
}

function SetNameInfo(this: ZVarDeclNode, Name: String): void {
	this.NativeName = Name;
}

function SetTypeInfo(this: ZVarDeclNode, Type: ZType): void {
	this.DeclType = Type;
}

function Accept(this: ZVarDeclNode, Visitor: ZVisitor): void {
	Visitor.VisitVarDeclNode(this);
}


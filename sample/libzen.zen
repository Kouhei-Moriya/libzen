function ZType(this: ZType, TypeFlag: int, ShortName: String, RefType: ZType): ZType;
function GetRealType(this: ZType): ZType;
function GetSuperType(this: ZType): ZType;
function GetBaseType(this: ZType): ZType;
function GetParamSize(this: ZType): int;
function GetParamType(this: ZType, Index: int): ZType;
function Equals(this: ZType, Type: ZType): boolean;
function Accept(this: ZType, Type: ZType): boolean;
function IsGreekType(this: ZType): boolean;
function GetRealType(this: ZType, Greek: ZType[]): ZType;
function AcceptValueType(this: ZType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean;
function IsVoidType(this: ZType): boolean;
function IsVarType(this: ZType): boolean;
function IsInferrableType(this: ZType): boolean;
function IsTypeType(this: ZType): boolean;
function IsBooleanType(this: ZType): boolean;
function IsIntType(this: ZType): boolean;
function IsFloatType(this: ZType): boolean;
function IsNumberType(this: ZType): boolean;
function IsStringType(this: ZType): boolean;
function IsArrayType(this: ZType): boolean;
function IsMapType(this: ZType): boolean;
function IsOpenType(this: ZType): boolean;
function IsImmutableType(this: ZType): boolean;
function IsNullableType(this: ZType): boolean;
function toString(this: ZType): String;
function GetAsciiName(this: ZType): String;
function StringfyClassMember(this: ZType, Name: String): String;
function GetUniqueName(this: ZType): String;
function IsFuncType(this: ZType): boolean;
function StringfySignature(this: ZType, FuncName: String): String;
function Maybe(this: ZType, T: ZType, SourceToken: ZToken): void;
class ZType {
	var TypeFlag: int = 0;
	var TypeId: int = 0;
	var ShortName: String = null;
	var RefType: ZType = null;
	var GetRealType: Func<ZType,ZType>;
	var GetSuperType: Func<ZType,ZType>;
	var GetBaseType: Func<ZType,ZType>;
	var GetParamSize: Func<int,ZType>;
	var GetParamType: Func<ZType,ZType,int>;
	var IsGreekType: Func<boolean,ZType>;
	var GetRealType: Func<ZType,ZType,ZType[]>;
	var AcceptValueType: Func<boolean,ZType,ZType,boolean,ZType[]>;
	var IsVarType: Func<boolean,ZType>;
}
let ZTypeUniqueTypeFlag = 1 << 16;
let ZTypeUnboxTypeFlag = 1 << 10;
let ZTypeOpenTypeFlag = 1 << 9;  // @Open for the future
let ZTypeVarType = new ZType(ZTypeUniqueTypeFlag, "var", null);
let ZTypeVoidType = new ZType(ZTypeUniqueTypeFlag, "void", null);
let ZTypeBooleanType = new ZType(ZTypeUniqueTypeFlag, "boolean", ZTypeVarType);
let ZTypeIntType = new ZType(ZTypeUniqueTypeFlag, "int", ZTypeVarType);
let ZTypeFloatType = new ZType(ZTypeUniqueTypeFlag, "float", ZTypeVarType);
let ZTypeStringType = new ZType(ZTypeUniqueTypeFlag, "String", ZTypeVarType);
let ZTypeTypeType = new ZType(ZTypeUniqueTypeFlag, "Type", ZTypeVarType);
let ZTypeArrayType = new ZGeneric1Type(ZTypeUniqueTypeFlag, "Array", null, ZTypeVarType);
let ZTypeMapType = new ZGeneric1Type(ZTypeUniqueTypeFlag, "Map", null, ZTypeVarType);
let ZTypeFuncType = new ZFuncType("Func", null);
function ZType(this: ZType, TypeFlag: int, ShortName: String, RefType: ZType): ZType {
	this.TypeFlag = TypeFlag;
	this.ShortName = ShortName;
	this.RefType = RefType;
	if(LibZen_IsFlag(TypeFlag, ZTypeUniqueTypeFlag)) {
		this.TypeId = ZTypePool_NewTypeId(this);
	}
}

function GetRealType(this: ZType): ZType {
	return this;
}

function GetSuperType(this: ZType): ZType {
	return this.RefType;
}

function GetBaseType(this: ZType): ZType {
	return this;
}

function GetParamSize(this: ZType): int {
	return 0;
}

function GetParamType(this: ZType, Index: int): ZType {
	return ZTypeVarType;  // for safety, it is used in Array
}

function Equals(this: ZType, Type: ZType): boolean {
	return (this.GetRealType() == Type.GetRealType());
}

function Accept(this: ZType, Type: ZType): boolean {
	var ThisType: ZType = this.GetRealType();
	if(ThisType == Type.GetRealType() /*|| ThisType == ZenSystem.AnyType*/) {
		return true;
	}
	var SuperClass: ZType = Type.GetSuperType();
	while(SuperClass != null) {
		if(SuperClass == ThisType) {
			return true;
		}
		SuperClass = SuperClass.GetSuperType();
	}
	return false;
}

function IsGreekType(this: ZType): boolean {
	return false;
}

function GetRealType(this: ZType, Greek: ZType[]): ZType {
	return this.GetRealType();
}

function AcceptValueType(this: ZType, ValueType: ZType, ExactMatch: boolean, Greek: ZType[]): boolean {
	if(this.GetRealType() != ValueType && !ValueType.IsVarType()) {
		if(ExactMatch && !this.Accept(ValueType)) {
			return false;
		}
	}
	return true;
}

function IsVoidType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeVoidType);
}

function IsVarType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeVarType);
}

function IsInferrableType(this: ZType): boolean {
	return (!this.IsVarType() && !this.IsVoidType());
}

function IsTypeType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeTypeType);
}

function IsBooleanType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeBooleanType);
}

function IsIntType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeIntType);
}

function IsFloatType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeFloatType);
}

function IsNumberType(this: ZType): boolean {
	return (this.IsIntType() || this.IsFloatType());
}

function IsStringType(this: ZType): boolean {
	return (this.GetRealType() == ZTypeStringType);
}

function IsArrayType(this: ZType): boolean {
	return (this.GetBaseType() == ZTypeArrayType);
}

function IsMapType(this: ZType): boolean {
	return (this.GetBaseType() == ZTypeMapType);
}

function IsOpenType(this: ZType): boolean {
	return LibZen_IsFlag(this.TypeFlag, ZTypeOpenTypeFlag);
}

function IsImmutableType(this: ZType): boolean {
	return false;
}

function IsNullableType(this: ZType): boolean {
	return true;
}

function toString(this: ZType): String {
	return this.ShortName;
}

function GetAsciiName(this: ZType): String {
	return this.ShortName;
}

function StringfyClassMember(this: ZType, Name: String): String {
	return Name + " of " + this.ShortName;
}

function GetUniqueName(this: ZType): String {
	return LibZen_Stringfy(this.TypeId);
}

function IsFuncType(this: ZType): boolean {
	return (this.GetRealType() instanceof ZFuncType);
}

function StringfySignature(this: ZType, FuncName: String): String {
	return FuncName;
}

function Maybe(this: ZType, T: ZType, SourceToken: ZToken): void {
}

